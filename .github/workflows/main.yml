name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  test-service-identifier: "test-service01"

jobs:
  test-service:
    runs-on: ubuntu-latest
    outputs:
      service-identifer: ${{ steps.start.outputs.service-identifer }}
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    - run: pnpm install
    - id: start
      uses: ./.github/workflows/workflow-level-service/start
      with:
        service-name: ${{ env.test-service-identifier }}
        service-command: ""

  test-consumer:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    - run: pnpm install
    - uses: ./.github/workflows/workflow-level-service/connect
      with:
        service-identifer: ${{ env.test-service-identifier }}
    - run: echo "Testing service"
    - run: sleep 30s

  stop-test-service:
    runs-on: ubuntu-latest
    needs: [test-consumer]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v4
    - uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    - run: pnpm install
    - uses: ./.github/workflows/workflow-level-service/stop
      with:
        service-identifer: ${{ env.test-service-identifier }}

#   docker-build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         dockerfile: ["ssh", "http", "https", "socket"]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: docker/setup-qemu-action@v3
#     - uses: docker/setup-buildx-action@v3
#     - uses: docker/login-action@v3
#       with:
#         registry: ghcr.io
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
#     - uses: docker/metadata-action@v5
#       id: meta
#       with:
#         images: ghcr.io/${{ github.repository }}/${{ matrix.dockerfile }}-dind
#     - uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: false
#         cache-from: type=gha
#         cache-to: type=gha,mode=max
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         file: test/data/agent-${{ matrix.dockerfile }}.dockerfile
#         outputs: type=docker,dest=/tmp/${{ matrix.dockerfile }}-dind-docker-image.tar
#     - uses: actions/upload-artifact@v4
#       with:
#         name: ${{ matrix.dockerfile }}-dind-docker-image
#         path: /tmp/${{ matrix.dockerfile }}-dind-docker-image.tar
#         if-no-files-found: error

#   docker-publish:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     environment: "Docker release"
#     strategy:
#       matrix:
#         dockerfile: ["ssh", "http", "https", "socket"]
#     permissions:
#       contents: read
#       packages: write
#     steps:
#     - uses: actions/checkout@v4
#     - uses: docker/setup-qemu-action@v3
#     - uses: docker/setup-buildx-action@v3
#     - uses: docker/login-action@v3
#       with:
#         registry: ghcr.io
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
#     - uses: docker/metadata-action@v5
#       id: meta
#       with:
#         images: ghcr.io/${{ github.repository }}/${{ matrix.dockerfile }}-dind
#     - uses: docker/build-push-action@v5
#       with:
#         context: .
#         push: true
#         cache-from: type=gha
#         cache-to: type=gha,mode=max
#         tags: ${{ steps.meta.outputs.tags }}
#         labels: ${{ steps.meta.outputs.labels }}
#         file: test/data/agent-${{ matrix.dockerfile }}.dockerfile
#         platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6

#   update-pnpm-cache:
#     runs-on: ${{ matrix.os }}
#     defaults:
#       run:
#         shell: bash
#     strategy:
#       matrix:
#         node-version: [16.x, 18.x, 20.x]
#         os: [ubuntu-latest, macos-latest, windows-latest]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: ${{ matrix.node-version }}
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#         restore-keys: |
#             ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-store-
#     - run: python3 -m pip install setuptools
#     - run: pnpm install

#   ssh-docker-service:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: 18
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache/restore@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node18-pnpm-store-
#     - run: pnpm install
#     - uses: actions/download-artifact@v4
#       with:
#         path: /tmp
#         name: ssh-dind-docker-image
#     - uses: docker/metadata-action@v5
#       id: meta
#       with:
#         images: ghcr.io/${{ github.repository }}/ssh-dind
#     - run: docker load --input /tmp/ssh-dind-docker-image.tar
#     - run: docker image ls -a
#     - uses: tailscale/github-action@v2
#       with:
#         tags: tag:tme-ci
#         version: 1.58.2
#         oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#         oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#     - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
#     - uses: actions/upload-artifact@v4
#       with:
#         path: /tmp/connection-string
#         name: ssh-docker-service-connection-string
#         if-no-files-found: error
#     - run: docker run --rm --privileged --detach --ulimit nproc=-1 --ulimit core=-1 --pids-limit -1 --oom-score-adj -500 ${{ steps.meta.outputs.tags }}
#     - run: node test/ci-wait-for-artifacts.js
#       env:
#         GITHUB_ARTIFACT_COUNT: 9
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   http-docker-service:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: 18
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache/restore@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node18-pnpm-store-
#     - run: pnpm install
#     - uses: actions/download-artifact@v4
#       with:
#         path: /tmp
#         name: http-dind-docker-image
#     - uses: docker/metadata-action@v5
#       id: meta
#       with:
#         images: ghcr.io/${{ github.repository }}/http-dind
#     - run: docker load --input /tmp/http-dind-docker-image.tar
#     - run: docker image ls -a
#     - uses: tailscale/github-action@v2
#       with:
#         tags: tag:tme-ci
#         version: 1.58.2
#         oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#         oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#     - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
#     - uses: actions/upload-artifact@v4
#       with:
#         path: /tmp/connection-string
#         name: http-docker-service-connection-string
#         if-no-files-found: error
#     - run: docker run --rm --privileged --detach --ulimit nproc=-1 --ulimit core=-1 --pids-limit -1 --oom-score-adj -500 ${{ steps.meta.outputs.tags }}
#     - run: node test/ci-wait-for-artifacts.js
#       env:
#         GITHUB_ARTIFACT_COUNT: 9
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   https-docker-service:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: 18
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache/restore@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node18-pnpm-store-
#     - run: pnpm install
#     - uses: actions/download-artifact@v4
#       with:
#         path: /tmp
#         name: https-dind-docker-image
#     - uses: docker/metadata-action@v5
#       id: meta
#       with:
#         images: ghcr.io/${{ github.repository }}/https-dind
#     - run: docker load --input /tmp/https-dind-docker-image.tar
#     - run: docker image ls -a
#     - uses: tailscale/github-action@v2
#       with:
#         tags: tag:tme-ci
#         version: 1.58.2
#         oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#         oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#     - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
#     - uses: actions/upload-artifact@v4
#       with:
#         path: /tmp/connection-string
#         name: https-docker-service-connection-string
#         if-no-files-found: error
#     - run: docker run --rm --privileged --detach --ulimit nproc=-1 --ulimit core=-1 --pids-limit -1 --oom-score-adj -500 ${{ steps.meta.outputs.tags }}
#     - run: node test/ci-wait-for-artifacts.js
#       env:
#         GITHUB_ARTIFACT_COUNT: 9
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   unix-socket-docker-service:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: 18
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache/restore@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node18-pnpm-store-
#     - run: pnpm install
#     - uses: actions/download-artifact@v4
#       with:
#         path: /tmp
#         name: socket-dind-docker-image
#     - uses: docker/metadata-action@v5
#       id: meta
#       with:
#         images: ghcr.io/${{ github.repository }}/socket-dind
#     - run: docker load --input /tmp/socket-dind-docker-image.tar
#     - run: docker image ls -a
#     - uses: tailscale/github-action@v2
#       with:
#         tags: tag:tme-ci
#         version: 1.58.2
#         oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#         oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#     - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
#     - uses: actions/upload-artifact@v4
#       with:
#         path: /tmp/connection-string
#         name: socket-docker-service-connection-string
#         if-no-files-found: error
#     - run: docker run --rm --privileged --detach --ulimit nproc=-1 --ulimit core=-1 --pids-limit -1 --oom-score-adj -500 ${{ steps.meta.outputs.tags }}
#     - run: node test/ci-wait-for-artifacts.js
#       env:
#         GITHUB_ARTIFACT_COUNT: 9
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   remote-docker-engine-services-starts:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: 18
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache/restore@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node18-pnpm-store-
#     - run: pnpm install
#     - run: node test/ci-wait-for-artifacts.js
#       env:
#         GITHUB_ARTIFACT_COUNT: 8
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#   remote-docker-engine-tests:
#     needs: [docker-build, remote-docker-engine-services-starts]
#     runs-on: ${{ matrix.os }}
#     defaults:
#       run:
#         shell: bash
#     strategy:
#       fail-fast: false
#       matrix:
#         node-version: [16.x, 18.x, 20.x]
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         docker-engine: [ssh, http, https]
#     steps:
#     - uses: actions/checkout@v4
#     - uses: actions/setup-node@v4
#       with:
#         node-version: ${{ matrix.node-version }}
#     - uses: actions/setup-go@v5
#       with:
#         go-version: '^1.21'
#     - uses: pnpm/action-setup@v2
#       with:
#         version: 8
#         run_install: false
#     - name: Get pnpm store directory
#       shell: bash
#       run: |
#         echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
#     - uses: actions/cache@v3
#       with:
#         path: ${{ env.STORE_PATH }}
#         key: ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
#         restore-keys: |
#             ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-store-
#     - run: python3 -m pip install setuptools
#     - run: pnpm install
#     - run: node test/ci-wait-for-artifacts.js
#       env:
#         GITHUB_ARTIFACT_COUNT: 8
#         GITHUB_RUN_ID: ${{ github.run_id }}
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     - uses: actions/download-artifact@v4
#       with:
#         pattern: "*-service-connection-string"
#     - if: ${{ runner.os == 'Windows' }}
#       run: |
#         choco install tailscale -y
#         export TS_EXPERIMENT_OAUTH_AUTHKEY=true
#         export TAGS_ARG="--advertise-tags=tag:tme-ci"
#         export TAILSCALE_AUTHKEY="${{ secrets.TS_OAUTH_SECRET }}?preauthorized=true&ephemeral=true"
#         /C/Program\ Files/Tailscale/tailscale up ${TAGS_ARG} --authkey=${TAILSCALE_AUTHKEY}
#         /C/Program\ Files/Tailscale/tailscale ping "$(cat ssh-docker-service-connection-string/connection-string)"
#         /C/Program\ Files/Tailscale/tailscale ping "$(cat http-docker-service-connection-string/connection-string)"
#         /C/Program\ Files/Tailscale/tailscale ping "$(cat https-docker-service-connection-string/connection-string)"
#         /C/Program\ Files/Tailscale/tailscale ping "$(cat socket-docker-service-connection-string/connection-string)"
#     - if: ${{ runner.os == 'macOS' }}
#       run: |
#         brew install tailscale
#         sudo /usr/local/opt/tailscale/bin/tailscaled &
#         sleep 5
#         export TS_EXPERIMENT_OAUTH_AUTHKEY=true
#         export TAGS_ARG="--advertise-tags=tag:tme-ci"
#         export TAILSCALE_AUTHKEY="${{ secrets.TS_OAUTH_SECRET }}?preauthorized=true&ephemeral=true"
#         sudo tailscale up ${TAGS_ARG} --authkey=${TAILSCALE_AUTHKEY}
#         tailscale ping "$(cat ssh-docker-service-connection-string/connection-string)"
#         tailscale ping "$(cat http-docker-service-connection-string/connection-string)"
#         tailscale ping "$(cat https-docker-service-connection-string/connection-string)"
#         tailscale ping "$(cat socket-docker-service-connection-string/connection-string)"
#     - uses: tailscale/github-action@v2
#       if: ${{ runner.os == 'Linux'}}
#       with:
#         tags: tag:tme-ci
#         version: 1.58.2
#         oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
#         oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
#     - if: ${{ runner.os == 'Linux'}}
#       run: |
#         tailscale ping "$(cat ssh-docker-service-connection-string/connection-string)"
#         tailscale ping "$(cat http-docker-service-connection-string/connection-string)"
#         tailscale ping "$(cat https-docker-service-connection-string/connection-string)"
#         tailscale ping "$(cat socket-docker-service-connection-string/connection-string)"
#     - if: ${{ runner.os == 'Windows' }}
#       run: |
#         /C/Program\ Files/Tailscale/tailscale down
#         /C/Program\ Files/Tailscale/tailscale logout
#     - if: ${{ runner.os == 'macOS' || runner.os == 'Linux'}}
#       run: |
#         sudo tailscale down
#         sudo tailscale logout

#   local-docker-desktop-tests:
#     runs-on: ${{ matrix.os }}
#     needs: [remote-docker-engine-tests]
#     defaults:
#       run:
#         shell: bash
#     strategy:
#       fail-fast: false
#       matrix:
#         node-version: [16.x, 18.x, 20.x]
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         docker-desktop: [v1, v2, v3, v4, v5, v6]
#     steps:
#     - uses: actions/checkout@v4

#   local-podman-desktop-tests:
#     runs-on: ${{ matrix.os }}
#     needs: [remote-docker-engine-tests]
#     defaults:
#       run:
#         shell: bash
#     strategy:
#       fail-fast: false
#       matrix:
#         node-version: [16.x, 18.x, 20.x]
#         os: [ubuntu-latest, macos-latest, windows-latest]
#         podman-desktop: [v1, v2, v3, v4, v5, v6]
#     steps:
#     - uses: actions/checkout@v4

#   stop-services:
#     runs-on: ubuntu-latest
#     needs: [remote-docker-engine-tests]
#     if: always()
#     steps:
#     - run: touch /tmp/stop-services
#     - uses: actions/upload-artifact@v4
#       with:
#         path: /tmp/stop-services
#         name: stop-services
#         if-no-files-found: error

#   publish-pre-release:
#     runs-on: ubuntu-latest
#     environment: "NPM pre-release"
#     needs: [local-docker-desktop-tests, remote-docker-engine-tests, local-podman-desktop-tests, http-docker-service, https-docker-service, ssh-docker-service, unix-socket-docker-service]
#     steps:
#     - run: echo "Publishing artifacts"

#   publish-official-release:
#     runs-on: ubuntu-latest
#     if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main'}}
#     environment: "NPM official-release"
#     needs: [local-docker-desktop-tests, remote-docker-engine-tests, local-podman-desktop-tests, http-docker-service, https-docker-service, ssh-docker-service, unix-socket-docker-service]
#     steps:
#     - run: echo "Publishing artifacts"
