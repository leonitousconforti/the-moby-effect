name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  docker-build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dockerfile: ["ssh", "http", "https", "socket"]
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
    - uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}/${{ matrix.dockerfile }}-dind
    - uses: docker/build-push-action@v5
      if: ${{ github.event_name != 'pull_request' && github.event_name != 'workflow_dispatch' }}
      with:
        context: .
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: test/data/agent-${{ matrix.dockerfile }}.dockerfile
        platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6
    - uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        file: test/data/agent-${{ matrix.dockerfile }}.dockerfile
        outputs: type=docker,dest=/tmp/${{ matrix.dockerfile }}-dind-docker-image.tar
    - uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.dockerfile }}-dind-docker-image
        path: /tmp/${{ matrix.dockerfile }}-dind-docker-image.tar
        if-no-files-found: error

  ssh-docker-service:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: /tmp
        name: ssh-dind-docker-image
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}/ssh-dind
    - run: docker load --input /tmp/ssh-dind-docker-image.tar
    - run: docker image ls -a
    - uses: tailscale/github-action@v2
      with:
        tags: tag:tme-ci
        version: 1.58.2
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
    - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
    - uses: actions/upload-artifact@v4
      with:
        path: /tmp/connection-string
        name: ssh-docker-service-connection-string
        if-no-files-found: error
    - run: |
        timeout 5m \
            docker run \
            --rm --privileged \
            --ulimit nproc=-1 \
            --ulimit core=-1 \
            --pids-limit -1 \
            --oom-score-adj -500 \
            ${{ steps.meta.outputs.tags }} \
        || true

  http-docker-service:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: /tmp
        name: http-dind-docker-image
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}/http-dind
    - run: docker load --input /tmp/http-dind-docker-image.tar
    - run: docker image ls -a
    - uses: tailscale/github-action@v2
      with:
        tags: tag:tme-ci
        version: 1.58.2
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
    - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
    - uses: actions/upload-artifact@v4
      with:
        path: /tmp/connection-string
        name: http-docker-service-connection-string
        if-no-files-found: error
    - run: |
        timeout 5m \
            docker run \
            --rm --privileged \
            --ulimit nproc=-1 \
            --ulimit core=-1 \
            --pids-limit -1 \
            --oom-score-adj -500 \
            ${{ steps.meta.outputs.tags }} \
        || true

  https-docker-service:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: /tmp
        name: https-dind-docker-image
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}/https-dind
    - run: docker load --input /tmp/https-dind-docker-image.tar
    - run: docker image ls -a
    - uses: tailscale/github-action@v2
      with:
        tags: tag:tme-ci
        version: 1.58.2
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
    - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
    - uses: actions/upload-artifact@v4
      with:
        path: /tmp/connection-string
        name: https-docker-service-connection-string
        if-no-files-found: error
    - run: |
        timeout 5m \
            docker run \
            --rm --privileged \
            --ulimit nproc=-1 \
            --ulimit core=-1 \
            --pids-limit -1 \
            --oom-score-adj -500 \
            ${{ steps.meta.outputs.tags }} \
        || true

  unix-socket-docker-service:
    runs-on: ubuntu-latest
    needs: [docker-build]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: /tmp
        name: socket-dind-docker-image
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}/socket-dind
    - run: docker load --input /tmp/socket-dind-docker-image.tar
    - run: docker image ls -a
    - uses: tailscale/github-action@v2
      with:
        tags: tag:tme-ci
        version: 1.58.2
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
    - run: echo "$(tailscale ip -4)" >> /tmp/connection-string
    - uses: actions/upload-artifact@v4
      with:
        path: /tmp/connection-string
        name: socket-docker-service-connection-string
        if-no-files-found: error
    - run: |
        timeout 5m \
            docker run \
            --rm --privileged \
            --ulimit nproc=-1 \
            --ulimit core=-1 \
            --pids-limit -1 \
            --oom-score-adj -500 \
            ${{ steps.meta.outputs.tags }} \
        || true

  test:
    needs: [docker-build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x, 20.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    - uses: pnpm/action-setup@v2
      with:
        version: 8
        run_install: false
    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
    - uses: actions/cache@v3
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
            ${{ runner.os }}-node${{ matrix.node-version }}-pnpm-store-
    - run: pnpm install
    - run: node test/ci-wait-for-artifacts.js
      env:
        GITHUB_RUN_ID: ${{ github.run_id }}
    - uses: actions/download-artifact@v4
      with:
        pattern: "*-service-connection-string"
    - if: ${{ runner.os == 'Windows' }}
      run: choco install tailscale
    - if: ${{ runner.os == 'macOS' }}
      run: |
        brew install tailscale
        brew services start tailscale
        sleep 5s
    - uses: tailscale/github-action@v2
      if: ${{ runner.os == 'Linux'}}
      with:
        tags: tag:tme-ci
        version: 1.58.2
        oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
        oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
    - run: tailscale ping "$(cat ssh-docker-service-connection-string/connection-string)"
    - run: tailscale ping "$(cat http-docker-service-connection-string/connection-string)"
    - run: tailscale ping "$(cat https-docker-service-connection-string/connection-string)"
    - run: tailscale ping "$(cat socket-docker-service-connection-string/connection-string)"
