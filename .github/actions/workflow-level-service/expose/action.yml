name: "Workflow level service - Expose"
description: "Exposes a workflow level service"

inputs:
  service-identifier:
    description: "Name of the service"
    required: true
  node-version:
    description: "Node.js version"
    required: true
    default: "18.x"
  GITHUB_TOKEN:
    description: "GitHub token"
    required: true

runs:
  using: "composite"
  steps:
    - name: "Install wireguard linux"
      shell: bash
      if: runner.os == 'Linux'
      run: sudo apt-get install -y --no-install-recommends wireguard

    - name: "Install wireguard macOS"
      shell: bash
      if: runner.os == 'macOS'
      run: brew install wireguard-tools

    - name: "Install wireguard windows"
      shell: bash
      if: runner.os == 'Windows'
      run: choco install wireguard

    - uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: "Install pnpm"
      shell: bash
      run: npm install pnpm@8 -g

    - name: "Get pnpm store"
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: "Restore pnpm store"
      uses: actions/cache/restore@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-node${{ inputs.node-version }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}

    - name: "Install dependencies with pnpm"
      shell: bash
      run: pnpm install

    - name: "Export runtime variables"
      uses: actions/github-script@v7
      env:
        github-token: ${{ inputs.GITHUB_TOKEN }}
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env['ACTIONS_CACHE_URL'])
          core.exportVariable('ACTIONS_RUNTIME_URL', process.env['ACTIONS_RUNTIME_URL'])
          core.exportVariable('ACTIONS_RESULTS_URL', process.env['ACTIONS_RESULTS_URL'])
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env['ACTIONS_RUNTIME_TOKEN'])

    - name: "Expose service"
      shell: bash
      run: sudo -E node .github/actions/workflow-level-service/expose/expose.js
      env:
        SERVICE_IDENTIFIER: ${{ inputs.service-identifier }}
