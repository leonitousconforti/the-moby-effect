/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.44) is used. For example, calling `/info` is the same as calling `/v1.44/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * OpenAPI spec version: 1.44
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/v1.44".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration?: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * Address represents an IPv4 or IPv6 IP address.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * IP address.
     * @type {string}
     * @memberof Address
     */
    addr?: string;
    /**
     * Mask length of the IP address.
     * @type {number}
     * @memberof Address
     */
    prefixLen?: number;
}

/**
 * 
 * @export
 * @interface AuthConfig
 */
export interface AuthConfig {
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    password?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthConfig
     */
    serveraddress?: string;
}

/**
 * BuildCache contains information about a build cache record. 
 * @export
 * @interface BuildCache
 */
export interface BuildCache {
    /**
     * Unique ID of the build cache record. 
     * @type {string}
     * @memberof BuildCache
     */
    ID?: string;
    /**
     * ID of the parent build cache record.  > **Deprecated**: This field is deprecated, and omitted if empty. 
     * @type {string}
     * @memberof BuildCache
     */
    parent?: string;
    /**
     * List of parent build cache record IDs. 
     * @type {Array<string>}
     * @memberof BuildCache
     */
    parents?: Array<string>;
    /**
     * Cache record type. 
     * @type {string}
     * @memberof BuildCache
     */
    type?: BuildCache.TypeEnum;
    /**
     * Description of the build-step that produced the build cache. 
     * @type {string}
     * @memberof BuildCache
     */
    description?: string;
    /**
     * Indicates if the build cache is in use. 
     * @type {boolean}
     * @memberof BuildCache
     */
    inUse?: boolean;
    /**
     * Indicates if the build cache is shared. 
     * @type {boolean}
     * @memberof BuildCache
     */
    shared?: boolean;
    /**
     * Amount of disk space used by the build cache (in bytes). 
     * @type {number}
     * @memberof BuildCache
     */
    size?: number;
    /**
     * Date and time at which the build cache was created in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof BuildCache
     */
    createdAt?: string;
    /**
     * Date and time at which the build cache was last used in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof BuildCache
     */
    lastUsedAt?: string;
    /**
     * 
     * @type {number}
     * @memberof BuildCache
     */
    usageCount?: number;
}

/**
 * @export
 * @namespace BuildCache
 */
export namespace BuildCache {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Internal = <any> 'internal',
        Frontend = <any> 'frontend',
        SourceLocal = <any> 'source.local',
        SourceGitCheckout = <any> 'source.git.checkout',
        ExecCachemount = <any> 'exec.cachemount',
        Regular = <any> 'regular',
    }
}

/**
 * 
 * @export
 * @interface BuildInfo
 */
export interface BuildInfo {
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    stream?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    error?: string;
    /**
     * 
     * @type {ErrorDetail}
     * @memberof BuildInfo
     */
    errorDetail?: ErrorDetail;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof BuildInfo
     */
    progress?: string;
    /**
     * 
     * @type {ProgressDetail}
     * @memberof BuildInfo
     */
    progressDetail?: ProgressDetail;
    /**
     * 
     * @type {ImageID}
     * @memberof BuildInfo
     */
    aux?: ImageID;
}

/**
 * 
 * @export
 * @interface BuildPruneResponse
 */
export interface BuildPruneResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof BuildPruneResponse
     */
    cachesDeleted?: Array<string>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof BuildPruneResponse
     */
    spaceReclaimed?: number;
}

/**
 * Kind of change  Can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
 * @export
 * @enum {string}
 */
export enum ChangeType {
    NUMBER_0 = <any> 0,
    NUMBER_1 = <any> 1,
    NUMBER_2 = <any> 2,
}

/**
 * ClusterInfo represents information about the swarm as is returned by the \"/info\" endpoint. Join-tokens are not included. 
 * @export
 * @interface ClusterInfo
 */
export interface ClusterInfo {
    /**
     * The ID of the swarm.
     * @type {string}
     * @memberof ClusterInfo
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof ClusterInfo
     */
    version?: ObjectVersion;
    /**
     * Date and time at which the swarm was initialised in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof ClusterInfo
     */
    createdAt?: string;
    /**
     * Date and time at which the swarm was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof ClusterInfo
     */
    updatedAt?: string;
    /**
     * 
     * @type {SwarmSpec}
     * @memberof ClusterInfo
     */
    spec?: SwarmSpec;
    /**
     * 
     * @type {TLSInfo}
     * @memberof ClusterInfo
     */
    tLSInfo?: TLSInfo;
    /**
     * Whether there is currently a root CA rotation in progress for the swarm 
     * @type {boolean}
     * @memberof ClusterInfo
     */
    rootRotationInProgress?: boolean;
    /**
     * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. If no port is set or is set to 0, the default port (4789) is used. 
     * @type {number}
     * @memberof ClusterInfo
     */
    dataPathPort?: number;
    /**
     * Default Address Pool specifies default subnet pools for global scope networks. 
     * @type {Array<string>}
     * @memberof ClusterInfo
     */
    defaultAddrPool?: Array<string>;
    /**
     * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
     * @type {number}
     * @memberof ClusterInfo
     */
    subnetSize?: number;
}

/**
 * Options and information specific to, and only present on, Swarm CSI cluster volumes. 
 * @export
 * @interface ClusterVolume
 */
export interface ClusterVolume {
    /**
     * The Swarm ID of this volume. Because cluster volumes are Swarm objects, they have an ID, unlike non-cluster volumes. This ID can be used to refer to the Volume instead of the name. 
     * @type {string}
     * @memberof ClusterVolume
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof ClusterVolume
     */
    version?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof ClusterVolume
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ClusterVolume
     */
    updatedAt?: string;
    /**
     * 
     * @type {ClusterVolumeSpec}
     * @memberof ClusterVolume
     */
    spec?: ClusterVolumeSpec;
    /**
     * 
     * @type {ClusterVolumeInfo}
     * @memberof ClusterVolume
     */
    info?: ClusterVolumeInfo;
    /**
     * The status of the volume as it pertains to its publishing and use on specific nodes 
     * @type {Array<ClusterVolumePublishStatus>}
     * @memberof ClusterVolume
     */
    publishStatus?: Array<ClusterVolumePublishStatus>;
}

/**
 * Information about the global status of the volume. 
 * @export
 * @interface ClusterVolumeInfo
 */
export interface ClusterVolumeInfo {
    /**
     * The capacity of the volume in bytes. A value of 0 indicates that the capacity is unknown. 
     * @type {number}
     * @memberof ClusterVolumeInfo
     */
    capacityBytes?: number;
    /**
     * A map of strings to strings returned from the storage plugin when the volume is created. 
     * @type {{ [key: string]: string; }}
     * @memberof ClusterVolumeInfo
     */
    volumeContext?: { [key: string]: string; };
    /**
     * The ID of the volume as returned by the CSI storage plugin. This is distinct from the volume's ID as provided by Docker. This ID is never used by the user when communicating with Docker to refer to this volume. If the ID is blank, then the Volume has not been successfully created in the plugin yet. 
     * @type {string}
     * @memberof ClusterVolumeInfo
     */
    volumeID?: string;
    /**
     * The topology this volume is actually accessible from. 
     * @type {Array<Topology>}
     * @memberof ClusterVolumeInfo
     */
    accessibleTopology?: Array<Topology>;
}

/**
 * 
 * @export
 * @interface ClusterVolumePublishStatus
 */
export interface ClusterVolumePublishStatus {
    /**
     * The ID of the Swarm node the volume is published on. 
     * @type {string}
     * @memberof ClusterVolumePublishStatus
     */
    nodeID?: string;
    /**
     * The published state of the volume. * `pending-publish` The volume should be published to this node, but the call to the controller plugin to do so has not yet been successfully completed. * `published` The volume is published successfully to the node. * `pending-node-unpublish` The volume should be unpublished from the node, and the manager is awaiting confirmation from the worker that it has done so. * `pending-controller-unpublish` The volume is successfully unpublished from the node, but has not yet been successfully unpublished on the controller. 
     * @type {string}
     * @memberof ClusterVolumePublishStatus
     */
    state?: ClusterVolumePublishStatus.StateEnum;
    /**
     * A map of strings to strings returned by the CSI controller plugin when a volume is published. 
     * @type {{ [key: string]: string; }}
     * @memberof ClusterVolumePublishStatus
     */
    publishContext?: { [key: string]: string; };
}

/**
 * @export
 * @namespace ClusterVolumePublishStatus
 */
export namespace ClusterVolumePublishStatus {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        PendingPublish = <any> 'pending-publish',
        Published = <any> 'published',
        PendingNodeUnpublish = <any> 'pending-node-unpublish',
        PendingControllerUnpublish = <any> 'pending-controller-unpublish',
    }
}

/**
 * Cluster-specific options used to create the volume. 
 * @export
 * @interface ClusterVolumeSpec
 */
export interface ClusterVolumeSpec {
    /**
     * Group defines the volume group of this volume. Volumes belonging to the same group can be referred to by group name when creating Services.  Referring to a volume by group instructs Swarm to treat volumes in that group interchangeably for the purpose of scheduling. Volumes with an empty string for a group technically all belong to the same, emptystring group. 
     * @type {string}
     * @memberof ClusterVolumeSpec
     */
    group?: string;
    /**
     * 
     * @type {ClusterVolumeSpecAccessMode}
     * @memberof ClusterVolumeSpec
     */
    accessMode?: ClusterVolumeSpecAccessMode;
}

/**
 * Defines how the volume is used by tasks. 
 * @export
 * @interface ClusterVolumeSpecAccessMode
 */
export interface ClusterVolumeSpecAccessMode {
    /**
     * The set of nodes this volume can be used on at one time. - `single` The volume may only be scheduled to one node at a time. - `multi` the volume may be scheduled to any supported number of nodes at a time. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessMode
     */
    scope?: ClusterVolumeSpecAccessMode.ScopeEnum;
    /**
     * The number and way that different tasks can use this volume at one time. - `none` The volume may only be used by one task at a time. - `readonly` The volume may be used by any number of tasks, but they all must mount the volume as readonly - `onewriter` The volume may be used by any number of tasks, but only one may mount it as read/write. - `all` The volume may have any number of readers and writers. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessMode
     */
    sharing?: ClusterVolumeSpecAccessMode.SharingEnum;
    /**
     * Options for using this volume as a Mount-type volume.      Either MountVolume or BlockVolume, but not both, must be     present.   properties:     FsType:       type: \"string\"       description: |         Specifies the filesystem type for the mount volume.         Optional.     MountFlags:       type: \"array\"       description: |         Flags to pass when mounting the volume. Optional.       items:         type: \"string\" BlockVolume:   type: \"object\"   description: |     Options for using this volume as a Block-type volume.     Intentionally empty. 
     * @type {any}
     * @memberof ClusterVolumeSpecAccessMode
     */
    mountVolume?: any;
    /**
     * Swarm Secrets that are passed to the CSI storage plugin when operating on this volume. 
     * @type {Array<ClusterVolumeSpecAccessModeSecrets>}
     * @memberof ClusterVolumeSpecAccessMode
     */
    secrets?: Array<ClusterVolumeSpecAccessModeSecrets>;
    /**
     * 
     * @type {ClusterVolumeSpecAccessModeAccessibilityRequirements}
     * @memberof ClusterVolumeSpecAccessMode
     */
    accessibilityRequirements?: ClusterVolumeSpecAccessModeAccessibilityRequirements;
    /**
     * 
     * @type {ClusterVolumeSpecAccessModeCapacityRange}
     * @memberof ClusterVolumeSpecAccessMode
     */
    capacityRange?: ClusterVolumeSpecAccessModeCapacityRange;
    /**
     * The availability of the volume for use in tasks. - `active` The volume is fully available for scheduling on the cluster - `pause` No new workloads should use the volume, but existing workloads are not stopped. - `drain` All workloads using this volume should be stopped and rescheduled, and no new ones should be started. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessMode
     */
    availability?: ClusterVolumeSpecAccessMode.AvailabilityEnum;
}

/**
 * @export
 * @namespace ClusterVolumeSpecAccessMode
 */
export namespace ClusterVolumeSpecAccessMode {
    /**
     * @export
     * @enum {string}
     */
    export enum ScopeEnum {
        Single = <any> 'single',
        Multi = <any> 'multi',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum SharingEnum {
        None = <any> 'none',
        Readonly = <any> 'readonly',
        Onewriter = <any> 'onewriter',
        All = <any> 'all',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum AvailabilityEnum {
        Active = <any> 'active',
        Pause = <any> 'pause',
        Drain = <any> 'drain',
    }
}

/**
 * Requirements for the accessible topology of the volume. These fields are optional. For an in-depth description of what these fields mean, see the CSI specification. 
 * @export
 * @interface ClusterVolumeSpecAccessModeAccessibilityRequirements
 */
export interface ClusterVolumeSpecAccessModeAccessibilityRequirements {
    /**
     * A list of required topologies, at least one of which the volume must be accessible from. 
     * @type {Array<Topology>}
     * @memberof ClusterVolumeSpecAccessModeAccessibilityRequirements
     */
    requisite?: Array<Topology>;
    /**
     * A list of topologies that the volume should attempt to be provisioned in. 
     * @type {Array<Topology>}
     * @memberof ClusterVolumeSpecAccessModeAccessibilityRequirements
     */
    preferred?: Array<Topology>;
}

/**
 * The desired capacity that the volume should be created with. If empty, the plugin will decide the capacity. 
 * @export
 * @interface ClusterVolumeSpecAccessModeCapacityRange
 */
export interface ClusterVolumeSpecAccessModeCapacityRange {
    /**
     * The volume must be at least this big. The value of 0 indicates an unspecified minimum 
     * @type {number}
     * @memberof ClusterVolumeSpecAccessModeCapacityRange
     */
    requiredBytes?: number;
    /**
     * The volume must not be bigger than this. The value of 0 indicates an unspecified maximum. 
     * @type {number}
     * @memberof ClusterVolumeSpecAccessModeCapacityRange
     */
    limitBytes?: number;
}

/**
 * One cluster volume secret entry. Defines a key-value pair that is passed to the plugin. 
 * @export
 * @interface ClusterVolumeSpecAccessModeSecrets
 */
export interface ClusterVolumeSpecAccessModeSecrets {
    /**
     * Key is the name of the key of the key-value pair passed to the plugin. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessModeSecrets
     */
    key?: string;
    /**
     * Secret is the swarm Secret object from which to read data. This can be a Secret name or ID. The Secret data is retrieved by swarm and used as the value of the key-value pair passed to the plugin. 
     * @type {string}
     * @memberof ClusterVolumeSpecAccessModeSecrets
     */
    secret?: string;
}

/**
 * Commit holds the Git-commit (SHA1) that a binary was built from, as reported in the version-string of external tools, such as `containerd`, or `runC`. 
 * @export
 * @interface Commit
 */
export interface Commit {
    /**
     * Actual commit ID of external tool.
     * @type {string}
     * @memberof Commit
     */
    ID?: string;
    /**
     * Commit ID of external tool expected by dockerd as set at build time. 
     * @type {string}
     * @memberof Commit
     */
    expected?: string;
}

/**
 * 
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Config
     */
    version?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Config
     */
    updatedAt?: string;
    /**
     * 
     * @type {ConfigSpec}
     * @memberof Config
     */
    spec?: ConfigSpec;
}

/**
 * 
 * @export
 * @interface ConfigSpec
 */
export interface ConfigSpec {
    /**
     * User-defined name of the config.
     * @type {string}
     * @memberof ConfigSpec
     */
    name?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ConfigSpec
     */
    labels?: { [key: string]: string; };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) config data. 
     * @type {string}
     * @memberof ConfigSpec
     */
    data?: string;
    /**
     * 
     * @type {Driver}
     * @memberof ConfigSpec
     */
    templating?: Driver;
}

/**
 * 
 * @export
 * @interface ConfigsCreateBody
 */
export interface ConfigsCreateBody extends ConfigSpec {
}

/**
 * Configuration for a container that is portable between hosts.  When used as `ContainerConfig` field in an image, `ContainerConfig` is an optional field containing the configuration of the container that was last committed when creating the image.  Previous versions of Docker builder used this field to store build cache, and it is not in active use anymore. 
 * @export
 * @interface ContainerConfig
 */
export interface ContainerConfig {
    /**
     * The hostname to use for the container, as a valid RFC 1123 hostname. 
     * @type {string}
     * @memberof ContainerConfig
     */
    hostname?: string;
    /**
     * The domain name to use for the container. 
     * @type {string}
     * @memberof ContainerConfig
     */
    domainname?: string;
    /**
     * The user that commands are run as inside the container.
     * @type {string}
     * @memberof ContainerConfig
     */
    user?: string;
    /**
     * Whether to attach to `stdin`.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    attachStdin?: boolean;
    /**
     * Whether to attach to `stdout`.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    attachStdout?: boolean;
    /**
     * Whether to attach to `stderr`.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    attachStderr?: boolean;
    /**
     * An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}` 
     * @type {{ [key: string]: any; }}
     * @memberof ContainerConfig
     */
    exposedPorts?: { [key: string]: any; };
    /**
     * Attach standard streams to a TTY, including `stdin` if it is not closed. 
     * @type {boolean}
     * @memberof ContainerConfig
     */
    tty?: boolean;
    /**
     * Open `stdin`
     * @type {boolean}
     * @memberof ContainerConfig
     */
    openStdin?: boolean;
    /**
     * Close `stdin` after one attached client disconnects
     * @type {boolean}
     * @memberof ContainerConfig
     */
    stdinOnce?: boolean;
    /**
     * A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    env?: Array<string>;
    /**
     * Command to run specified as a string or an array of strings. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    cmd?: Array<string>;
    /**
     * 
     * @type {HealthConfig}
     * @memberof ContainerConfig
     */
    healthcheck?: HealthConfig;
    /**
     * Command is already escaped (Windows only)
     * @type {boolean}
     * @memberof ContainerConfig
     */
    argsEscaped?: boolean;
    /**
     * The name (or reference) of the image to use when creating the container, or which was used when the container was created. 
     * @type {string}
     * @memberof ContainerConfig
     */
    image?: string;
    /**
     * An object mapping mount point paths inside the container to empty objects. 
     * @type {{ [key: string]: any; }}
     * @memberof ContainerConfig
     */
    volumes?: { [key: string]: any; };
    /**
     * The working directory for commands to run in.
     * @type {string}
     * @memberof ContainerConfig
     */
    workingDir?: string;
    /**
     * The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`). 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    entrypoint?: Array<string>;
    /**
     * Disable networking for the container.
     * @type {boolean}
     * @memberof ContainerConfig
     */
    networkDisabled?: boolean;
    /**
     * MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead. 
     * @type {string}
     * @memberof ContainerConfig
     */
    macAddress?: string;
    /**
     * `ONBUILD` metadata that were defined in the image's `Dockerfile`. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    onBuild?: Array<string>;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerConfig
     */
    labels?: { [key: string]: string; };
    /**
     * Signal to stop a container as a string or unsigned integer. 
     * @type {string}
     * @memberof ContainerConfig
     */
    stopSignal?: string;
    /**
     * Timeout to stop a container in seconds.
     * @type {number}
     * @memberof ContainerConfig
     */
    stopTimeout?: number;
    /**
     * Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell. 
     * @type {Array<string>}
     * @memberof ContainerConfig
     */
    shell?: Array<string>;
}

/**
 * OK response to ContainerCreate operation
 * @export
 * @interface ContainerCreateResponse
 */
export interface ContainerCreateResponse {
    /**
     * The ID of the created container
     * @type {string}
     * @memberof ContainerCreateResponse
     */
    id: string;
    /**
     * Warnings encountered when creating the container
     * @type {Array<string>}
     * @memberof ContainerCreateResponse
     */
    warnings: Array<string>;
}

/**
 * 
 * @export
 * @interface ContainerInspectResponse
 */
export interface ContainerInspectResponse {
    /**
     * The ID of the container
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    id?: string;
    /**
     * The time the container was created
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    created?: string;
    /**
     * The path to the command being run
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    path?: string;
    /**
     * The arguments to the command being run
     * @type {Array<string>}
     * @memberof ContainerInspectResponse
     */
    args?: Array<string>;
    /**
     * 
     * @type {ContainerState}
     * @memberof ContainerInspectResponse
     */
    state?: ContainerState;
    /**
     * The container's image ID
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    resolvConfPath?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    hostnamePath?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    hostsPath?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    logPath?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    restartCount?: number;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    driver?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    platform?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    mountLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    processLabel?: string;
    /**
     * 
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    appArmorProfile?: string;
    /**
     * IDs of exec instances that are running in the container.
     * @type {Array<string>}
     * @memberof ContainerInspectResponse
     */
    execIDs?: Array<string>;
    /**
     * 
     * @type {HostConfig}
     * @memberof ContainerInspectResponse
     */
    hostConfig?: HostConfig;
    /**
     * 
     * @type {GraphDriverData}
     * @memberof ContainerInspectResponse
     */
    graphDriver?: GraphDriverData;
    /**
     * The size of files that have been created or changed by this container. 
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    sizeRw?: number;
    /**
     * The total size of all the files in this container.
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    sizeRootFs?: number;
    /**
     * 
     * @type {Array<MountPoint>}
     * @memberof ContainerInspectResponse
     */
    mounts?: Array<MountPoint>;
    /**
     * 
     * @type {ContainerConfig}
     * @memberof ContainerInspectResponse
     */
    config?: ContainerConfig;
    /**
     * 
     * @type {NetworkSettings}
     * @memberof ContainerInspectResponse
     */
    networkSettings?: NetworkSettings;
}

/**
 * 
 * @export
 * @interface ContainerPruneResponse
 */
export interface ContainerPruneResponse {
    /**
     * Container IDs that were deleted
     * @type {Array<string>}
     * @memberof ContainerPruneResponse
     */
    containersDeleted?: Array<string>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof ContainerPruneResponse
     */
    spaceReclaimed?: number;
}

/**
 * ContainerState stores container's running state. It's part of ContainerJSONBase and will be returned by the \"inspect\" command. 
 * @export
 * @interface ContainerState
 */
export interface ContainerState {
    /**
     * String representation of the container state. Can be one of \"created\", \"running\", \"paused\", \"restarting\", \"removing\", \"exited\", or \"dead\". 
     * @type {string}
     * @memberof ContainerState
     */
    status?: ContainerState.StatusEnum;
    /**
     * Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the freezer cgroup is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\". 
     * @type {boolean}
     * @memberof ContainerState
     */
    running?: boolean;
    /**
     * Whether this container is paused.
     * @type {boolean}
     * @memberof ContainerState
     */
    paused?: boolean;
    /**
     * Whether this container is restarting.
     * @type {boolean}
     * @memberof ContainerState
     */
    restarting?: boolean;
    /**
     * Whether a process within this container has been killed because it ran out of memory since the container was last started. 
     * @type {boolean}
     * @memberof ContainerState
     */
    oOMKilled?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ContainerState
     */
    dead?: boolean;
    /**
     * The process ID of this container
     * @type {number}
     * @memberof ContainerState
     */
    pid?: number;
    /**
     * The last exit code of this container
     * @type {number}
     * @memberof ContainerState
     */
    exitCode?: number;
    /**
     * 
     * @type {string}
     * @memberof ContainerState
     */
    error?: string;
    /**
     * The time when this container was last started.
     * @type {string}
     * @memberof ContainerState
     */
    startedAt?: string;
    /**
     * The time when this container last exited.
     * @type {string}
     * @memberof ContainerState
     */
    finishedAt?: string;
    /**
     * 
     * @type {Health}
     * @memberof ContainerState
     */
    health?: Health;
}

/**
 * @export
 * @namespace ContainerState
 */
export namespace ContainerState {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Created = <any> 'created',
        Running = <any> 'running',
        Paused = <any> 'paused',
        Restarting = <any> 'restarting',
        Removing = <any> 'removing',
        Exited = <any> 'exited',
        Dead = <any> 'dead',
    }
}

/**
 * 
 * @export
 * @interface ContainerSummary
 */
export interface ContainerSummary {
    /**
     * The ID of this container
     * @type {string}
     * @memberof ContainerSummary
     */
    id?: string;
    /**
     * The names that this container has been given
     * @type {Array<string>}
     * @memberof ContainerSummary
     */
    names?: Array<string>;
    /**
     * The name of the image used when creating this container
     * @type {string}
     * @memberof ContainerSummary
     */
    image?: string;
    /**
     * The ID of the image that this container was created from
     * @type {string}
     * @memberof ContainerSummary
     */
    imageID?: string;
    /**
     * Command to run when starting the container
     * @type {string}
     * @memberof ContainerSummary
     */
    command?: string;
    /**
     * When the container was created
     * @type {number}
     * @memberof ContainerSummary
     */
    created?: number;
    /**
     * The ports exposed by this container
     * @type {Array<Port>}
     * @memberof ContainerSummary
     */
    ports?: Array<Port>;
    /**
     * The size of files that have been created or changed by this container
     * @type {number}
     * @memberof ContainerSummary
     */
    sizeRw?: number;
    /**
     * The total size of all the files in this container
     * @type {number}
     * @memberof ContainerSummary
     */
    sizeRootFs?: number;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ContainerSummary
     */
    labels?: { [key: string]: string; };
    /**
     * The state of this container (e.g. `Exited`)
     * @type {string}
     * @memberof ContainerSummary
     */
    state?: string;
    /**
     * Additional human-readable status of this container (e.g. `Exit 0`)
     * @type {string}
     * @memberof ContainerSummary
     */
    status?: string;
    /**
     * 
     * @type {ContainerSummaryHostConfig}
     * @memberof ContainerSummary
     */
    hostConfig?: ContainerSummaryHostConfig;
    /**
     * 
     * @type {ContainerSummaryNetworkSettings}
     * @memberof ContainerSummary
     */
    networkSettings?: ContainerSummaryNetworkSettings;
    /**
     * 
     * @type {Array<MountPoint>}
     * @memberof ContainerSummary
     */
    mounts?: Array<MountPoint>;
}

/**
 * 
 * @export
 * @interface ContainerSummaryHostConfig
 */
export interface ContainerSummaryHostConfig {
    /**
     * 
     * @type {string}
     * @memberof ContainerSummaryHostConfig
     */
    networkMode?: string;
}

/**
 * A summary of the container's network settings
 * @export
 * @interface ContainerSummaryNetworkSettings
 */
export interface ContainerSummaryNetworkSettings {
    /**
     * 
     * @type {{ [key: string]: EndpointSettings; }}
     * @memberof ContainerSummaryNetworkSettings
     */
    networks?: { [key: string]: EndpointSettings; };
}

/**
 * OK response to ContainerTop operation
 * @export
 * @interface ContainerTopResponse
 */
export interface ContainerTopResponse {
    /**
     * The ps column titles
     * @type {Array<string>}
     * @memberof ContainerTopResponse
     */
    titles?: Array<string>;
    /**
     * Each process running in the container, where each is process is an array of values corresponding to the titles. 
     * @type {Array<Array<string>>}
     * @memberof ContainerTopResponse
     */
    processes?: Array<Array<string>>;
}

/**
 * OK response to ContainerUpdate operation
 * @export
 * @interface ContainerUpdateResponse
 */
export interface ContainerUpdateResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof ContainerUpdateResponse
     */
    warnings?: Array<string>;
}

/**
 * container waiting error, if any
 * @export
 * @interface ContainerWaitExitError
 */
export interface ContainerWaitExitError {
    /**
     * Details of an error
     * @type {string}
     * @memberof ContainerWaitExitError
     */
    message?: string;
}

/**
 * OK response to ContainerWait operation
 * @export
 * @interface ContainerWaitResponse
 */
export interface ContainerWaitResponse {
    /**
     * Exit code of the container
     * @type {number}
     * @memberof ContainerWaitResponse
     */
    statusCode: number;
    /**
     * 
     * @type {ContainerWaitExitError}
     * @memberof ContainerWaitResponse
     */
    error?: ContainerWaitExitError;
}

/**
 * 
 * @export
 * @interface ContainersCreateBody
 */
export interface ContainersCreateBody extends ContainerConfig {
    /**
     * 
     * @type {HostConfig}
     * @memberof ContainersCreateBody
     */
    hostConfig?: HostConfig;
    /**
     * 
     * @type {NetworkingConfig}
     * @memberof ContainersCreateBody
     */
    networkingConfig?: NetworkingConfig;
}

/**
 * 
 * @export
 * @interface ContainersCreateBody1
 */
export interface ContainersCreateBody1 extends ContainerConfig {
    /**
     * 
     * @type {HostConfig}
     * @memberof ContainersCreateBody1
     */
    hostConfig?: HostConfig;
    /**
     * 
     * @type {NetworkingConfig}
     * @memberof ContainersCreateBody1
     */
    networkingConfig?: NetworkingConfig;
}

/**
 * 
 * @export
 * @interface CreateImageInfo
 */
export interface CreateImageInfo {
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    error?: string;
    /**
     * 
     * @type {ErrorDetail}
     * @memberof CreateImageInfo
     */
    errorDetail?: ErrorDetail;
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateImageInfo
     */
    progress?: string;
    /**
     * 
     * @type {ProgressDetail}
     * @memberof CreateImageInfo
     */
    progressDetail?: ProgressDetail;
}

/**
 * A device mapping between the host and container
 * @export
 * @interface DeviceMapping
 */
export interface DeviceMapping {
    /**
     * 
     * @type {string}
     * @memberof DeviceMapping
     */
    pathOnHost?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceMapping
     */
    pathInContainer?: string;
    /**
     * 
     * @type {string}
     * @memberof DeviceMapping
     */
    cgroupPermissions?: string;
}

/**
 * A request for devices to be sent to device drivers
 * @export
 * @interface DeviceRequest
 */
export interface DeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof DeviceRequest
     */
    driver?: string;
    /**
     * 
     * @type {number}
     * @memberof DeviceRequest
     */
    count?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof DeviceRequest
     */
    deviceIDs?: Array<string>;
    /**
     * A list of capabilities; an OR list of AND lists of capabilities. 
     * @type {Array<Array<string>>}
     * @memberof DeviceRequest
     */
    capabilities?: Array<Array<string>>;
    /**
     * Driver-specific options, specified as a key/value pairs. These options are passed directly to the driver. 
     * @type {{ [key: string]: string; }}
     * @memberof DeviceRequest
     */
    options?: { [key: string]: string; };
}

/**
 * Describes the result obtained from contacting the registry to retrieve image metadata. 
 * @export
 * @interface DistributionInspect
 */
export interface DistributionInspect {
    /**
     * 
     * @type {OCIDescriptor}
     * @memberof DistributionInspect
     */
    descriptor: OCIDescriptor;
    /**
     * An array containing all platforms supported by the image. 
     * @type {Array<OCIPlatform>}
     * @memberof DistributionInspect
     */
    platforms: Array<OCIPlatform>;
}

/**
 * Driver represents a driver (network, logging, secrets).
 * @export
 * @interface Driver
 */
export interface Driver {
    /**
     * Name of the driver.
     * @type {string}
     * @memberof Driver
     */
    name: string;
    /**
     * Key/value map of driver-specific options.
     * @type {{ [key: string]: string; }}
     * @memberof Driver
     */
    options?: { [key: string]: string; };
}

/**
 * EndpointIPAMConfig represents an endpoint's IPAM configuration. 
 * @export
 * @interface EndpointIPAMConfig
 */
export interface EndpointIPAMConfig {
    /**
     * 
     * @type {string}
     * @memberof EndpointIPAMConfig
     */
    iPv4Address?: string;
    /**
     * 
     * @type {string}
     * @memberof EndpointIPAMConfig
     */
    iPv6Address?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndpointIPAMConfig
     */
    linkLocalIPs?: Array<string>;
}

/**
 * 
 * @export
 * @interface EndpointPortConfig
 */
export interface EndpointPortConfig {
    /**
     * 
     * @type {string}
     * @memberof EndpointPortConfig
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof EndpointPortConfig
     */
    protocol?: EndpointPortConfig.ProtocolEnum;
    /**
     * The port inside the container.
     * @type {number}
     * @memberof EndpointPortConfig
     */
    targetPort?: number;
    /**
     * The port on the swarm hosts.
     * @type {number}
     * @memberof EndpointPortConfig
     */
    publishedPort?: number;
    /**
     * The mode in which port is published.  <p><br /></p>  - \"ingress\" makes the target port accessible on every node,   regardless of whether there is a task for the service running on   that node or not. - \"host\" bypasses the routing mesh and publish the port directly on   the swarm node where that service is running. 
     * @type {string}
     * @memberof EndpointPortConfig
     */
    publishMode?: EndpointPortConfig.PublishModeEnum;
}

/**
 * @export
 * @namespace EndpointPortConfig
 */
export namespace EndpointPortConfig {
    /**
     * @export
     * @enum {string}
     */
    export enum ProtocolEnum {
        Tcp = <any> 'tcp',
        Udp = <any> 'udp',
        Sctp = <any> 'sctp',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum PublishModeEnum {
        Ingress = <any> 'ingress',
        Host = <any> 'host',
    }
}

/**
 * Configuration for a network endpoint.
 * @export
 * @interface EndpointSettings
 */
export interface EndpointSettings {
    /**
     * 
     * @type {EndpointIPAMConfig}
     * @memberof EndpointSettings
     */
    iPAMConfig?: EndpointIPAMConfig;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndpointSettings
     */
    links?: Array<string>;
    /**
     * MAC address for the endpoint on this network. The network driver might ignore this parameter. 
     * @type {string}
     * @memberof EndpointSettings
     */
    macAddress?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EndpointSettings
     */
    aliases?: Array<string>;
    /**
     * Unique ID of the network. 
     * @type {string}
     * @memberof EndpointSettings
     */
    networkID?: string;
    /**
     * Unique ID for the service endpoint in a Sandbox. 
     * @type {string}
     * @memberof EndpointSettings
     */
    endpointID?: string;
    /**
     * Gateway address for this network. 
     * @type {string}
     * @memberof EndpointSettings
     */
    gateway?: string;
    /**
     * IPv4 address. 
     * @type {string}
     * @memberof EndpointSettings
     */
    iPAddress?: string;
    /**
     * Mask length of the IPv4 address. 
     * @type {number}
     * @memberof EndpointSettings
     */
    iPPrefixLen?: number;
    /**
     * IPv6 gateway address. 
     * @type {string}
     * @memberof EndpointSettings
     */
    iPv6Gateway?: string;
    /**
     * Global IPv6 address. 
     * @type {string}
     * @memberof EndpointSettings
     */
    globalIPv6Address?: string;
    /**
     * Mask length of the global IPv6 address. 
     * @type {number}
     * @memberof EndpointSettings
     */
    globalIPv6PrefixLen?: number;
    /**
     * DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific. 
     * @type {{ [key: string]: string; }}
     * @memberof EndpointSettings
     */
    driverOpts?: { [key: string]: string; };
}

/**
 * Properties that can be configured to access and load balance a service.
 * @export
 * @interface EndpointSpec
 */
export interface EndpointSpec {
    /**
     * The mode of resolution to use for internal load balancing between tasks. 
     * @type {string}
     * @memberof EndpointSpec
     */
    mode?: EndpointSpec.ModeEnum;
    /**
     * List of exposed ports that this service is accessible on from the outside. Ports can only be provided if `vip` resolution mode is used. 
     * @type {Array<EndpointPortConfig>}
     * @memberof EndpointSpec
     */
    ports?: Array<EndpointPortConfig>;
}

/**
 * @export
 * @namespace EndpointSpec
 */
export namespace EndpointSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum ModeEnum {
        Vip = <any> 'vip',
        Dnsrr = <any> 'dnsrr',
    }
}

/**
 * EngineDescription provides information about an engine.
 * @export
 * @interface EngineDescription
 */
export interface EngineDescription {
    /**
     * 
     * @type {string}
     * @memberof EngineDescription
     */
    engineVersion?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof EngineDescription
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {Array<EngineDescriptionPlugins>}
     * @memberof EngineDescription
     */
    plugins?: Array<EngineDescriptionPlugins>;
}

/**
 * 
 * @export
 * @interface EngineDescriptionPlugins
 */
export interface EngineDescriptionPlugins {
    /**
     * 
     * @type {string}
     * @memberof EngineDescriptionPlugins
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof EngineDescriptionPlugins
     */
    name?: string;
}

/**
 * 
 * @export
 * @interface ErrorDetail
 */
export interface ErrorDetail {
    /**
     * 
     * @type {number}
     * @memberof ErrorDetail
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDetail
     */
    message?: string;
}

/**
 * Represents an error.
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * The error message.
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
}

/**
 * Actor describes something that generates events, like a container, network, or a volume. 
 * @export
 * @interface EventActor
 */
export interface EventActor {
    /**
     * The ID of the object emitting the event
     * @type {string}
     * @memberof EventActor
     */
    ID?: string;
    /**
     * Various key/value attributes of the object, depending on its type. 
     * @type {{ [key: string]: string; }}
     * @memberof EventActor
     */
    attributes?: { [key: string]: string; };
}

/**
 * EventMessage represents the information an event contains. 
 * @export
 * @interface EventMessage
 */
export interface EventMessage {
    /**
     * The type of object emitting the event
     * @type {string}
     * @memberof EventMessage
     */
    type?: EventMessage.TypeEnum;
    /**
     * The type of event
     * @type {string}
     * @memberof EventMessage
     */
    action?: string;
    /**
     * 
     * @type {EventActor}
     * @memberof EventMessage
     */
    actor?: EventActor;
    /**
     * Scope of the event. Engine events are `local` scope. Cluster (Swarm) events are `swarm` scope. 
     * @type {string}
     * @memberof EventMessage
     */
    scope?: EventMessage.ScopeEnum;
    /**
     * Timestamp of event
     * @type {number}
     * @memberof EventMessage
     */
    time?: number;
    /**
     * Timestamp of event, with nanosecond accuracy
     * @type {number}
     * @memberof EventMessage
     */
    timeNano?: number;
}

/**
 * @export
 * @namespace EventMessage
 */
export namespace EventMessage {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Builder = <any> 'builder',
        Config = <any> 'config',
        Container = <any> 'container',
        Daemon = <any> 'daemon',
        Image = <any> 'image',
        Network = <any> 'network',
        Node = <any> 'node',
        Plugin = <any> 'plugin',
        Secret = <any> 'secret',
        Service = <any> 'service',
        Volume = <any> 'volume',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum ScopeEnum {
        Local = <any> 'local',
        Swarm = <any> 'swarm',
    }
}

/**
 * 
 * @export
 * @interface ExecConfig
 */
export interface ExecConfig {
    /**
     * Attach to `stdin` of the exec command.
     * @type {boolean}
     * @memberof ExecConfig
     */
    attachStdin?: boolean;
    /**
     * Attach to `stdout` of the exec command.
     * @type {boolean}
     * @memberof ExecConfig
     */
    attachStdout?: boolean;
    /**
     * Attach to `stderr` of the exec command.
     * @type {boolean}
     * @memberof ExecConfig
     */
    attachStderr?: boolean;
    /**
     * Initial console size, as an `[height, width]` array.
     * @type {Array<number>}
     * @memberof ExecConfig
     */
    consoleSize?: Array<number>;
    /**
     * Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`. 
     * @type {string}
     * @memberof ExecConfig
     */
    detachKeys?: string;
    /**
     * Allocate a pseudo-TTY.
     * @type {boolean}
     * @memberof ExecConfig
     */
    tty?: boolean;
    /**
     * A list of environment variables in the form `[\"VAR=value\", ...]`. 
     * @type {Array<string>}
     * @memberof ExecConfig
     */
    env?: Array<string>;
    /**
     * Command to run, as a string or array of strings.
     * @type {Array<string>}
     * @memberof ExecConfig
     */
    cmd?: Array<string>;
    /**
     * Runs the exec process with extended privileges.
     * @type {boolean}
     * @memberof ExecConfig
     */
    privileged?: boolean;
    /**
     * The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`. 
     * @type {string}
     * @memberof ExecConfig
     */
    user?: string;
    /**
     * The working directory for the exec process inside the container. 
     * @type {string}
     * @memberof ExecConfig
     */
    workingDir?: string;
}

/**
 * 
 * @export
 * @interface ExecInspectResponse
 */
export interface ExecInspectResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    canRemove?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExecInspectResponse
     */
    detachKeys?: string;
    /**
     * 
     * @type {string}
     * @memberof ExecInspectResponse
     */
    ID?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    running?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ExecInspectResponse
     */
    exitCode?: number;
    /**
     * 
     * @type {ProcessConfig}
     * @memberof ExecInspectResponse
     */
    processConfig?: ProcessConfig;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    openStdin?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    openStderr?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ExecInspectResponse
     */
    openStdout?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ExecInspectResponse
     */
    containerID?: string;
    /**
     * The system process ID for the exec process.
     * @type {number}
     * @memberof ExecInspectResponse
     */
    pid?: number;
}

/**
 * 
 * @export
 * @interface ExecStartConfig
 */
export interface ExecStartConfig {
    /**
     * Detach from the command.
     * @type {boolean}
     * @memberof ExecStartConfig
     */
    detach?: boolean;
    /**
     * Allocate a pseudo-TTY.
     * @type {boolean}
     * @memberof ExecStartConfig
     */
    tty?: boolean;
    /**
     * Initial console size, as an `[height, width]` array.
     * @type {Array<number>}
     * @memberof ExecStartConfig
     */
    consoleSize?: Array<number>;
}

/**
 * Change in the container's filesystem. 
 * @export
 * @interface FilesystemChange
 */
export interface FilesystemChange {
    /**
     * Path to file or directory that has changed. 
     * @type {string}
     * @memberof FilesystemChange
     */
    path: string;
    /**
     * 
     * @type {ChangeType}
     * @memberof FilesystemChange
     */
    kind: ChangeType;
}

/**
 * User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`). 
 * @export
 * @interface GenericResources
 */
export interface GenericResources extends Array<GenericResourcesInner> {
}

/**
 * 
 * @export
 * @interface GenericResourcesInner
 */
export interface GenericResourcesInner {
    /**
     * 
     * @type {any}
     * @memberof GenericResourcesInner
     */
    namedResourceSpec?: any;
    /**
     * 
     * @type {any}
     * @memberof GenericResourcesInner
     */
    discreteResourceSpec?: any;
}

/**
 * Information about the storage driver used to store the container's and image's filesystem. 
 * @export
 * @interface GraphDriverData
 */
export interface GraphDriverData {
    /**
     * Name of the storage driver.
     * @type {string}
     * @memberof GraphDriverData
     */
    name: string;
    /**
     * Low-level storage metadata, provided as key/value pairs.  This information is driver-specific, and depends on the storage-driver in use, and should be used for informational purposes only. 
     * @type {{ [key: string]: string; }}
     * @memberof GraphDriverData
     */
    data: { [key: string]: string; };
}

/**
 * Health stores information about the container's healthcheck results. 
 * @export
 * @interface Health
 */
export interface Health {
    /**
     * Status is one of `none`, `starting`, `healthy` or `unhealthy`  - \"none\"      Indicates there is no healthcheck - \"starting\"  Starting indicates that the container is not yet ready - \"healthy\"   Healthy indicates that the container is running correctly - \"unhealthy\" Unhealthy indicates that the container has a problem 
     * @type {string}
     * @memberof Health
     */
    status?: Health.StatusEnum;
    /**
     * FailingStreak is the number of consecutive failures
     * @type {number}
     * @memberof Health
     */
    failingStreak?: number;
    /**
     * Log contains the last few results (oldest first) 
     * @type {Array<HealthcheckResult>}
     * @memberof Health
     */
    log?: Array<HealthcheckResult>;
}

/**
 * @export
 * @namespace Health
 */
export namespace Health {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        None = <any> 'none',
        Starting = <any> 'starting',
        Healthy = <any> 'healthy',
        Unhealthy = <any> 'unhealthy',
    }
}

/**
 * A test to perform to check that the container is healthy.
 * @export
 * @interface HealthConfig
 */
export interface HealthConfig {
    /**
     * The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system's default shell 
     * @type {Array<string>}
     * @memberof HealthConfig
     */
    test?: Array<string>;
    /**
     * The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    interval?: number;
    /**
     * The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    timeout?: number;
    /**
     * The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    retries?: number;
    /**
     * Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    startPeriod?: number;
    /**
     * The time to wait between checks in nanoseconds during the start period. It should be 0 or at least 1000000 (1 ms). 0 means inherit. 
     * @type {number}
     * @memberof HealthConfig
     */
    startInterval?: number;
}

/**
 * HealthcheckResult stores information about a single run of a healthcheck probe 
 * @export
 * @interface HealthcheckResult
 */
export interface HealthcheckResult {
    /**
     * Date and time at which this check started in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {Date}
     * @memberof HealthcheckResult
     */
    start?: Date;
    /**
     * Date and time at which this check ended in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof HealthcheckResult
     */
    end?: string;
    /**
     * ExitCode meanings:  - `0` healthy - `1` unhealthy - `2` reserved (considered unhealthy) - other values: error running probe 
     * @type {number}
     * @memberof HealthcheckResult
     */
    exitCode?: number;
    /**
     * Output from last check
     * @type {string}
     * @memberof HealthcheckResult
     */
    output?: string;
}

/**
 * individual image layer information in response to ImageHistory operation
 * @export
 * @interface HistoryResponseItem
 */
export interface HistoryResponseItem {
    /**
     * 
     * @type {string}
     * @memberof HistoryResponseItem
     */
    id: string;
    /**
     * 
     * @type {number}
     * @memberof HistoryResponseItem
     */
    created: number;
    /**
     * 
     * @type {string}
     * @memberof HistoryResponseItem
     */
    createdBy: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof HistoryResponseItem
     */
    tags: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof HistoryResponseItem
     */
    size: number;
    /**
     * 
     * @type {string}
     * @memberof HistoryResponseItem
     */
    comment: string;
}

/**
 * Container configuration that depends on the host we are running on
 * @export
 * @interface HostConfig
 */
export interface HostConfig extends Resources {
    /**
     * A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    binds?: Array<string>;
    /**
     * Path to a file where the container ID is written
     * @type {string}
     * @memberof HostConfig
     */
    containerIDFile?: string;
    /**
     * 
     * @type {HostConfigLogConfig}
     * @memberof HostConfig
     */
    logConfig?: HostConfigLogConfig;
    /**
     * Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to. 
     * @type {string}
     * @memberof HostConfig
     */
    networkMode?: string;
    /**
     * 
     * @type {PortMap}
     * @memberof HostConfig
     */
    portBindings?: PortMap;
    /**
     * 
     * @type {RestartPolicy}
     * @memberof HostConfig
     */
    restartPolicy?: RestartPolicy;
    /**
     * Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set. 
     * @type {boolean}
     * @memberof HostConfig
     */
    autoRemove?: boolean;
    /**
     * Driver that this container uses to mount volumes.
     * @type {string}
     * @memberof HostConfig
     */
    volumeDriver?: string;
    /**
     * A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    volumesFrom?: Array<string>;
    /**
     * Specification for mounts to be added to the container. 
     * @type {Array<Mount>}
     * @memberof HostConfig
     */
    mounts?: Array<Mount>;
    /**
     * Initial console size, as an `[height, width]` array. 
     * @type {Array<number>}
     * @memberof HostConfig
     */
    consoleSize?: Array<number>;
    /**
     * Arbitrary non-identifying metadata attached to container and provided to the runtime when the container is started. 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    annotations?: { [key: string]: string; };
    /**
     * A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    capAdd?: Array<string>;
    /**
     * A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    capDrop?: Array<string>;
    /**
     * cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration. 
     * @type {string}
     * @memberof HostConfig
     */
    cgroupnsMode?: HostConfig.CgroupnsModeEnum;
    /**
     * A list of DNS servers for the container to use.
     * @type {Array<string>}
     * @memberof HostConfig
     */
    dns?: Array<string>;
    /**
     * A list of DNS options.
     * @type {Array<string>}
     * @memberof HostConfig
     */
    dnsOptions?: Array<string>;
    /**
     * A list of DNS search domains.
     * @type {Array<string>}
     * @memberof HostConfig
     */
    dnsSearch?: Array<string>;
    /**
     * A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    extraHosts?: Array<string>;
    /**
     * A list of additional groups that the container process will run as. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    groupAdd?: Array<string>;
    /**
     * IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration. 
     * @type {string}
     * @memberof HostConfig
     */
    ipcMode?: string;
    /**
     * Cgroup to use for the container.
     * @type {string}
     * @memberof HostConfig
     */
    cgroup?: string;
    /**
     * A list of links for the container in the form `container_name:alias`. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    links?: Array<string>;
    /**
     * An integer value containing the score given to the container in order to tune OOM killer preferences. 
     * @type {number}
     * @memberof HostConfig
     */
    oomScoreAdj?: number;
    /**
     * Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container 
     * @type {string}
     * @memberof HostConfig
     */
    pidMode?: string;
    /**
     * Gives the container full access to the host.
     * @type {boolean}
     * @memberof HostConfig
     */
    privileged?: boolean;
    /**
     * Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`. 
     * @type {boolean}
     * @memberof HostConfig
     */
    publishAllPorts?: boolean;
    /**
     * Mount the container's root filesystem as read only.
     * @type {boolean}
     * @memberof HostConfig
     */
    readonlyRootfs?: boolean;
    /**
     * A list of string values to customize labels for MLS systems, such as SELinux. 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    securityOpt?: Array<string>;
    /**
     * Storage driver options for this container, in the form `{\"size\": \"120G\"}`. 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    storageOpt?: { [key: string]: string; };
    /**
     * A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ``` 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    tmpfs?: { [key: string]: string; };
    /**
     * UTS namespace to use for the container.
     * @type {string}
     * @memberof HostConfig
     */
    uTSMode?: string;
    /**
     * Sets the usernamespace mode for the container when usernamespace remapping option is enabled. 
     * @type {string}
     * @memberof HostConfig
     */
    usernsMode?: string;
    /**
     * Size of `/dev/shm` in bytes. If omitted, the system uses 64MB. 
     * @type {number}
     * @memberof HostConfig
     */
    shmSize?: number;
    /**
     * A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ``` 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfig
     */
    sysctls?: { [key: string]: string; };
    /**
     * Runtime to use with this container.
     * @type {string}
     * @memberof HostConfig
     */
    runtime?: string;
    /**
     * Isolation technology of the container. (Windows only) 
     * @type {string}
     * @memberof HostConfig
     */
    isolation?: HostConfig.IsolationEnum;
    /**
     * The list of paths to be masked inside the container (this overrides the default set of paths). 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    maskedPaths?: Array<string>;
    /**
     * The list of paths to be set as read-only inside the container (this overrides the default set of paths). 
     * @type {Array<string>}
     * @memberof HostConfig
     */
    readonlyPaths?: Array<string>;
}

/**
 * @export
 * @namespace HostConfig
 */
export namespace HostConfig {
    /**
     * @export
     * @enum {string}
     */
    export enum CgroupnsModeEnum {
        Private = <any> 'private',
        Host = <any> 'host',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum IsolationEnum {
        Default = <any> 'default',
        Process = <any> 'process',
        Hyperv = <any> 'hyperv',
    }
}

/**
 * The logging configuration for this container
 * @export
 * @interface HostConfigLogConfig
 */
export interface HostConfigLogConfig {
    /**
     * 
     * @type {string}
     * @memberof HostConfigLogConfig
     */
    type?: HostConfigLogConfig.TypeEnum;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof HostConfigLogConfig
     */
    config?: { [key: string]: string; };
}

/**
 * @export
 * @namespace HostConfigLogConfig
 */
export namespace HostConfigLogConfig {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        JsonFile = <any> 'json-file',
        Syslog = <any> 'syslog',
        Journald = <any> 'journald',
        Gelf = <any> 'gelf',
        Fluentd = <any> 'fluentd',
        Awslogs = <any> 'awslogs',
        Splunk = <any> 'splunk',
        Etwlogs = <any> 'etwlogs',
        None = <any> 'none',
    }
}

/**
 * 
 * @export
 * @interface IPAM
 */
export interface IPAM {
    /**
     * Name of the IPAM driver to use.
     * @type {string}
     * @memberof IPAM
     */
    driver?: string;
    /**
     * List of IPAM configuration options, specified as a map:  ``` {\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>} ``` 
     * @type {Array<IPAMConfig>}
     * @memberof IPAM
     */
    config?: Array<IPAMConfig>;
    /**
     * Driver-specific options, specified as a map.
     * @type {{ [key: string]: string; }}
     * @memberof IPAM
     */
    options?: { [key: string]: string; };
}

/**
 * 
 * @export
 * @interface IPAMConfig
 */
export interface IPAMConfig {
    /**
     * 
     * @type {string}
     * @memberof IPAMConfig
     */
    subnet?: string;
    /**
     * 
     * @type {string}
     * @memberof IPAMConfig
     */
    iPRange?: string;
    /**
     * 
     * @type {string}
     * @memberof IPAMConfig
     */
    gateway?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof IPAMConfig
     */
    auxiliaryAddresses?: { [key: string]: string; };
}

/**
 * Response to an API call that returns just an Id
 * @export
 * @interface IdResponse
 */
export interface IdResponse {
    /**
     * The id of the newly created object.
     * @type {string}
     * @memberof IdResponse
     */
    id: string;
}

/**
 * 
 * @export
 * @interface IdUpdateBody
 */
export interface IdUpdateBody extends Resources {
    /**
     * 
     * @type {RestartPolicy}
     * @memberof IdUpdateBody
     */
    restartPolicy?: RestartPolicy;
}

/**
 * 
 * @export
 * @interface IdUpdateBody1
 */
export interface IdUpdateBody1 extends ServiceSpec {
}

/**
 * 
 * @export
 * @interface ImageDeleteResponseItem
 */
export interface ImageDeleteResponseItem {
    /**
     * The image ID of an image that was untagged
     * @type {string}
     * @memberof ImageDeleteResponseItem
     */
    untagged?: string;
    /**
     * The image ID of an image that was deleted
     * @type {string}
     * @memberof ImageDeleteResponseItem
     */
    deleted?: string;
}

/**
 * Image ID or Digest
 * @export
 * @interface ImageID
 */
export interface ImageID {
    /**
     * 
     * @type {string}
     * @memberof ImageID
     */
    ID?: string;
}

/**
 * Information about an image in the local image cache. 
 * @export
 * @interface ImageInspect
 */
export interface ImageInspect {
    /**
     * ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image. 
     * @type {string}
     * @memberof ImageInspect
     */
    id?: string;
    /**
     * List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID. 
     * @type {Array<string>}
     * @memberof ImageInspect
     */
    repoTags?: Array<string>;
    /**
     * List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. 
     * @type {Array<string>}
     * @memberof ImageInspect
     */
    repoDigests?: Array<string>;
    /**
     * ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. 
     * @type {string}
     * @memberof ImageInspect
     */
    parent?: string;
    /**
     * Optional message that was set when committing or importing the image. 
     * @type {string}
     * @memberof ImageInspect
     */
    comment?: string;
    /**
     * Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof ImageInspect
     */
    created?: string;
    /**
     * The ID of the container that was used to create the image.  Depending on how the image was created, this field may be empty. 
     * @type {string}
     * @memberof ImageInspect
     */
    container?: string;
    /**
     * 
     * @type {ContainerConfig}
     * @memberof ImageInspect
     */
    containerConfig?: ContainerConfig;
    /**
     * The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty. 
     * @type {string}
     * @memberof ImageInspect
     */
    dockerVersion?: string;
    /**
     * Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile. 
     * @type {string}
     * @memberof ImageInspect
     */
    author?: string;
    /**
     * 
     * @type {ContainerConfig}
     * @memberof ImageInspect
     */
    config?: ContainerConfig;
    /**
     * Hardware CPU architecture that the image runs on. 
     * @type {string}
     * @memberof ImageInspect
     */
    architecture?: string;
    /**
     * CPU architecture variant (presently ARM-only). 
     * @type {string}
     * @memberof ImageInspect
     */
    variant?: string;
    /**
     * Operating System the image is built to run on. 
     * @type {string}
     * @memberof ImageInspect
     */
    os?: string;
    /**
     * Operating System version the image is built to run on (especially for Windows). 
     * @type {string}
     * @memberof ImageInspect
     */
    osVersion?: string;
    /**
     * Total size of the image including all layers it is composed of. 
     * @type {number}
     * @memberof ImageInspect
     */
    size?: number;
    /**
     * Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead. 
     * @type {number}
     * @memberof ImageInspect
     */
    virtualSize?: number;
    /**
     * 
     * @type {GraphDriverData}
     * @memberof ImageInspect
     */
    graphDriver?: GraphDriverData;
    /**
     * 
     * @type {ImageInspectRootFS}
     * @memberof ImageInspect
     */
    rootFS?: ImageInspectRootFS;
    /**
     * 
     * @type {ImageInspectMetadata}
     * @memberof ImageInspect
     */
    metadata?: ImageInspectMetadata;
}

/**
 * Additional metadata of the image in the local cache. This information is local to the daemon, and not part of the image itself. 
 * @export
 * @interface ImageInspectMetadata
 */
export interface ImageInspectMetadata {
    /**
     * Date and time at which the image was last tagged in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  This information is only available if the image was tagged locally, and omitted otherwise. 
     * @type {string}
     * @memberof ImageInspectMetadata
     */
    lastTagTime?: string;
}

/**
 * Information about the image's RootFS, including the layer IDs. 
 * @export
 * @interface ImageInspectRootFS
 */
export interface ImageInspectRootFS {
    /**
     * 
     * @type {string}
     * @memberof ImageInspectRootFS
     */
    type: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImageInspectRootFS
     */
    layers?: Array<string>;
}

/**
 * 
 * @export
 * @interface ImagePruneResponse
 */
export interface ImagePruneResponse {
    /**
     * Images that were deleted
     * @type {Array<ImageDeleteResponseItem>}
     * @memberof ImagePruneResponse
     */
    imagesDeleted?: Array<ImageDeleteResponseItem>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof ImagePruneResponse
     */
    spaceReclaimed?: number;
}

/**
 * 
 * @export
 * @interface ImageSearchResponseItem
 */
export interface ImageSearchResponseItem {
    /**
     * 
     * @type {string}
     * @memberof ImageSearchResponseItem
     */
    description?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ImageSearchResponseItem
     */
    isOfficial?: boolean;
    /**
     * Whether this repository has automated builds enabled.  <p><br /></p>  > **Deprecated**: This field is deprecated and will always > be \"false\" in future. 
     * @type {boolean}
     * @memberof ImageSearchResponseItem
     */
    isAutomated?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ImageSearchResponseItem
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof ImageSearchResponseItem
     */
    starCount?: number;
}

/**
 * 
 * @export
 * @interface ImageSummary
 */
export interface ImageSummary {
    /**
     * ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image. 
     * @type {string}
     * @memberof ImageSummary
     */
    id: string;
    /**
     * ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry. 
     * @type {string}
     * @memberof ImageSummary
     */
    parentId: string;
    /**
     * List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID. 
     * @type {Array<string>}
     * @memberof ImageSummary
     */
    repoTags: Array<string>;
    /**
     * List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated. 
     * @type {Array<string>}
     * @memberof ImageSummary
     */
    repoDigests: Array<string>;
    /**
     * Date and time at which the image was created as a Unix timestamp (number of seconds sinds EPOCH). 
     * @type {number}
     * @memberof ImageSummary
     */
    created: number;
    /**
     * Total size of the image including all layers it is composed of. 
     * @type {number}
     * @memberof ImageSummary
     */
    size: number;
    /**
     * Total size of image layers that are shared between this image and other images.  This size is not calculated by default. `-1` indicates that the value has not been set / calculated. 
     * @type {number}
     * @memberof ImageSummary
     */
    sharedSize: number;
    /**
     * Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
     * @type {number}
     * @memberof ImageSummary
     */
    virtualSize?: number;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ImageSummary
     */
    labels: { [key: string]: string; };
    /**
     * Number of containers using this image. Includes both stopped and running containers.  This size is not calculated by default, and depends on which API endpoint is used. `-1` indicates that the value has not been set / calculated. 
     * @type {number}
     * @memberof ImageSummary
     */
    containers: number;
}

/**
 * IndexInfo contains information about a registry.
 * @export
 * @interface IndexInfo
 */
export interface IndexInfo {
    /**
     * Name of the registry, such as \"docker.io\". 
     * @type {string}
     * @memberof IndexInfo
     */
    name?: string;
    /**
     * List of mirrors, expressed as URIs. 
     * @type {Array<string>}
     * @memberof IndexInfo
     */
    mirrors?: Array<string>;
    /**
     * Indicates if the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  > **Warning**: Insecure registries can be useful when running a local > registry. However, because its use creates security vulnerabilities > it should ONLY be enabled for testing purposes. For increased > security, users should add their CA to their system's list of > trusted CAs instead of enabling this option. 
     * @type {boolean}
     * @memberof IndexInfo
     */
    secure?: boolean;
    /**
     * Indicates whether this is an official registry (i.e., Docker Hub / docker.io) 
     * @type {boolean}
     * @memberof IndexInfo
     */
    official?: boolean;
}

/**
 * JoinTokens contains the tokens workers and managers need to join the swarm. 
 * @export
 * @interface JoinTokens
 */
export interface JoinTokens {
    /**
     * The token workers can use to join the swarm. 
     * @type {string}
     * @memberof JoinTokens
     */
    worker?: string;
    /**
     * The token managers can use to join the swarm. 
     * @type {string}
     * @memberof JoinTokens
     */
    manager?: string;
}

/**
 * An object describing a limit on resources which can be requested by a task. 
 * @export
 * @interface Limit
 */
export interface Limit {
    /**
     * 
     * @type {number}
     * @memberof Limit
     */
    nanoCPUs?: number;
    /**
     * 
     * @type {number}
     * @memberof Limit
     */
    memoryBytes?: number;
    /**
     * Limits the maximum number of PIDs in the container. Set `0` for unlimited. 
     * @type {number}
     * @memberof Limit
     */
    pids?: number;
}

/**
 * Current local status of this node.
 * @export
 * @enum {string}
 */
export enum LocalNodeState {
    Empty = <any> '',
    Inactive = <any> 'inactive',
    Pending = <any> 'pending',
    Active = <any> 'active',
    Error = <any> 'error',
    Locked = <any> 'locked',
}

/**
 * ManagerStatus represents the status of a manager.  It provides the current status of a node's manager component, if the node is a manager. 
 * @export
 * @interface ManagerStatus
 */
export interface ManagerStatus {
    /**
     * 
     * @type {boolean}
     * @memberof ManagerStatus
     */
    leader?: boolean;
    /**
     * 
     * @type {Reachability}
     * @memberof ManagerStatus
     */
    reachability?: Reachability;
    /**
     * The IP address and port at which the manager is reachable. 
     * @type {string}
     * @memberof ManagerStatus
     */
    addr?: string;
}

/**
 * 
 * @export
 * @interface Mount
 */
export interface Mount {
    /**
     * Container path.
     * @type {string}
     * @memberof Mount
     */
    target?: string;
    /**
     * Mount source (e.g. a volume name, a host path).
     * @type {string}
     * @memberof Mount
     */
    source?: string;
    /**
     * The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs. - `npipe` Mounts a named pipe from the host into the container. Must exist prior to creating the container. - `cluster` a Swarm cluster volume 
     * @type {string}
     * @memberof Mount
     */
    type?: Mount.TypeEnum;
    /**
     * Whether the mount should be read-only.
     * @type {boolean}
     * @memberof Mount
     */
    readOnly?: boolean;
    /**
     * The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.
     * @type {string}
     * @memberof Mount
     */
    consistency?: string;
    /**
     * 
     * @type {MountBindOptions}
     * @memberof Mount
     */
    bindOptions?: MountBindOptions;
    /**
     * 
     * @type {MountVolumeOptions}
     * @memberof Mount
     */
    volumeOptions?: MountVolumeOptions;
    /**
     * 
     * @type {MountTmpfsOptions}
     * @memberof Mount
     */
    tmpfsOptions?: MountTmpfsOptions;
}

/**
 * @export
 * @namespace Mount
 */
export namespace Mount {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Bind = <any> 'bind',
        Volume = <any> 'volume',
        Tmpfs = <any> 'tmpfs',
        Npipe = <any> 'npipe',
        Cluster = <any> 'cluster',
    }
}

/**
 * Optional configuration for the `bind` type.
 * @export
 * @interface MountBindOptions
 */
export interface MountBindOptions {
    /**
     * A propagation mode with the value `[r]private`, `[r]shared`, or `[r]slave`.
     * @type {string}
     * @memberof MountBindOptions
     */
    propagation?: MountBindOptions.PropagationEnum;
    /**
     * Disable recursive bind mount.
     * @type {boolean}
     * @memberof MountBindOptions
     */
    nonRecursive?: boolean;
    /**
     * Create mount point on host if missing
     * @type {boolean}
     * @memberof MountBindOptions
     */
    createMountpoint?: boolean;
    /**
     * Make the mount non-recursively read-only, but still leave the mount recursive (unless NonRecursive is set to true in conjunction). 
     * @type {boolean}
     * @memberof MountBindOptions
     */
    readOnlyNonRecursive?: boolean;
    /**
     * Raise an error if the mount cannot be made recursively read-only.
     * @type {boolean}
     * @memberof MountBindOptions
     */
    readOnlyForceRecursive?: boolean;
}

/**
 * @export
 * @namespace MountBindOptions
 */
export namespace MountBindOptions {
    /**
     * @export
     * @enum {string}
     */
    export enum PropagationEnum {
        Private = <any> 'private',
        Rprivate = <any> 'rprivate',
        Shared = <any> 'shared',
        Rshared = <any> 'rshared',
        Slave = <any> 'slave',
        Rslave = <any> 'rslave',
    }
}

/**
 * MountPoint represents a mount point configuration inside the container. This is used for reporting the mountpoints in use by a container. 
 * @export
 * @interface MountPoint
 */
export interface MountPoint {
    /**
     * The mount type:  - `bind` a mount of a file or directory from the host into the container. - `volume` a docker volume with the given `Name`. - `tmpfs` a `tmpfs`. - `npipe` a named pipe from the host into the container. - `cluster` a Swarm cluster volume 
     * @type {string}
     * @memberof MountPoint
     */
    type?: MountPoint.TypeEnum;
    /**
     * Name is the name reference to the underlying data defined by `Source` e.g., the volume name. 
     * @type {string}
     * @memberof MountPoint
     */
    name?: string;
    /**
     * Source location of the mount.  For volumes, this contains the storage location of the volume (within `/var/lib/docker/volumes/`). For bind-mounts, and `npipe`, this contains the source (host) part of the bind-mount. For `tmpfs` mount points, this field is empty. 
     * @type {string}
     * @memberof MountPoint
     */
    source?: string;
    /**
     * Destination is the path relative to the container root (`/`) where the `Source` is mounted inside the container. 
     * @type {string}
     * @memberof MountPoint
     */
    destination?: string;
    /**
     * Driver is the volume driver used to create the volume (if it is a volume). 
     * @type {string}
     * @memberof MountPoint
     */
    driver?: string;
    /**
     * Mode is a comma separated list of options supplied by the user when creating the bind/volume mount.  The default is platform-specific (`\"z\"` on Linux, empty on Windows). 
     * @type {string}
     * @memberof MountPoint
     */
    mode?: string;
    /**
     * Whether the mount is mounted writable (read-write). 
     * @type {boolean}
     * @memberof MountPoint
     */
    RW?: boolean;
    /**
     * Propagation describes how mounts are propagated from the host into the mount point, and vice-versa. Refer to the [Linux kernel documentation](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt) for details. This field is not used on Windows. 
     * @type {string}
     * @memberof MountPoint
     */
    propagation?: string;
}

/**
 * @export
 * @namespace MountPoint
 */
export namespace MountPoint {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Bind = <any> 'bind',
        Volume = <any> 'volume',
        Tmpfs = <any> 'tmpfs',
        Npipe = <any> 'npipe',
        Cluster = <any> 'cluster',
    }
}

/**
 * Optional configuration for the `tmpfs` type.
 * @export
 * @interface MountTmpfsOptions
 */
export interface MountTmpfsOptions {
    /**
     * The size for the tmpfs mount in bytes.
     * @type {number}
     * @memberof MountTmpfsOptions
     */
    sizeBytes?: number;
    /**
     * The permission mode for the tmpfs mount in an integer.
     * @type {number}
     * @memberof MountTmpfsOptions
     */
    mode?: number;
}

/**
 * Optional configuration for the `volume` type.
 * @export
 * @interface MountVolumeOptions
 */
export interface MountVolumeOptions {
    /**
     * Populate volume with data from the target.
     * @type {boolean}
     * @memberof MountVolumeOptions
     */
    noCopy?: boolean;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof MountVolumeOptions
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {MountVolumeOptionsDriverConfig}
     * @memberof MountVolumeOptions
     */
    driverConfig?: MountVolumeOptionsDriverConfig;
}

/**
 * Map of driver specific options
 * @export
 * @interface MountVolumeOptionsDriverConfig
 */
export interface MountVolumeOptionsDriverConfig {
    /**
     * Name of the driver to use to create the volume.
     * @type {string}
     * @memberof MountVolumeOptionsDriverConfig
     */
    name?: string;
    /**
     * key/value map of driver specific options.
     * @type {{ [key: string]: string; }}
     * @memberof MountVolumeOptionsDriverConfig
     */
    options?: { [key: string]: string; };
}

/**
 * 
 * @export
 * @interface Network
 */
export interface Network {
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    scope?: string;
    /**
     * 
     * @type {string}
     * @memberof Network
     */
    driver?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Network
     */
    enableIPv6?: boolean;
    /**
     * 
     * @type {IPAM}
     * @memberof Network
     */
    IPAM?: IPAM;
    /**
     * 
     * @type {boolean}
     * @memberof Network
     */
    internal?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Network
     */
    attachable?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Network
     */
    ingress?: boolean;
    /**
     * 
     * @type {{ [key: string]: NetworkContainer; }}
     * @memberof Network
     */
    containers?: { [key: string]: NetworkContainer; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Network
     */
    options?: { [key: string]: string; };
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof Network
     */
    labels?: { [key: string]: string; };
}

/**
 * Specifies how a service should be attached to a particular network. 
 * @export
 * @interface NetworkAttachmentConfig
 */
export interface NetworkAttachmentConfig {
    /**
     * The target network for attachment. Must be a network name or ID. 
     * @type {string}
     * @memberof NetworkAttachmentConfig
     */
    target?: string;
    /**
     * Discoverable alternate names for the service on this network. 
     * @type {Array<string>}
     * @memberof NetworkAttachmentConfig
     */
    aliases?: Array<string>;
    /**
     * Driver attachment options for the network target. 
     * @type {{ [key: string]: string; }}
     * @memberof NetworkAttachmentConfig
     */
    driverOpts?: { [key: string]: string; };
}

/**
 * 
 * @export
 * @interface NetworkConnectRequest
 */
export interface NetworkConnectRequest {
    /**
     * The ID or name of the container to connect to the network.
     * @type {string}
     * @memberof NetworkConnectRequest
     */
    container?: string;
    /**
     * 
     * @type {EndpointSettings}
     * @memberof NetworkConnectRequest
     */
    endpointConfig?: EndpointSettings;
}

/**
 * 
 * @export
 * @interface NetworkContainer
 */
export interface NetworkContainer {
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    endpointID?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    macAddress?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    iPv4Address?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkContainer
     */
    iPv6Address?: string;
}

/**
 * 
 * @export
 * @interface NetworkCreateRequest
 */
export interface NetworkCreateRequest {
    /**
     * The network's name.
     * @type {string}
     * @memberof NetworkCreateRequest
     */
    name: string;
    /**
     * Deprecated: CheckDuplicate is now always enabled. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    checkDuplicate?: boolean;
    /**
     * Name of the network driver plugin to use.
     * @type {string}
     * @memberof NetworkCreateRequest
     */
    driver?: string;
    /**
     * Restrict external access to the network.
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    internal?: boolean;
    /**
     * Globally scoped network is manually attachable by regular containers from workers in swarm mode. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    attachable?: boolean;
    /**
     * Ingress network is the network which provides the routing-mesh in swarm mode. 
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    ingress?: boolean;
    /**
     * 
     * @type {IPAM}
     * @memberof NetworkCreateRequest
     */
    IPAM?: IPAM;
    /**
     * Enable IPv6 on the network.
     * @type {boolean}
     * @memberof NetworkCreateRequest
     */
    enableIPv6?: boolean;
    /**
     * Network specific options to be used by the drivers.
     * @type {{ [key: string]: string; }}
     * @memberof NetworkCreateRequest
     */
    options?: { [key: string]: string; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof NetworkCreateRequest
     */
    labels?: { [key: string]: string; };
}

/**
 * 
 * @export
 * @interface NetworkCreateResponse
 */
export interface NetworkCreateResponse {
    /**
     * The ID of the created network.
     * @type {string}
     * @memberof NetworkCreateResponse
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof NetworkCreateResponse
     */
    warning?: string;
}

/**
 * 
 * @export
 * @interface NetworkDisconnectRequest
 */
export interface NetworkDisconnectRequest {
    /**
     * The ID or name of the container to disconnect from the network. 
     * @type {string}
     * @memberof NetworkDisconnectRequest
     */
    container?: string;
    /**
     * Force the container to disconnect from the network. 
     * @type {boolean}
     * @memberof NetworkDisconnectRequest
     */
    force?: boolean;
}

/**
 * 
 * @export
 * @interface NetworkPruneResponse
 */
export interface NetworkPruneResponse {
    /**
     * Networks that were deleted
     * @type {Array<string>}
     * @memberof NetworkPruneResponse
     */
    networksDeleted?: Array<string>;
}

/**
 * NetworkSettings exposes the network settings in the API
 * @export
 * @interface NetworkSettings
 */
export interface NetworkSettings {
    /**
     * Name of the network's bridge (for example, `docker0`).
     * @type {string}
     * @memberof NetworkSettings
     */
    bridge?: string;
    /**
     * SandboxID uniquely represents a container's network stack.
     * @type {string}
     * @memberof NetworkSettings
     */
    sandboxID?: string;
    /**
     * Indicates if hairpin NAT should be enabled on the virtual interface. 
     * @type {boolean}
     * @memberof NetworkSettings
     */
    hairpinMode?: boolean;
    /**
     * IPv6 unicast address using the link-local prefix.
     * @type {string}
     * @memberof NetworkSettings
     */
    linkLocalIPv6Address?: string;
    /**
     * Prefix length of the IPv6 unicast address.
     * @type {number}
     * @memberof NetworkSettings
     */
    linkLocalIPv6PrefixLen?: number;
    /**
     * 
     * @type {PortMap}
     * @memberof NetworkSettings
     */
    ports?: PortMap;
    /**
     * SandboxKey identifies the sandbox
     * @type {string}
     * @memberof NetworkSettings
     */
    sandboxKey?: string;
    /**
     * 
     * @type {Array<Address>}
     * @memberof NetworkSettings
     */
    secondaryIPAddresses?: Array<Address>;
    /**
     * 
     * @type {Array<Address>}
     * @memberof NetworkSettings
     */
    secondaryIPv6Addresses?: Array<Address>;
    /**
     * EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    endpointID?: string;
    /**
     * Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    gateway?: string;
    /**
     * Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    globalIPv6Address?: string;
    /**
     * Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {number}
     * @memberof NetworkSettings
     */
    globalIPv6PrefixLen?: number;
    /**
     * IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    iPAddress?: string;
    /**
     * Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {number}
     * @memberof NetworkSettings
     */
    iPPrefixLen?: number;
    /**
     * IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    iPv6Gateway?: string;
    /**
     * MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0 
     * @type {string}
     * @memberof NetworkSettings
     */
    macAddress?: string;
    /**
     * Information about all networks that the container is connected to. 
     * @type {{ [key: string]: EndpointSettings; }}
     * @memberof NetworkSettings
     */
    networks?: { [key: string]: EndpointSettings; };
}

/**
 * NetworkingConfig represents the container's networking configuration for each of its interfaces. It is used for the networking configs specified in the `docker create` and `docker network connect` commands. 
 * @export
 * @interface NetworkingConfig
 */
export interface NetworkingConfig {
    /**
     * A mapping of network name to endpoint configuration for that network. The endpoint configuration can be left empty to connect to that network with no particular endpoint configuration. 
     * @type {{ [key: string]: EndpointSettings; }}
     * @memberof NetworkingConfig
     */
    endpointsConfig?: { [key: string]: EndpointSettings; };
}

/**
 * 
 * @export
 * @interface Node
 */
export interface Node {
    /**
     * 
     * @type {string}
     * @memberof Node
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Node
     */
    version?: ObjectVersion;
    /**
     * Date and time at which the node was added to the swarm in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Node
     */
    createdAt?: string;
    /**
     * Date and time at which the node was last updated in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof Node
     */
    updatedAt?: string;
    /**
     * 
     * @type {NodeSpec}
     * @memberof Node
     */
    spec?: NodeSpec;
    /**
     * 
     * @type {NodeDescription}
     * @memberof Node
     */
    description?: NodeDescription;
    /**
     * 
     * @type {NodeStatus}
     * @memberof Node
     */
    status?: NodeStatus;
    /**
     * 
     * @type {ManagerStatus}
     * @memberof Node
     */
    managerStatus?: ManagerStatus;
}

/**
 * NodeDescription encapsulates the properties of the Node as reported by the agent. 
 * @export
 * @interface NodeDescription
 */
export interface NodeDescription {
    /**
     * 
     * @type {string}
     * @memberof NodeDescription
     */
    hostname?: string;
    /**
     * 
     * @type {Platform}
     * @memberof NodeDescription
     */
    platform?: Platform;
    /**
     * 
     * @type {ResourceObject}
     * @memberof NodeDescription
     */
    resources?: ResourceObject;
    /**
     * 
     * @type {EngineDescription}
     * @memberof NodeDescription
     */
    engine?: EngineDescription;
    /**
     * 
     * @type {TLSInfo}
     * @memberof NodeDescription
     */
    tLSInfo?: TLSInfo;
}

/**
 * 
 * @export
 * @interface NodeSpec
 */
export interface NodeSpec {
    /**
     * Name for the node.
     * @type {string}
     * @memberof NodeSpec
     */
    name?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof NodeSpec
     */
    labels?: { [key: string]: string; };
    /**
     * Role of the node.
     * @type {string}
     * @memberof NodeSpec
     */
    role?: NodeSpec.RoleEnum;
    /**
     * Availability of the node.
     * @type {string}
     * @memberof NodeSpec
     */
    availability?: NodeSpec.AvailabilityEnum;
}

/**
 * @export
 * @namespace NodeSpec
 */
export namespace NodeSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum RoleEnum {
        Worker = <any> 'worker',
        Manager = <any> 'manager',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum AvailabilityEnum {
        Active = <any> 'active',
        Pause = <any> 'pause',
        Drain = <any> 'drain',
    }
}

/**
 * NodeState represents the state of a node.
 * @export
 * @enum {string}
 */
export enum NodeState {
    Unknown = <any> 'unknown',
    Down = <any> 'down',
    Ready = <any> 'ready',
    Disconnected = <any> 'disconnected',
}

/**
 * NodeStatus represents the status of a node.  It provides the current status of the node, as seen by the manager. 
 * @export
 * @interface NodeStatus
 */
export interface NodeStatus {
    /**
     * 
     * @type {NodeState}
     * @memberof NodeStatus
     */
    state?: NodeState;
    /**
     * 
     * @type {string}
     * @memberof NodeStatus
     */
    message?: string;
    /**
     * IP address of the node.
     * @type {string}
     * @memberof NodeStatus
     */
    addr?: string;
}

/**
 * A descriptor struct containing digest, media type, and size, as defined in the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md). 
 * @export
 * @interface OCIDescriptor
 */
export interface OCIDescriptor {
    /**
     * The media type of the object this schema refers to. 
     * @type {string}
     * @memberof OCIDescriptor
     */
    mediaType?: string;
    /**
     * The digest of the targeted content. 
     * @type {string}
     * @memberof OCIDescriptor
     */
    digest?: string;
    /**
     * The size in bytes of the blob. 
     * @type {number}
     * @memberof OCIDescriptor
     */
    size?: number;
}

/**
 * Describes the platform which the image in the manifest runs on, as defined in the [OCI Image Index Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/image-index.md). 
 * @export
 * @interface OCIPlatform
 */
export interface OCIPlatform {
    /**
     * The CPU architecture, for example `amd64` or `ppc64`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    architecture?: string;
    /**
     * The operating system, for example `linux` or `windows`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    os?: string;
    /**
     * Optional field specifying the operating system version, for example on Windows `10.0.19041.1165`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    osVersion?: string;
    /**
     * Optional field specifying an array of strings, each listing a required OS feature (for example on Windows `win32k`). 
     * @type {Array<string>}
     * @memberof OCIPlatform
     */
    osFeatures?: Array<string>;
    /**
     * Optional field specifying a variant of the CPU, for example `v7` to specify ARMv7 when architecture is `arm`. 
     * @type {string}
     * @memberof OCIPlatform
     */
    variant?: string;
}

/**
 * The version number of the object such as node, service, etc. This is needed to avoid conflicting writes. The client must send the version number along with the modified specification when updating these objects.  This approach ensures safe concurrency and determinism in that the change on the object may not be applied if the version number has changed from the last read. In other words, if two update requests specify the same base version, only one of the requests can succeed. As a result, two separate update requests that happen at the same time will not unintentionally overwrite each other. 
 * @export
 * @interface ObjectVersion
 */
export interface ObjectVersion {
    /**
     * 
     * @type {number}
     * @memberof ObjectVersion
     */
    index?: number;
}

/**
 * Represents a peer-node in the swarm
 * @export
 * @interface PeerNode
 */
export interface PeerNode {
    /**
     * Unique identifier of for this node in the swarm.
     * @type {string}
     * @memberof PeerNode
     */
    nodeID?: string;
    /**
     * IP address and ports at which this node can be reached. 
     * @type {string}
     * @memberof PeerNode
     */
    addr?: string;
}

/**
 * Platform represents the platform (Arch/OS). 
 * @export
 * @interface Platform
 */
export interface Platform {
    /**
     * Architecture represents the hardware architecture (for example, `x86_64`). 
     * @type {string}
     * @memberof Platform
     */
    architecture?: string;
    /**
     * OS represents the Operating System (for example, `linux` or `windows`). 
     * @type {string}
     * @memberof Platform
     */
    OS?: string;
}

/**
 * A plugin for the Engine API
 * @export
 * @interface Plugin
 */
export interface Plugin {
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Plugin
     */
    name: string;
    /**
     * True if the plugin is running. False if the plugin is not running, only installed.
     * @type {boolean}
     * @memberof Plugin
     */
    enabled: boolean;
    /**
     * 
     * @type {PluginSettings}
     * @memberof Plugin
     */
    settings: PluginSettings;
    /**
     * plugin remote reference used to push/pull the plugin
     * @type {string}
     * @memberof Plugin
     */
    pluginReference?: string;
    /**
     * 
     * @type {PluginConfig}
     * @memberof Plugin
     */
    config: PluginConfig;
}

/**
 * The config of a plugin.
 * @export
 * @interface PluginConfig
 */
export interface PluginConfig {
    /**
     * Docker Version used to create the plugin
     * @type {string}
     * @memberof PluginConfig
     */
    dockerVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    documentation: string;
    /**
     * 
     * @type {PluginConfigInterface}
     * @memberof PluginConfig
     */
    _interface: PluginConfigInterface;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfig
     */
    entrypoint: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    workDir: string;
    /**
     * 
     * @type {PluginConfigUser}
     * @memberof PluginConfig
     */
    user?: PluginConfigUser;
    /**
     * 
     * @type {PluginConfigNetwork}
     * @memberof PluginConfig
     */
    network: PluginConfigNetwork;
    /**
     * 
     * @type {PluginConfigLinux}
     * @memberof PluginConfig
     */
    linux: PluginConfigLinux;
    /**
     * 
     * @type {string}
     * @memberof PluginConfig
     */
    propagatedMount: string;
    /**
     * 
     * @type {boolean}
     * @memberof PluginConfig
     */
    ipcHost: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PluginConfig
     */
    pidHost: boolean;
    /**
     * 
     * @type {Array<PluginMount>}
     * @memberof PluginConfig
     */
    mounts: Array<PluginMount>;
    /**
     * 
     * @type {Array<PluginEnv>}
     * @memberof PluginConfig
     */
    env: Array<PluginEnv>;
    /**
     * 
     * @type {PluginConfigArgs}
     * @memberof PluginConfig
     */
    args: PluginConfigArgs;
    /**
     * 
     * @type {PluginConfigRootfs}
     * @memberof PluginConfig
     */
    rootfs?: PluginConfigRootfs;
}

/**
 * 
 * @export
 * @interface PluginConfigArgs
 */
export interface PluginConfigArgs {
    /**
     * 
     * @type {string}
     * @memberof PluginConfigArgs
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PluginConfigArgs
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigArgs
     */
    settable: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigArgs
     */
    value: Array<string>;
}

/**
 * The interface between Docker and the plugin
 * @export
 * @interface PluginConfigInterface
 */
export interface PluginConfigInterface {
    /**
     * 
     * @type {Array<PluginInterfaceType>}
     * @memberof PluginConfigInterface
     */
    types: Array<PluginInterfaceType>;
    /**
     * 
     * @type {string}
     * @memberof PluginConfigInterface
     */
    socket: string;
    /**
     * Protocol to use for clients connecting to the plugin.
     * @type {string}
     * @memberof PluginConfigInterface
     */
    protocolScheme?: PluginConfigInterface.ProtocolSchemeEnum;
}

/**
 * @export
 * @namespace PluginConfigInterface
 */
export namespace PluginConfigInterface {
    /**
     * @export
     * @enum {string}
     */
    export enum ProtocolSchemeEnum {
        Empty = <any> '',
        MobyPluginsHttpv1 = <any> 'moby.plugins.http/v1',
    }
}

/**
 * 
 * @export
 * @interface PluginConfigLinux
 */
export interface PluginConfigLinux {
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigLinux
     */
    capabilities: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PluginConfigLinux
     */
    allowAllDevices: boolean;
    /**
     * 
     * @type {Array<PluginDevice>}
     * @memberof PluginConfigLinux
     */
    devices: Array<PluginDevice>;
}

/**
 * 
 * @export
 * @interface PluginConfigNetwork
 */
export interface PluginConfigNetwork {
    /**
     * 
     * @type {string}
     * @memberof PluginConfigNetwork
     */
    type: string;
}

/**
 * 
 * @export
 * @interface PluginConfigRootfs
 */
export interface PluginConfigRootfs {
    /**
     * 
     * @type {string}
     * @memberof PluginConfigRootfs
     */
    type?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginConfigRootfs
     */
    diffIds?: Array<string>;
}

/**
 * 
 * @export
 * @interface PluginConfigUser
 */
export interface PluginConfigUser {
    /**
     * 
     * @type {number}
     * @memberof PluginConfigUser
     */
    UID?: number;
    /**
     * 
     * @type {number}
     * @memberof PluginConfigUser
     */
    GID?: number;
}

/**
 * 
 * @export
 * @interface PluginDevice
 */
export interface PluginDevice {
    /**
     * 
     * @type {string}
     * @memberof PluginDevice
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PluginDevice
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginDevice
     */
    settable: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginDevice
     */
    path: string;
}

/**
 * 
 * @export
 * @interface PluginEnv
 */
export interface PluginEnv {
    /**
     * 
     * @type {string}
     * @memberof PluginEnv
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PluginEnv
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginEnv
     */
    settable: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginEnv
     */
    value: string;
}

/**
 * 
 * @export
 * @interface PluginInterfaceType
 */
export interface PluginInterfaceType {
    /**
     * 
     * @type {string}
     * @memberof PluginInterfaceType
     */
    prefix: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInterfaceType
     */
    capability: string;
    /**
     * 
     * @type {string}
     * @memberof PluginInterfaceType
     */
    version: string;
}

/**
 * 
 * @export
 * @interface PluginMount
 */
export interface PluginMount {
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    description: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginMount
     */
    settable: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    source: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    destination: string;
    /**
     * 
     * @type {string}
     * @memberof PluginMount
     */
    type: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginMount
     */
    options: Array<string>;
}

/**
 * Describes a permission the user has to accept upon installing the plugin. 
 * @export
 * @interface PluginPrivilege
 */
export interface PluginPrivilege {
    /**
     * 
     * @type {string}
     * @memberof PluginPrivilege
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PluginPrivilege
     */
    description?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginPrivilege
     */
    value?: Array<string>;
}

/**
 * Settings that can be modified by users.
 * @export
 * @interface PluginSettings
 */
export interface PluginSettings {
    /**
     * 
     * @type {Array<PluginMount>}
     * @memberof PluginSettings
     */
    mounts: Array<PluginMount>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginSettings
     */
    env: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PluginSettings
     */
    args: Array<string>;
    /**
     * 
     * @type {Array<PluginDevice>}
     * @memberof PluginSettings
     */
    devices: Array<PluginDevice>;
}

/**
 * Available plugins per type.  <p><br /></p>  > **Note**: Only unmanaged (V1) plugins are included in this list. > V1 plugins are \"lazily\" loaded, and are not returned in this list > if there is no resource using the plugin. 
 * @export
 * @interface PluginsInfo
 */
export interface PluginsInfo {
    /**
     * Names of available volume-drivers, and network-driver plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    volume?: Array<string>;
    /**
     * Names of available network-drivers, and network-driver plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    network?: Array<string>;
    /**
     * Names of available authorization plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    authorization?: Array<string>;
    /**
     * Names of available logging-drivers, and logging-driver plugins.
     * @type {Array<string>}
     * @memberof PluginsInfo
     */
    log?: Array<string>;
}

/**
 * An open port on a container
 * @export
 * @interface Port
 */
export interface Port {
    /**
     * Host IP address that the container's port is mapped to
     * @type {string}
     * @memberof Port
     */
    IP?: string;
    /**
     * Port on the container
     * @type {number}
     * @memberof Port
     */
    privatePort: number;
    /**
     * Port exposed on the host
     * @type {number}
     * @memberof Port
     */
    publicPort?: number;
    /**
     * 
     * @type {string}
     * @memberof Port
     */
    type: Port.TypeEnum;
}

/**
 * @export
 * @namespace Port
 */
export namespace Port {
    /**
     * @export
     * @enum {string}
     */
    export enum TypeEnum {
        Tcp = <any> 'tcp',
        Udp = <any> 'udp',
        Sctp = <any> 'sctp',
    }
}

/**
 * PortBinding represents a binding between a host IP address and a host port. 
 * @export
 * @interface PortBinding
 */
export interface PortBinding {
    /**
     * Host IP address that the container's port is mapped to.
     * @type {string}
     * @memberof PortBinding
     */
    hostIp?: string;
    /**
     * Host port number that the container's port is mapped to.
     * @type {string}
     * @memberof PortBinding
     */
    hostPort?: string;
}

/**
 * PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for multiple protocols, separate entries are added to the mapping table. 
 * @export
 * @interface PortMap
 */
export interface PortMap extends null<String, Array> {
    [key: string]: Array<PortBinding>;

}

/**
 * 
 * @export
 * @interface ProcessConfig
 */
export interface ProcessConfig {
    /**
     * 
     * @type {boolean}
     * @memberof ProcessConfig
     */
    privileged?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessConfig
     */
    user?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ProcessConfig
     */
    tty?: boolean;
    /**
     * 
     * @type {string}
     * @memberof ProcessConfig
     */
    entrypoint?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProcessConfig
     */
    arguments?: Array<string>;
}

/**
 * 
 * @export
 * @interface ProgressDetail
 */
export interface ProgressDetail {
    /**
     * 
     * @type {number}
     * @memberof ProgressDetail
     */
    current?: number;
    /**
     * 
     * @type {number}
     * @memberof ProgressDetail
     */
    total?: number;
}

/**
 * 
 * @export
 * @interface PushImageInfo
 */
export interface PushImageInfo {
    /**
     * 
     * @type {string}
     * @memberof PushImageInfo
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof PushImageInfo
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof PushImageInfo
     */
    progress?: string;
    /**
     * 
     * @type {ProgressDetail}
     * @memberof PushImageInfo
     */
    progressDetail?: ProgressDetail;
}

/**
 * Reachability represents the reachability of a node.
 * @export
 * @enum {string}
 */
export enum Reachability {
    Unknown = <any> 'unknown',
    Unreachable = <any> 'unreachable',
    Reachable = <any> 'reachable',
}

/**
 * RegistryServiceConfig stores daemon registry services configuration. 
 * @export
 * @interface RegistryServiceConfig
 */
export interface RegistryServiceConfig {
    /**
     * List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    allowNondistributableArtifactsCIDRs?: Array<string>;
    /**
     * List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    allowNondistributableArtifactsHostnames?: Array<string>;
    /**
     * List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.  > **Warning**: Using this option can be useful when running a local > registry, but introduces security vulnerabilities. This option > should therefore ONLY be used for testing purposes. For increased > security, users should add their CA to their system's list of trusted > CAs instead of enabling this option. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    insecureRegistryCIDRs?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: IndexInfo; }}
     * @memberof RegistryServiceConfig
     */
    indexConfigs?: { [key: string]: IndexInfo; };
    /**
     * List of registry URLs that act as a mirror for the official (`docker.io`) registry. 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    mirrors?: Array<string>;
}

/**
 * An object describing the resources which can be advertised by a node and requested by a task. 
 * @export
 * @interface ResourceObject
 */
export interface ResourceObject {
    /**
     * 
     * @type {number}
     * @memberof ResourceObject
     */
    nanoCPUs?: number;
    /**
     * 
     * @type {number}
     * @memberof ResourceObject
     */
    memoryBytes?: number;
    /**
     * 
     * @type {GenericResources}
     * @memberof ResourceObject
     */
    genericResources?: GenericResources;
}

/**
 * A container's resources (cgroups config, ulimits, etc)
 * @export
 * @interface Resources
 */
export interface Resources {
    /**
     * An integer value representing this container's relative CPU weight versus other containers. 
     * @type {number}
     * @memberof Resources
     */
    cpuShares?: number;
    /**
     * Memory limit in bytes.
     * @type {number}
     * @memberof Resources
     */
    memory?: number;
    /**
     * Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist. 
     * @type {string}
     * @memberof Resources
     */
    cgroupParent?: string;
    /**
     * Block IO weight (relative weight).
     * @type {number}
     * @memberof Resources
     */
    blkioWeight?: number;
    /**
     * Block IO weight (relative device weight) in the form:  ``` [{\"Path\": \"device_path\", \"Weight\": weight}] ``` 
     * @type {Array<ResourcesBlkioWeightDevice>}
     * @memberof Resources
     */
    blkioWeightDevice?: Array<ResourcesBlkioWeightDevice>;
    /**
     * Limit read rate (bytes per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    blkioDeviceReadBps?: Array<ThrottleDevice>;
    /**
     * Limit write rate (bytes per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    blkioDeviceWriteBps?: Array<ThrottleDevice>;
    /**
     * Limit read rate (IO per second) from a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    blkioDeviceReadIOps?: Array<ThrottleDevice>;
    /**
     * Limit write rate (IO per second) to a device, in the form:  ``` [{\"Path\": \"device_path\", \"Rate\": rate}] ``` 
     * @type {Array<ThrottleDevice>}
     * @memberof Resources
     */
    blkioDeviceWriteIOps?: Array<ThrottleDevice>;
    /**
     * The length of a CPU period in microseconds.
     * @type {number}
     * @memberof Resources
     */
    cpuPeriod?: number;
    /**
     * Microseconds of CPU time that the container can get in a CPU period. 
     * @type {number}
     * @memberof Resources
     */
    cpuQuota?: number;
    /**
     * The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof Resources
     */
    cpuRealtimePeriod?: number;
    /**
     * The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks. 
     * @type {number}
     * @memberof Resources
     */
    cpuRealtimeRuntime?: number;
    /**
     * CPUs in which to allow execution (e.g., `0-3`, `0,1`). 
     * @type {string}
     * @memberof Resources
     */
    cpusetCpus?: string;
    /**
     * Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems. 
     * @type {string}
     * @memberof Resources
     */
    cpusetMems?: string;
    /**
     * A list of devices to add to the container.
     * @type {Array<DeviceMapping>}
     * @memberof Resources
     */
    devices?: Array<DeviceMapping>;
    /**
     * a list of cgroup rules to apply to the container
     * @type {Array<string>}
     * @memberof Resources
     */
    deviceCgroupRules?: Array<string>;
    /**
     * A list of requests for devices to be sent to device drivers. 
     * @type {Array<DeviceRequest>}
     * @memberof Resources
     */
    deviceRequests?: Array<DeviceRequest>;
    /**
     * Hard limit for kernel TCP buffer memory (in bytes). Depending on the OCI runtime in use, this option may be ignored. It is no longer supported by the default (runc) runtime.  This field is omitted when empty. 
     * @type {number}
     * @memberof Resources
     */
    kernelMemoryTCP?: number;
    /**
     * Memory soft limit in bytes.
     * @type {number}
     * @memberof Resources
     */
    memoryReservation?: number;
    /**
     * Total memory limit (memory + swap). Set as `-1` to enable unlimited swap. 
     * @type {number}
     * @memberof Resources
     */
    memorySwap?: number;
    /**
     * Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100. 
     * @type {number}
     * @memberof Resources
     */
    memorySwappiness?: number;
    /**
     * CPU quota in units of 10<sup>-9</sup> CPUs.
     * @type {number}
     * @memberof Resources
     */
    nanoCpus?: number;
    /**
     * Disable OOM Killer for the container.
     * @type {boolean}
     * @memberof Resources
     */
    oomKillDisable?: boolean;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
     * @type {boolean}
     * @memberof Resources
     */
    init?: boolean;
    /**
     * Tune a container's PIDs limit. Set `0` or `-1` for unlimited, or `null` to not change. 
     * @type {number}
     * @memberof Resources
     */
    pidsLimit?: number;
    /**
     * A list of resource limits to set in the container. For example:  ``` {\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048} ``` 
     * @type {Array<ResourcesUlimits>}
     * @memberof Resources
     */
    ulimits?: Array<ResourcesUlimits>;
    /**
     * The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof Resources
     */
    cpuCount?: number;
    /**
     * The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last. 
     * @type {number}
     * @memberof Resources
     */
    cpuPercent?: number;
    /**
     * Maximum IOps for the container system drive (Windows only)
     * @type {number}
     * @memberof Resources
     */
    iOMaximumIOps?: number;
    /**
     * Maximum IO in bytes per second for the container system drive (Windows only). 
     * @type {number}
     * @memberof Resources
     */
    iOMaximumBandwidth?: number;
}

/**
 * 
 * @export
 * @interface ResourcesBlkioWeightDevice
 */
export interface ResourcesBlkioWeightDevice {
    /**
     * 
     * @type {string}
     * @memberof ResourcesBlkioWeightDevice
     */
    path?: string;
    /**
     * 
     * @type {number}
     * @memberof ResourcesBlkioWeightDevice
     */
    weight?: number;
}

/**
 * 
 * @export
 * @interface ResourcesUlimits
 */
export interface ResourcesUlimits {
    /**
     * Name of ulimit
     * @type {string}
     * @memberof ResourcesUlimits
     */
    name?: string;
    /**
     * Soft limit
     * @type {number}
     * @memberof ResourcesUlimits
     */
    soft?: number;
    /**
     * Hard limit
     * @type {number}
     * @memberof ResourcesUlimits
     */
    hard?: number;
}

/**
 * The behavior to apply when the container exits. The default is not to restart.  An ever increasing delay (double the previous delay, starting at 100ms) is added before each restart to prevent flooding the server. 
 * @export
 * @interface RestartPolicy
 */
export interface RestartPolicy {
    /**
     * - Empty string means not to restart - `no` Do not automatically restart - `always` Always restart - `unless-stopped` Restart always except when the user has manually stopped the container - `on-failure` Restart only when the container exit code is non-zero 
     * @type {string}
     * @memberof RestartPolicy
     */
    name?: RestartPolicy.NameEnum;
    /**
     * If `on-failure` is used, the number of times to retry before giving up. 
     * @type {number}
     * @memberof RestartPolicy
     */
    maximumRetryCount?: number;
}

/**
 * @export
 * @namespace RestartPolicy
 */
export namespace RestartPolicy {
    /**
     * @export
     * @enum {string}
     */
    export enum NameEnum {
        Empty = <any> '',
        No = <any> 'no',
        Always = <any> 'always',
        UnlessStopped = <any> 'unless-stopped',
        OnFailure = <any> 'on-failure',
    }
}

/**
 * Runtime describes an [OCI compliant](https://github.com/opencontainers/runtime-spec) runtime.  The runtime is invoked by the daemon via the `containerd` daemon. OCI runtimes act as an interface to the Linux kernel namespaces, cgroups, and SELinux. 
 * @export
 * @interface Runtime
 */
export interface Runtime {
    /**
     * Name and, optional, path, of the OCI executable binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. 
     * @type {string}
     * @memberof Runtime
     */
    path?: string;
    /**
     * List of command-line arguments to pass to the runtime when invoked. 
     * @type {Array<string>}
     * @memberof Runtime
     */
    runtimeArgs?: Array<string>;
}

/**
 * 
 * @export
 * @interface Secret
 */
export interface Secret {
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Secret
     */
    version?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Secret
     */
    updatedAt?: string;
    /**
     * 
     * @type {SecretSpec}
     * @memberof Secret
     */
    spec?: SecretSpec;
}

/**
 * 
 * @export
 * @interface SecretSpec
 */
export interface SecretSpec {
    /**
     * User-defined name of the secret.
     * @type {string}
     * @memberof SecretSpec
     */
    name?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof SecretSpec
     */
    labels?: { [key: string]: string; };
    /**
     * Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5)) data to store as secret.  This field is only used to _create_ a secret, and is not returned by other endpoints. 
     * @type {string}
     * @memberof SecretSpec
     */
    data?: string;
    /**
     * 
     * @type {Driver}
     * @memberof SecretSpec
     */
    driver?: Driver;
    /**
     * 
     * @type {Driver}
     * @memberof SecretSpec
     */
    templating?: Driver;
}

/**
 * 
 * @export
 * @interface SecretsCreateBody
 */
export interface SecretsCreateBody extends SecretSpec {
}

/**
 * 
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Service
     */
    version?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Service
     */
    updatedAt?: string;
    /**
     * 
     * @type {ServiceSpec}
     * @memberof Service
     */
    spec?: ServiceSpec;
    /**
     * 
     * @type {ServiceEndpoint}
     * @memberof Service
     */
    endpoint?: ServiceEndpoint;
    /**
     * 
     * @type {ServiceUpdateStatus}
     * @memberof Service
     */
    updateStatus?: ServiceUpdateStatus;
    /**
     * 
     * @type {ServiceServiceStatus}
     * @memberof Service
     */
    serviceStatus?: ServiceServiceStatus;
    /**
     * 
     * @type {ServiceJobStatus}
     * @memberof Service
     */
    jobStatus?: ServiceJobStatus;
}

/**
 * contains the information returned to a client on the creation of a new service. 
 * @export
 * @interface ServiceCreateResponse
 */
export interface ServiceCreateResponse {
    /**
     * The ID of the created service.
     * @type {string}
     * @memberof ServiceCreateResponse
     */
    ID?: string;
    /**
     * Optional warning message.  FIXME(thaJeztah): this should have \"omitempty\" in the generated type. 
     * @type {Array<string>}
     * @memberof ServiceCreateResponse
     */
    warnings?: Array<string>;
}

/**
 * 
 * @export
 * @interface ServiceEndpoint
 */
export interface ServiceEndpoint {
    /**
     * 
     * @type {EndpointSpec}
     * @memberof ServiceEndpoint
     */
    spec?: EndpointSpec;
    /**
     * 
     * @type {Array<EndpointPortConfig>}
     * @memberof ServiceEndpoint
     */
    ports?: Array<EndpointPortConfig>;
    /**
     * 
     * @type {Array<ServiceEndpointVirtualIPs>}
     * @memberof ServiceEndpoint
     */
    virtualIPs?: Array<ServiceEndpointVirtualIPs>;
}

/**
 * 
 * @export
 * @interface ServiceEndpointVirtualIPs
 */
export interface ServiceEndpointVirtualIPs {
    /**
     * 
     * @type {string}
     * @memberof ServiceEndpointVirtualIPs
     */
    networkID?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceEndpointVirtualIPs
     */
    addr?: string;
}

/**
 * The status of the service when it is in one of ReplicatedJob or GlobalJob modes. Absent on Replicated and Global mode services. The JobIteration is an ObjectVersion, but unlike the Service's version, does not need to be sent with an update request. 
 * @export
 * @interface ServiceJobStatus
 */
export interface ServiceJobStatus {
    /**
     * 
     * @type {ObjectVersion}
     * @memberof ServiceJobStatus
     */
    jobIteration?: ObjectVersion;
    /**
     * The last time, as observed by the server, that this job was started. 
     * @type {string}
     * @memberof ServiceJobStatus
     */
    lastExecution?: string;
}

/**
 * The status of the service's tasks. Provided only when requested as part of a ServiceList operation. 
 * @export
 * @interface ServiceServiceStatus
 */
export interface ServiceServiceStatus {
    /**
     * The number of tasks for the service currently in the Running state. 
     * @type {number}
     * @memberof ServiceServiceStatus
     */
    runningTasks?: number;
    /**
     * The number of tasks for the service desired to be running. For replicated services, this is the replica count from the service spec. For global services, this is computed by taking count of all tasks for the service with a Desired State other than Shutdown. 
     * @type {number}
     * @memberof ServiceServiceStatus
     */
    desiredTasks?: number;
    /**
     * The number of tasks for a job that are in the Completed state. This field must be cross-referenced with the service type, as the value of 0 may mean the service is not in a job mode, or it may mean the job-mode service has no tasks yet Completed. 
     * @type {number}
     * @memberof ServiceServiceStatus
     */
    completedTasks?: number;
}

/**
 * User modifiable configuration for a service.
 * @export
 * @interface ServiceSpec
 */
export interface ServiceSpec {
    /**
     * Name of the service.
     * @type {string}
     * @memberof ServiceSpec
     */
    name?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ServiceSpec
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {TaskSpec}
     * @memberof ServiceSpec
     */
    taskTemplate?: TaskSpec;
    /**
     * 
     * @type {ServiceSpecMode}
     * @memberof ServiceSpec
     */
    mode?: ServiceSpecMode;
    /**
     * 
     * @type {ServiceSpecUpdateConfig}
     * @memberof ServiceSpec
     */
    updateConfig?: ServiceSpecUpdateConfig;
    /**
     * 
     * @type {ServiceSpecRollbackConfig}
     * @memberof ServiceSpec
     */
    rollbackConfig?: ServiceSpecRollbackConfig;
    /**
     * Specifies which networks the service should attach to.  Deprecated: This field is deprecated since v1.44. The Networks field in TaskSpec should be used instead. 
     * @type {Array<NetworkAttachmentConfig>}
     * @memberof ServiceSpec
     */
    networks?: Array<NetworkAttachmentConfig>;
    /**
     * 
     * @type {EndpointSpec}
     * @memberof ServiceSpec
     */
    endpointSpec?: EndpointSpec;
}

/**
 * Scheduling mode for the service.
 * @export
 * @interface ServiceSpecMode
 */
export interface ServiceSpecMode {
    /**
     * 
     * @type {ServiceSpecModeReplicated}
     * @memberof ServiceSpecMode
     */
    replicated?: ServiceSpecModeReplicated;
    /**
     * 
     * @type {any}
     * @memberof ServiceSpecMode
     */
    global?: any;
    /**
     * 
     * @type {ServiceSpecModeReplicatedJob}
     * @memberof ServiceSpecMode
     */
    replicatedJob?: ServiceSpecModeReplicatedJob;
    /**
     * The mode used for services which run a task to the completed state on each valid node. 
     * @type {any}
     * @memberof ServiceSpecMode
     */
    globalJob?: any;
}

/**
 * 
 * @export
 * @interface ServiceSpecModeReplicated
 */
export interface ServiceSpecModeReplicated {
    /**
     * 
     * @type {number}
     * @memberof ServiceSpecModeReplicated
     */
    replicas?: number;
}

/**
 * The mode used for services with a finite number of tasks that run to a completed state. 
 * @export
 * @interface ServiceSpecModeReplicatedJob
 */
export interface ServiceSpecModeReplicatedJob {
    /**
     * The maximum number of replicas to run simultaneously. 
     * @type {number}
     * @memberof ServiceSpecModeReplicatedJob
     */
    maxConcurrent?: number;
    /**
     * The total number of replicas desired to reach the Completed state. If unset, will default to the value of `MaxConcurrent` 
     * @type {number}
     * @memberof ServiceSpecModeReplicatedJob
     */
    totalCompletions?: number;
}

/**
 * Specification for the rollback strategy of the service.
 * @export
 * @interface ServiceSpecRollbackConfig
 */
export interface ServiceSpecRollbackConfig {
    /**
     * Maximum number of tasks to be rolled back in one iteration (0 means unlimited parallelism). 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    parallelism?: number;
    /**
     * Amount of time between rollback iterations, in nanoseconds. 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    delay?: number;
    /**
     * Action to take if an rolled back task fails to run, or stops running during the rollback. 
     * @type {string}
     * @memberof ServiceSpecRollbackConfig
     */
    failureAction?: ServiceSpecRollbackConfig.FailureActionEnum;
    /**
     * Amount of time to monitor each rolled back task for failures, in nanoseconds. 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    monitor?: number;
    /**
     * The fraction of tasks that may fail during a rollback before the failure action is invoked, specified as a floating point number between 0 and 1. 
     * @type {number}
     * @memberof ServiceSpecRollbackConfig
     */
    maxFailureRatio?: number;
    /**
     * The order of operations when rolling back a task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. 
     * @type {string}
     * @memberof ServiceSpecRollbackConfig
     */
    order?: ServiceSpecRollbackConfig.OrderEnum;
}

/**
 * @export
 * @namespace ServiceSpecRollbackConfig
 */
export namespace ServiceSpecRollbackConfig {
    /**
     * @export
     * @enum {string}
     */
    export enum FailureActionEnum {
        Continue = <any> 'continue',
        Pause = <any> 'pause',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OrderEnum {
        StopFirst = <any> 'stop-first',
        StartFirst = <any> 'start-first',
    }
}

/**
 * Specification for the update strategy of the service.
 * @export
 * @interface ServiceSpecUpdateConfig
 */
export interface ServiceSpecUpdateConfig {
    /**
     * Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism). 
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    parallelism?: number;
    /**
     * Amount of time between updates, in nanoseconds.
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    delay?: number;
    /**
     * Action to take if an updated task fails to run, or stops running during the update. 
     * @type {string}
     * @memberof ServiceSpecUpdateConfig
     */
    failureAction?: ServiceSpecUpdateConfig.FailureActionEnum;
    /**
     * Amount of time to monitor each updated task for failures, in nanoseconds. 
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    monitor?: number;
    /**
     * The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1. 
     * @type {number}
     * @memberof ServiceSpecUpdateConfig
     */
    maxFailureRatio?: number;
    /**
     * The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down. 
     * @type {string}
     * @memberof ServiceSpecUpdateConfig
     */
    order?: ServiceSpecUpdateConfig.OrderEnum;
}

/**
 * @export
 * @namespace ServiceSpecUpdateConfig
 */
export namespace ServiceSpecUpdateConfig {
    /**
     * @export
     * @enum {string}
     */
    export enum FailureActionEnum {
        Continue = <any> 'continue',
        Pause = <any> 'pause',
        Rollback = <any> 'rollback',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum OrderEnum {
        StopFirst = <any> 'stop-first',
        StartFirst = <any> 'start-first',
    }
}

/**
 * 
 * @export
 * @interface ServiceUpdateResponse
 */
export interface ServiceUpdateResponse {
    /**
     * Optional warning messages
     * @type {Array<string>}
     * @memberof ServiceUpdateResponse
     */
    warnings?: Array<string>;
}

/**
 * The status of a service update.
 * @export
 * @interface ServiceUpdateStatus
 */
export interface ServiceUpdateStatus {
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    state?: ServiceUpdateStatus.StateEnum;
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    startedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    completedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof ServiceUpdateStatus
     */
    message?: string;
}

/**
 * @export
 * @namespace ServiceUpdateStatus
 */
export namespace ServiceUpdateStatus {
    /**
     * @export
     * @enum {string}
     */
    export enum StateEnum {
        Updating = <any> 'updating',
        Paused = <any> 'paused',
        Completed = <any> 'completed',
    }
}

/**
 * 
 * @export
 * @interface ServicesCreateBody
 */
export interface ServicesCreateBody extends ServiceSpec {
}

/**
 * 
 * @export
 * @interface Swarm
 */
export interface Swarm extends ClusterInfo {
    /**
     * 
     * @type {JoinTokens}
     * @memberof Swarm
     */
    joinTokens?: JoinTokens;
}

/**
 * Represents generic information about swarm. 
 * @export
 * @interface SwarmInfo
 */
export interface SwarmInfo {
    /**
     * Unique identifier of for this node in the swarm.
     * @type {string}
     * @memberof SwarmInfo
     */
    nodeID?: string;
    /**
     * IP address at which this node can be reached by other nodes in the swarm. 
     * @type {string}
     * @memberof SwarmInfo
     */
    nodeAddr?: string;
    /**
     * 
     * @type {LocalNodeState}
     * @memberof SwarmInfo
     */
    localNodeState?: LocalNodeState;
    /**
     * 
     * @type {boolean}
     * @memberof SwarmInfo
     */
    controlAvailable?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SwarmInfo
     */
    error?: string;
    /**
     * List of ID's and addresses of other managers in the swarm. 
     * @type {Array<PeerNode>}
     * @memberof SwarmInfo
     */
    remoteManagers?: Array<PeerNode>;
    /**
     * Total number of nodes in the swarm.
     * @type {number}
     * @memberof SwarmInfo
     */
    nodes?: number;
    /**
     * Total number of managers in the swarm.
     * @type {number}
     * @memberof SwarmInfo
     */
    managers?: number;
    /**
     * 
     * @type {ClusterInfo}
     * @memberof SwarmInfo
     */
    cluster?: ClusterInfo;
}

/**
 * 
 * @export
 * @interface SwarmInitRequest
 */
export interface SwarmInitRequest {
    /**
     * Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. 
     * @type {string}
     * @memberof SwarmInitRequest
     */
    listenAddr?: string;
    /**
     * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
     * @type {string}
     * @memberof SwarmInitRequest
     */
    advertiseAddr?: string;
    /**
     * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
     * @type {string}
     * @memberof SwarmInitRequest
     */
    dataPathAddr?: string;
    /**
     * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. 
     * @type {number}
     * @memberof SwarmInitRequest
     */
    dataPathPort?: number;
    /**
     * Default Address Pool specifies default subnet pools for global scope networks. 
     * @type {Array<string>}
     * @memberof SwarmInitRequest
     */
    defaultAddrPool?: Array<string>;
    /**
     * Force creation of a new swarm.
     * @type {boolean}
     * @memberof SwarmInitRequest
     */
    forceNewCluster?: boolean;
    /**
     * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
     * @type {number}
     * @memberof SwarmInitRequest
     */
    subnetSize?: number;
    /**
     * 
     * @type {SwarmSpec}
     * @memberof SwarmInitRequest
     */
    spec?: SwarmSpec;
}

/**
 * 
 * @export
 * @interface SwarmInitRequest1
 */
export interface SwarmInitRequest1 {
    /**
     * Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used. 
     * @type {string}
     * @memberof SwarmInitRequest1
     */
    listenAddr?: string;
    /**
     * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
     * @type {string}
     * @memberof SwarmInitRequest1
     */
    advertiseAddr?: string;
    /**
     * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
     * @type {string}
     * @memberof SwarmInitRequest1
     */
    dataPathAddr?: string;
    /**
     * DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used. 
     * @type {number}
     * @memberof SwarmInitRequest1
     */
    dataPathPort?: number;
    /**
     * Default Address Pool specifies default subnet pools for global scope networks. 
     * @type {Array<string>}
     * @memberof SwarmInitRequest1
     */
    defaultAddrPool?: Array<string>;
    /**
     * Force creation of a new swarm.
     * @type {boolean}
     * @memberof SwarmInitRequest1
     */
    forceNewCluster?: boolean;
    /**
     * SubnetSize specifies the subnet size of the networks created from the default subnet pool. 
     * @type {number}
     * @memberof SwarmInitRequest1
     */
    subnetSize?: number;
    /**
     * 
     * @type {SwarmSpec}
     * @memberof SwarmInitRequest1
     */
    spec?: SwarmSpec;
}

/**
 * 
 * @export
 * @interface SwarmJoinRequest
 */
export interface SwarmJoinRequest {
    /**
     * Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). 
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    listenAddr?: string;
    /**
     * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    advertiseAddr?: string;
    /**
     * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    dataPathAddr?: string;
    /**
     * Addresses of manager nodes already participating in the swarm. 
     * @type {Array<string>}
     * @memberof SwarmJoinRequest
     */
    remoteAddrs?: Array<string>;
    /**
     * Secret token for joining this swarm.
     * @type {string}
     * @memberof SwarmJoinRequest
     */
    joinToken?: string;
}

/**
 * 
 * @export
 * @interface SwarmJoinRequest1
 */
export interface SwarmJoinRequest1 {
    /**
     * Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). 
     * @type {string}
     * @memberof SwarmJoinRequest1
     */
    listenAddr?: string;
    /**
     * Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible. 
     * @type {string}
     * @memberof SwarmJoinRequest1
     */
    advertiseAddr?: string;
    /**
     * Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster. 
     * @type {string}
     * @memberof SwarmJoinRequest1
     */
    dataPathAddr?: string;
    /**
     * Addresses of manager nodes already participating in the swarm. 
     * @type {Array<string>}
     * @memberof SwarmJoinRequest1
     */
    remoteAddrs?: Array<string>;
    /**
     * Secret token for joining this swarm.
     * @type {string}
     * @memberof SwarmJoinRequest1
     */
    joinToken?: string;
}

/**
 * User modifiable swarm configuration.
 * @export
 * @interface SwarmSpec
 */
export interface SwarmSpec {
    /**
     * Name of the swarm.
     * @type {string}
     * @memberof SwarmSpec
     */
    name?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof SwarmSpec
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {SwarmSpecOrchestration}
     * @memberof SwarmSpec
     */
    orchestration?: SwarmSpecOrchestration;
    /**
     * 
     * @type {SwarmSpecRaft}
     * @memberof SwarmSpec
     */
    raft?: SwarmSpecRaft;
    /**
     * 
     * @type {SwarmSpecDispatcher}
     * @memberof SwarmSpec
     */
    dispatcher?: SwarmSpecDispatcher;
    /**
     * 
     * @type {SwarmSpecCAConfig}
     * @memberof SwarmSpec
     */
    cAConfig?: SwarmSpecCAConfig;
    /**
     * 
     * @type {SwarmSpecEncryptionConfig}
     * @memberof SwarmSpec
     */
    encryptionConfig?: SwarmSpecEncryptionConfig;
    /**
     * 
     * @type {SwarmSpecTaskDefaults}
     * @memberof SwarmSpec
     */
    taskDefaults?: SwarmSpecTaskDefaults;
}

/**
 * CA configuration.
 * @export
 * @interface SwarmSpecCAConfig
 */
export interface SwarmSpecCAConfig {
    /**
     * The duration node certificates are issued for.
     * @type {number}
     * @memberof SwarmSpecCAConfig
     */
    nodeCertExpiry?: number;
    /**
     * Configuration for forwarding signing requests to an external certificate authority. 
     * @type {Array<SwarmSpecCAConfigExternalCAs>}
     * @memberof SwarmSpecCAConfig
     */
    externalCAs?: Array<SwarmSpecCAConfigExternalCAs>;
    /**
     * The desired signing CA certificate for all swarm node TLS leaf certificates, in PEM format. 
     * @type {string}
     * @memberof SwarmSpecCAConfig
     */
    signingCACert?: string;
    /**
     * The desired signing CA key for all swarm node TLS leaf certificates, in PEM format. 
     * @type {string}
     * @memberof SwarmSpecCAConfig
     */
    signingCAKey?: string;
    /**
     * An integer whose purpose is to force swarm to generate a new signing CA certificate and key, if none have been specified in `SigningCACert` and `SigningCAKey` 
     * @type {number}
     * @memberof SwarmSpecCAConfig
     */
    forceRotate?: number;
}

/**
 * 
 * @export
 * @interface SwarmSpecCAConfigExternalCAs
 */
export interface SwarmSpecCAConfigExternalCAs {
    /**
     * Protocol for communication with the external CA (currently only `cfssl` is supported). 
     * @type {string}
     * @memberof SwarmSpecCAConfigExternalCAs
     */
    protocol?: SwarmSpecCAConfigExternalCAs.ProtocolEnum;
    /**
     * URL where certificate signing requests should be sent. 
     * @type {string}
     * @memberof SwarmSpecCAConfigExternalCAs
     */
    URL?: string;
    /**
     * An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver. 
     * @type {{ [key: string]: string; }}
     * @memberof SwarmSpecCAConfigExternalCAs
     */
    options?: { [key: string]: string; };
    /**
     * The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided). 
     * @type {string}
     * @memberof SwarmSpecCAConfigExternalCAs
     */
    cACert?: string;
}

/**
 * @export
 * @namespace SwarmSpecCAConfigExternalCAs
 */
export namespace SwarmSpecCAConfigExternalCAs {
    /**
     * @export
     * @enum {string}
     */
    export enum ProtocolEnum {
        Cfssl = <any> 'cfssl',
    }
}

/**
 * Dispatcher configuration.
 * @export
 * @interface SwarmSpecDispatcher
 */
export interface SwarmSpecDispatcher {
    /**
     * The delay for an agent to send a heartbeat to the dispatcher. 
     * @type {number}
     * @memberof SwarmSpecDispatcher
     */
    heartbeatPeriod?: number;
}

/**
 * Parameters related to encryption-at-rest.
 * @export
 * @interface SwarmSpecEncryptionConfig
 */
export interface SwarmSpecEncryptionConfig {
    /**
     * If set, generate a key and use it to lock data stored on the managers. 
     * @type {boolean}
     * @memberof SwarmSpecEncryptionConfig
     */
    autoLockManagers?: boolean;
}

/**
 * Orchestration configuration.
 * @export
 * @interface SwarmSpecOrchestration
 */
export interface SwarmSpecOrchestration {
    /**
     * The number of historic tasks to keep per instance or node. If negative, never remove completed or failed tasks. 
     * @type {number}
     * @memberof SwarmSpecOrchestration
     */
    taskHistoryRetentionLimit?: number;
}

/**
 * Raft configuration.
 * @export
 * @interface SwarmSpecRaft
 */
export interface SwarmSpecRaft {
    /**
     * The number of log entries between snapshots.
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    snapshotInterval?: number;
    /**
     * The number of snapshots to keep beyond the current snapshot. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    keepOldSnapshots?: number;
    /**
     * The number of log entries to keep around to sync up slow followers after a snapshot is created. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    logEntriesForSlowFollowers?: number;
    /**
     * The number of ticks that a follower will wait for a message from the leader before becoming a candidate and starting an election. `ElectionTick` must be greater than `HeartbeatTick`.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    electionTick?: number;
    /**
     * The number of ticks between heartbeats. Every HeartbeatTick ticks, the leader will send a heartbeat to the followers.  A tick currently defaults to one second, so these translate directly to seconds currently, but this is NOT guaranteed. 
     * @type {number}
     * @memberof SwarmSpecRaft
     */
    heartbeatTick?: number;
}

/**
 * Defaults for creating tasks in this cluster.
 * @export
 * @interface SwarmSpecTaskDefaults
 */
export interface SwarmSpecTaskDefaults {
    /**
     * 
     * @type {SwarmSpecTaskDefaultsLogDriver}
     * @memberof SwarmSpecTaskDefaults
     */
    logDriver?: SwarmSpecTaskDefaultsLogDriver;
}

/**
 * The log driver to use for tasks created in the orchestrator if unspecified by a service.  Updating this value only affects new tasks. Existing tasks continue to use their previously configured log driver until recreated. 
 * @export
 * @interface SwarmSpecTaskDefaultsLogDriver
 */
export interface SwarmSpecTaskDefaultsLogDriver {
    /**
     * The log driver to use as a default for new tasks. 
     * @type {string}
     * @memberof SwarmSpecTaskDefaultsLogDriver
     */
    name?: string;
    /**
     * Driver-specific options for the selectd log driver, specified as key/value pairs. 
     * @type {{ [key: string]: string; }}
     * @memberof SwarmSpecTaskDefaultsLogDriver
     */
    options?: { [key: string]: string; };
}

/**
 * 
 * @export
 * @interface SwarmUnlockRequest
 */
export interface SwarmUnlockRequest {
    /**
     * The swarm's unlock key.
     * @type {string}
     * @memberof SwarmUnlockRequest
     */
    unlockKey?: string;
}

/**
 * 
 * @export
 * @interface SystemAuthResponse
 */
export interface SystemAuthResponse {
    /**
     * The status of the authentication
     * @type {string}
     * @memberof SystemAuthResponse
     */
    status: string;
    /**
     * An opaque token used to authenticate a user after a successful login
     * @type {string}
     * @memberof SystemAuthResponse
     */
    identityToken?: string;
}

/**
 * 
 * @export
 * @interface SystemDataUsageResponse
 */
export interface SystemDataUsageResponse {
    /**
     * 
     * @type {number}
     * @memberof SystemDataUsageResponse
     */
    layersSize?: number;
    /**
     * 
     * @type {Array<ImageSummary>}
     * @memberof SystemDataUsageResponse
     */
    images?: Array<ImageSummary>;
    /**
     * 
     * @type {Array<ContainerSummary>}
     * @memberof SystemDataUsageResponse
     */
    containers?: Array<ContainerSummary>;
    /**
     * 
     * @type {Array<Volume>}
     * @memberof SystemDataUsageResponse
     */
    volumes?: Array<Volume>;
    /**
     * 
     * @type {Array<BuildCache>}
     * @memberof SystemDataUsageResponse
     */
    buildCache?: Array<BuildCache>;
}

/**
 * 
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     * Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable. 
     * @type {string}
     * @memberof SystemInfo
     */
    ID?: string;
    /**
     * Total number of containers on the host.
     * @type {number}
     * @memberof SystemInfo
     */
    containers?: number;
    /**
     * Number of containers with status `\"running\"`. 
     * @type {number}
     * @memberof SystemInfo
     */
    containersRunning?: number;
    /**
     * Number of containers with status `\"paused\"`. 
     * @type {number}
     * @memberof SystemInfo
     */
    containersPaused?: number;
    /**
     * Number of containers with status `\"stopped\"`. 
     * @type {number}
     * @memberof SystemInfo
     */
    containersStopped?: number;
    /**
     * Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted. 
     * @type {number}
     * @memberof SystemInfo
     */
    images?: number;
    /**
     * Name of the storage driver in use.
     * @type {string}
     * @memberof SystemInfo
     */
    driver?: string;
    /**
     * Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice. 
     * @type {Array<Array<string>>}
     * @memberof SystemInfo
     */
    driverStatus?: Array<Array<string>>;
    /**
     * Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows. 
     * @type {string}
     * @memberof SystemInfo
     */
    dockerRootDir?: string;
    /**
     * 
     * @type {PluginsInfo}
     * @memberof SystemInfo
     */
    plugins?: PluginsInfo;
    /**
     * Indicates if the host has memory limit support enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    memoryLimit?: boolean;
    /**
     * Indicates if the host has memory swap limit support enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    swapLimit?: boolean;
    /**
     * Indicates if the host has kernel memory TCP limit support enabled. This field is omitted if not supported.  Kernel memory TCP limits are not supported when using cgroups v2, which does not support the corresponding `memory.kmem.tcp.limit_in_bytes` cgroup. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    kernelMemoryTCP?: boolean;
    /**
     * Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    cpuCfsPeriod?: boolean;
    /**
     * Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    cpuCfsQuota?: boolean;
    /**
     * Indicates if CPU Shares limiting is supported by the host. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    cPUShares?: boolean;
    /**
     * Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt) 
     * @type {boolean}
     * @memberof SystemInfo
     */
    cPUSet?: boolean;
    /**
     * Indicates if the host kernel has PID limit support enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    pidsLimit?: boolean;
    /**
     * Indicates if OOM killer disable is supported on the host.
     * @type {boolean}
     * @memberof SystemInfo
     */
    oomKillDisable?: boolean;
    /**
     * Indicates IPv4 forwarding is enabled.
     * @type {boolean}
     * @memberof SystemInfo
     */
    iPv4Forwarding?: boolean;
    /**
     * Indicates if `bridge-nf-call-iptables` is available on the host.
     * @type {boolean}
     * @memberof SystemInfo
     */
    bridgeNfIptables?: boolean;
    /**
     * Indicates if `bridge-nf-call-ip6tables` is available on the host.
     * @type {boolean}
     * @memberof SystemInfo
     */
    bridgeNfIp6tables?: boolean;
    /**
     * Indicates if the daemon is running in debug-mode / with debug-level logging enabled. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    debug?: boolean;
    /**
     * The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled. 
     * @type {number}
     * @memberof SystemInfo
     */
    nFd?: number;
    /**
     * The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled. 
     * @type {number}
     * @memberof SystemInfo
     */
    nGoroutines?: number;
    /**
     * Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds. 
     * @type {string}
     * @memberof SystemInfo
     */
    systemTime?: string;
    /**
     * The logging driver to use as a default for new containers. 
     * @type {string}
     * @memberof SystemInfo
     */
    loggingDriver?: string;
    /**
     * The driver to use for managing cgroups. 
     * @type {string}
     * @memberof SystemInfo
     */
    cgroupDriver?: SystemInfo.CgroupDriverEnum;
    /**
     * The version of the cgroup. 
     * @type {string}
     * @memberof SystemInfo
     */
    cgroupVersion?: SystemInfo.CgroupVersionEnum;
    /**
     * Number of event listeners subscribed.
     * @type {number}
     * @memberof SystemInfo
     */
    nEventsListener?: number;
    /**
     * Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_. 
     * @type {string}
     * @memberof SystemInfo
     */
    kernelVersion?: string;
    /**
     * Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\" 
     * @type {string}
     * @memberof SystemInfo
     */
    operatingSystem?: string;
    /**
     * Version of the host's operating system  <p><br /></p>  > **Note**: The information returned in this field, including its > very existence, and the formatting of values, should not be considered > stable, and may change without notice. 
     * @type {string}
     * @memberof SystemInfo
     */
    oSVersion?: string;
    /**
     * Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment). 
     * @type {string}
     * @memberof SystemInfo
     */
    oSType?: string;
    /**
     * Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://go.dev/doc/install/source#environment). 
     * @type {string}
     * @memberof SystemInfo
     */
    architecture?: string;
    /**
     * The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected. 
     * @type {number}
     * @memberof SystemInfo
     */
    NCPU?: number;
    /**
     * Total amount of physical memory available on the host, in bytes. 
     * @type {number}
     * @memberof SystemInfo
     */
    memTotal?: number;
    /**
     * Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud. 
     * @type {string}
     * @memberof SystemInfo
     */
    indexServerAddress?: string;
    /**
     * 
     * @type {RegistryServiceConfig}
     * @memberof SystemInfo
     */
    registryConfig?: RegistryServiceConfig;
    /**
     * 
     * @type {GenericResources}
     * @memberof SystemInfo
     */
    genericResources?: GenericResources;
    /**
     * HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. 
     * @type {string}
     * @memberof SystemInfo
     */
    httpProxy?: string;
    /**
     * HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable. Credentials ([user info component](https://tools.ietf.org/html/rfc3986#section-3.2.1)) in the proxy URL are masked in the API response.  Containers do not automatically inherit this configuration. 
     * @type {string}
     * @memberof SystemInfo
     */
    httpsProxy?: string;
    /**
     * Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration. 
     * @type {string}
     * @memberof SystemInfo
     */
    noProxy?: string;
    /**
     * Hostname of the host.
     * @type {string}
     * @memberof SystemInfo
     */
    name?: string;
    /**
     * User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    labels?: Array<string>;
    /**
     * Indicates if experimental features are enabled on the daemon. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    experimentalBuild?: boolean;
    /**
     * Version string of the daemon. 
     * @type {string}
     * @memberof SystemInfo
     */
    serverVersion?: string;
    /**
     * List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here. 
     * @type {{ [key: string]: Runtime; }}
     * @memberof SystemInfo
     */
    runtimes?: { [key: string]: Runtime; };
    /**
     * Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time. 
     * @type {string}
     * @memberof SystemInfo
     */
    defaultRuntime?: string;
    /**
     * 
     * @type {SwarmInfo}
     * @memberof SystemInfo
     */
    swarm?: SwarmInfo;
    /**
     * Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected. 
     * @type {boolean}
     * @memberof SystemInfo
     */
    liveRestoreEnabled?: boolean;
    /**
     * Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms. 
     * @type {string}
     * @memberof SystemInfo
     */
    isolation?: SystemInfo.IsolationEnum;
    /**
     * Name and, optional, path of the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result. 
     * @type {string}
     * @memberof SystemInfo
     */
    initBinary?: string;
    /**
     * 
     * @type {Commit}
     * @memberof SystemInfo
     */
    containerdCommit?: Commit;
    /**
     * 
     * @type {Commit}
     * @memberof SystemInfo
     */
    runcCommit?: Commit;
    /**
     * 
     * @type {Commit}
     * @memberof SystemInfo
     */
    initCommit?: Commit;
    /**
     * List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, user-namespaces (userns), rootless and no-new-privileges.  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    securityOptions?: Array<string>;
    /**
     * Reports a summary of the product license on the daemon.  If a commercial license has been applied to the daemon, information such as number of nodes, and expiration are included. 
     * @type {string}
     * @memberof SystemInfo
     */
    productLicense?: string;
    /**
     * List of custom default address pools for local networks, which can be specified in the daemon.json file or dockerd option.  Example: a Base \"10.10.0.0/16\" with Size 24 will define the set of 256 10.10.[0-255].0/24 address pools. 
     * @type {Array<SystemInfoDefaultAddressPools>}
     * @memberof SystemInfo
     */
    defaultAddressPools?: Array<SystemInfoDefaultAddressPools>;
    /**
     * List of warnings / informational messages about missing features, or issues related to the daemon configuration.  These messages can be printed by the client as information to the user. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    warnings?: Array<string>;
    /**
     * List of directories where (Container Device Interface) CDI specifications are located.  These specifications define vendor-specific modifications to an OCI runtime specification for a container being created.  An empty list indicates that CDI device injection is disabled.  Note that since using CDI device injection requires the daemon to have experimental enabled. For non-experimental daemons an empty list will always be returned. 
     * @type {Array<string>}
     * @memberof SystemInfo
     */
    cDISpecDirs?: Array<string>;
}

/**
 * @export
 * @namespace SystemInfo
 */
export namespace SystemInfo {
    /**
     * @export
     * @enum {string}
     */
    export enum CgroupDriverEnum {
        Cgroupfs = <any> 'cgroupfs',
        Systemd = <any> 'systemd',
        None = <any> 'none',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum CgroupVersionEnum {
        _1 = <any> '1',
        _2 = <any> '2',
    }
    /**
     * @export
     * @enum {string}
     */
    export enum IsolationEnum {
        Default = <any> 'default',
        Hyperv = <any> 'hyperv',
        Process = <any> 'process',
    }
}

/**
 * 
 * @export
 * @interface SystemInfoDefaultAddressPools
 */
export interface SystemInfoDefaultAddressPools {
    /**
     * The network address in CIDR format
     * @type {string}
     * @memberof SystemInfoDefaultAddressPools
     */
    base?: string;
    /**
     * The network pool size
     * @type {number}
     * @memberof SystemInfoDefaultAddressPools
     */
    size?: number;
}

/**
 * Response of Engine API: GET \"/version\" 
 * @export
 * @interface SystemVersion
 */
export interface SystemVersion {
    /**
     * 
     * @type {SystemVersionPlatform}
     * @memberof SystemVersion
     */
    platform?: SystemVersionPlatform;
    /**
     * Information about system components 
     * @type {Array<SystemVersionComponents>}
     * @memberof SystemVersion
     */
    components?: Array<SystemVersionComponents>;
    /**
     * The version of the daemon
     * @type {string}
     * @memberof SystemVersion
     */
    version?: string;
    /**
     * The default (and highest) API version that is supported by the daemon 
     * @type {string}
     * @memberof SystemVersion
     */
    apiVersion?: string;
    /**
     * The minimum API version that is supported by the daemon 
     * @type {string}
     * @memberof SystemVersion
     */
    minAPIVersion?: string;
    /**
     * The Git commit of the source code that was used to build the daemon 
     * @type {string}
     * @memberof SystemVersion
     */
    gitCommit?: string;
    /**
     * The version Go used to compile the daemon, and the version of the Go runtime in use. 
     * @type {string}
     * @memberof SystemVersion
     */
    goVersion?: string;
    /**
     * The operating system that the daemon is running on (\"linux\" or \"windows\") 
     * @type {string}
     * @memberof SystemVersion
     */
    os?: string;
    /**
     * The architecture that the daemon is running on 
     * @type {string}
     * @memberof SystemVersion
     */
    arch?: string;
    /**
     * The kernel version (`uname -r`) that the daemon is running on.  This field is omitted when empty. 
     * @type {string}
     * @memberof SystemVersion
     */
    kernelVersion?: string;
    /**
     * Indicates if the daemon is started with experimental features enabled.  This field is omitted when empty / false. 
     * @type {boolean}
     * @memberof SystemVersion
     */
    experimental?: boolean;
    /**
     * The date and time that the daemon was compiled. 
     * @type {string}
     * @memberof SystemVersion
     */
    buildTime?: string;
}

/**
 * 
 * @export
 * @interface SystemVersionComponents
 */
export interface SystemVersionComponents {
    /**
     * Name of the component 
     * @type {string}
     * @memberof SystemVersionComponents
     */
    name: string;
    /**
     * Version of the component 
     * @type {string}
     * @memberof SystemVersionComponents
     */
    version: string;
    /**
     * Key/value pairs of strings with additional information about the component. These values are intended for informational purposes only, and their content is not defined, and not part of the API specification.  These messages can be printed by the client as information to the user. 
     * @type {any}
     * @memberof SystemVersionComponents
     */
    details?: any;
}

/**
 * 
 * @export
 * @interface SystemVersionPlatform
 */
export interface SystemVersionPlatform {
    /**
     * 
     * @type {string}
     * @memberof SystemVersionPlatform
     */
    name: string;
}

/**
 * Information about the issuer of leaf TLS certificates and the trusted root CA certificate. 
 * @export
 * @interface TLSInfo
 */
export interface TLSInfo {
    /**
     * The root CA certificate(s) that are used to validate leaf TLS certificates. 
     * @type {string}
     * @memberof TLSInfo
     */
    trustRoot?: string;
    /**
     * The base64-url-safe-encoded raw subject bytes of the issuer.
     * @type {string}
     * @memberof TLSInfo
     */
    certIssuerSubject?: string;
    /**
     * The base64-url-safe-encoded raw public key bytes of the issuer. 
     * @type {string}
     * @memberof TLSInfo
     */
    certIssuerPublicKey?: string;
}

/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * The ID of the task.
     * @type {string}
     * @memberof Task
     */
    ID?: string;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Task
     */
    version?: ObjectVersion;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    updatedAt?: string;
    /**
     * Name of the task.
     * @type {string}
     * @memberof Task
     */
    name?: string;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof Task
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {TaskSpec}
     * @memberof Task
     */
    spec?: TaskSpec;
    /**
     * The ID of the service this task is part of.
     * @type {string}
     * @memberof Task
     */
    serviceID?: string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    slot?: number;
    /**
     * The ID of the node that this task is on.
     * @type {string}
     * @memberof Task
     */
    nodeID?: string;
    /**
     * 
     * @type {GenericResources}
     * @memberof Task
     */
    assignedGenericResources?: GenericResources;
    /**
     * 
     * @type {TaskStatus}
     * @memberof Task
     */
    status?: TaskStatus;
    /**
     * 
     * @type {TaskState}
     * @memberof Task
     */
    desiredState?: TaskState;
    /**
     * 
     * @type {ObjectVersion}
     * @memberof Task
     */
    jobIteration?: ObjectVersion;
}

/**
 * User modifiable task configuration.
 * @export
 * @interface TaskSpec
 */
export interface TaskSpec {
    /**
     * 
     * @type {TaskSpecPluginSpec}
     * @memberof TaskSpec
     */
    pluginSpec?: TaskSpecPluginSpec;
    /**
     * 
     * @type {TaskSpecContainerSpec}
     * @memberof TaskSpec
     */
    containerSpec?: TaskSpecContainerSpec;
    /**
     * 
     * @type {TaskSpecNetworkAttachmentSpec}
     * @memberof TaskSpec
     */
    networkAttachmentSpec?: TaskSpecNetworkAttachmentSpec;
    /**
     * 
     * @type {TaskSpecResources}
     * @memberof TaskSpec
     */
    resources?: TaskSpecResources;
    /**
     * 
     * @type {TaskSpecRestartPolicy}
     * @memberof TaskSpec
     */
    restartPolicy?: TaskSpecRestartPolicy;
    /**
     * 
     * @type {TaskSpecPlacement}
     * @memberof TaskSpec
     */
    placement?: TaskSpecPlacement;
    /**
     * A counter that triggers an update even if no relevant parameters have been changed. 
     * @type {number}
     * @memberof TaskSpec
     */
    forceUpdate?: number;
    /**
     * Runtime is the type of runtime specified for the task executor. 
     * @type {string}
     * @memberof TaskSpec
     */
    runtime?: string;
    /**
     * Specifies which networks the service should attach to.
     * @type {Array<NetworkAttachmentConfig>}
     * @memberof TaskSpec
     */
    networks?: Array<NetworkAttachmentConfig>;
    /**
     * 
     * @type {TaskSpecLogDriver}
     * @memberof TaskSpec
     */
    logDriver?: TaskSpecLogDriver;
}

/**
 * Container spec for the service.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 * @export
 * @interface TaskSpecContainerSpec
 */
export interface TaskSpecContainerSpec {
    /**
     * The image name to use for the container
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    image?: string;
    /**
     * User-defined key/value data.
     * @type {{ [key: string]: string; }}
     * @memberof TaskSpecContainerSpec
     */
    labels?: { [key: string]: string; };
    /**
     * The command to be run in the image.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    command?: Array<string>;
    /**
     * Arguments to the command.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    args?: Array<string>;
    /**
     * The hostname to use for the container, as a valid [RFC 1123](https://tools.ietf.org/html/rfc1123) hostname. 
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    hostname?: string;
    /**
     * A list of environment variables in the form `VAR=value`. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    env?: Array<string>;
    /**
     * The working directory for commands to run in.
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    dir?: string;
    /**
     * The user inside the container.
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    user?: string;
    /**
     * A list of additional groups that the container process will run as. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    groups?: Array<string>;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivileges}
     * @memberof TaskSpecContainerSpec
     */
    privileges?: TaskSpecContainerSpecPrivileges;
    /**
     * Whether a pseudo-TTY should be allocated.
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    TTY?: boolean;
    /**
     * Open `stdin`
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    openStdin?: boolean;
    /**
     * Mount the container's root filesystem as read only.
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    readOnly?: boolean;
    /**
     * Specification for mounts to be added to containers created as part of the service. 
     * @type {Array<Mount>}
     * @memberof TaskSpecContainerSpec
     */
    mounts?: Array<Mount>;
    /**
     * Signal to stop the container.
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    stopSignal?: string;
    /**
     * Amount of time to wait for the container to terminate before forcefully killing it. 
     * @type {number}
     * @memberof TaskSpecContainerSpec
     */
    stopGracePeriod?: number;
    /**
     * 
     * @type {HealthConfig}
     * @memberof TaskSpecContainerSpec
     */
    healthCheck?: HealthConfig;
    /**
     * A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...] 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    hosts?: Array<string>;
    /**
     * 
     * @type {TaskSpecContainerSpecDNSConfig}
     * @memberof TaskSpecContainerSpec
     */
    dNSConfig?: TaskSpecContainerSpecDNSConfig;
    /**
     * Secrets contains references to zero or more secrets that will be exposed to the service. 
     * @type {Array<TaskSpecContainerSpecSecrets>}
     * @memberof TaskSpecContainerSpec
     */
    secrets?: Array<TaskSpecContainerSpecSecrets>;
    /**
     * Configs contains references to zero or more configs that will be exposed to the service. 
     * @type {Array<TaskSpecContainerSpecConfigs>}
     * @memberof TaskSpecContainerSpec
     */
    configs?: Array<TaskSpecContainerSpecConfigs>;
    /**
     * Isolation technology of the containers running the service. (Windows only) 
     * @type {string}
     * @memberof TaskSpecContainerSpec
     */
    isolation?: TaskSpecContainerSpec.IsolationEnum;
    /**
     * Run an init inside the container that forwards signals and reaps processes. This field is omitted if empty, and the default (as configured on the daemon) is used. 
     * @type {boolean}
     * @memberof TaskSpecContainerSpec
     */
    init?: boolean;
    /**
     * Set kernel namedspaced parameters (sysctls) in the container. The Sysctls option on services accepts the same sysctls as the are supported on containers. Note that while the same sysctls are supported, no guarantees or checks are made about their suitability for a clustered environment, and it's up to the user to determine whether a given sysctl will work properly in a Service. 
     * @type {{ [key: string]: string; }}
     * @memberof TaskSpecContainerSpec
     */
    sysctls?: { [key: string]: string; };
    /**
     * A list of kernel capabilities to add to the default set for the container. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    capabilityAdd?: Array<string>;
    /**
     * A list of kernel capabilities to drop from the default set for the container. 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpec
     */
    capabilityDrop?: Array<string>;
    /**
     * A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\" 
     * @type {Array<ResourcesUlimits>}
     * @memberof TaskSpecContainerSpec
     */
    ulimits?: Array<ResourcesUlimits>;
}

/**
 * @export
 * @namespace TaskSpecContainerSpec
 */
export namespace TaskSpecContainerSpec {
    /**
     * @export
     * @enum {string}
     */
    export enum IsolationEnum {
        Default = <any> 'default',
        Process = <any> 'process',
        Hyperv = <any> 'hyperv',
    }
}

/**
 * 
 * @export
 * @interface TaskSpecContainerSpecConfigs
 */
export interface TaskSpecContainerSpecConfigs {
    /**
     * 
     * @type {TaskSpecContainerSpecFile1}
     * @memberof TaskSpecContainerSpecConfigs
     */
    file?: TaskSpecContainerSpecFile1;
    /**
     * Runtime represents a target that is not mounted into the container but is used by the task  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually > exclusive 
     * @type {any}
     * @memberof TaskSpecContainerSpecConfigs
     */
    runtime?: any;
    /**
     * ConfigID represents the ID of the specific config that we're referencing. 
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigs
     */
    configID?: string;
    /**
     * ConfigName is the name of the config that this references, but this is just provided for lookup/display purposes. The config in the reference will be identified by its ID. 
     * @type {string}
     * @memberof TaskSpecContainerSpecConfigs
     */
    configName?: string;
}

/**
 * Specification for DNS related configurations in resolver configuration file (`resolv.conf`). 
 * @export
 * @interface TaskSpecContainerSpecDNSConfig
 */
export interface TaskSpecContainerSpecDNSConfig {
    /**
     * The IP addresses of the name servers.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpecDNSConfig
     */
    nameservers?: Array<string>;
    /**
     * A search list for host-name lookup.
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpecDNSConfig
     */
    search?: Array<string>;
    /**
     * A list of internal resolver variables to be modified (e.g., `debug`, `ndots:3`, etc.). 
     * @type {Array<string>}
     * @memberof TaskSpecContainerSpecDNSConfig
     */
    options?: Array<string>;
}

/**
 * File represents a specific target that is backed by a file. 
 * @export
 * @interface TaskSpecContainerSpecFile
 */
export interface TaskSpecContainerSpecFile {
    /**
     * Name represents the final filename in the filesystem. 
     * @type {string}
     * @memberof TaskSpecContainerSpecFile
     */
    name?: string;
    /**
     * UID represents the file UID.
     * @type {string}
     * @memberof TaskSpecContainerSpecFile
     */
    UID?: string;
    /**
     * GID represents the file GID.
     * @type {string}
     * @memberof TaskSpecContainerSpecFile
     */
    GID?: string;
    /**
     * Mode represents the FileMode of the file.
     * @type {number}
     * @memberof TaskSpecContainerSpecFile
     */
    mode?: number;
}

/**
 * File represents a specific target that is backed by a file.  <p><br /><p>  > **Note**: `Configs.File` and `Configs.Runtime` are mutually exclusive 
 * @export
 * @interface TaskSpecContainerSpecFile1
 */
export interface TaskSpecContainerSpecFile1 {
    /**
     * Name represents the final filename in the filesystem. 
     * @type {string}
     * @memberof TaskSpecContainerSpecFile1
     */
    name?: string;
    /**
     * UID represents the file UID.
     * @type {string}
     * @memberof TaskSpecContainerSpecFile1
     */
    UID?: string;
    /**
     * GID represents the file GID.
     * @type {string}
     * @memberof TaskSpecContainerSpecFile1
     */
    GID?: string;
    /**
     * Mode represents the FileMode of the file.
     * @type {number}
     * @memberof TaskSpecContainerSpecFile1
     */
    mode?: number;
}

/**
 * Security options for the container
 * @export
 * @interface TaskSpecContainerSpecPrivileges
 */
export interface TaskSpecContainerSpecPrivileges {
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesCredentialSpec}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    credentialSpec?: TaskSpecContainerSpecPrivilegesCredentialSpec;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesSELinuxContext}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    sELinuxContext?: TaskSpecContainerSpecPrivilegesSELinuxContext;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesSeccomp}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    seccomp?: TaskSpecContainerSpecPrivilegesSeccomp;
    /**
     * 
     * @type {TaskSpecContainerSpecPrivilegesAppArmor}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    appArmor?: TaskSpecContainerSpecPrivilegesAppArmor;
    /**
     * Configuration of the no_new_privs bit in the container
     * @type {boolean}
     * @memberof TaskSpecContainerSpecPrivileges
     */
    noNewPrivileges?: boolean;
}

/**
 * Options for configuring AppArmor on the container
 * @export
 * @interface TaskSpecContainerSpecPrivilegesAppArmor
 */
export interface TaskSpecContainerSpecPrivilegesAppArmor {
    /**
     * 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesAppArmor
     */
    mode?: TaskSpecContainerSpecPrivilegesAppArmor.ModeEnum;
}

/**
 * @export
 * @namespace TaskSpecContainerSpecPrivilegesAppArmor
 */
export namespace TaskSpecContainerSpecPrivilegesAppArmor {
    /**
     * @export
     * @enum {string}
     */
    export enum ModeEnum {
        Default = <any> 'default',
        Disabled = <any> 'disabled',
    }
}

/**
 * CredentialSpec for managed service account (Windows only)
 * @export
 * @interface TaskSpecContainerSpecPrivilegesCredentialSpec
 */
export interface TaskSpecContainerSpecPrivilegesCredentialSpec {
    /**
     * Load credential spec from a Swarm Config with the given ID. The specified config must also be present in the Configs field with the Runtime property set.  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesCredentialSpec
     */
    config?: string;
    /**
     * Load credential spec from this file. The file is read by the daemon, and must be present in the `CredentialSpecs` subdirectory in the docker data directory, which defaults to `C:\\ProgramData\\Docker\\` on Windows.  For example, specifying `spec.json` loads `C:\\ProgramData\\Docker\\CredentialSpecs\\spec.json`.  <p><br /></p>  > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesCredentialSpec
     */
    file?: string;
    /**
     * Load credential spec from this value in the Windows registry. The specified registry value must be located in:  `HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Virtualization\\Containers\\CredentialSpecs`  <p><br /></p>   > **Note**: `CredentialSpec.File`, `CredentialSpec.Registry`, > and `CredentialSpec.Config` are mutually exclusive. 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesCredentialSpec
     */
    registry?: string;
}

/**
 * SELinux labels of the container
 * @export
 * @interface TaskSpecContainerSpecPrivilegesSELinuxContext
 */
export interface TaskSpecContainerSpecPrivilegesSELinuxContext {
    /**
     * Disable SELinux
     * @type {boolean}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    disable?: boolean;
    /**
     * SELinux user label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    user?: string;
    /**
     * SELinux role label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    role?: string;
    /**
     * SELinux type label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    type?: string;
    /**
     * SELinux level label
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSELinuxContext
     */
    level?: string;
}

/**
 * Options for configuring seccomp on the container
 * @export
 * @interface TaskSpecContainerSpecPrivilegesSeccomp
 */
export interface TaskSpecContainerSpecPrivilegesSeccomp {
    /**
     * 
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSeccomp
     */
    mode?: TaskSpecContainerSpecPrivilegesSeccomp.ModeEnum;
    /**
     * The custom seccomp profile as a json object
     * @type {string}
     * @memberof TaskSpecContainerSpecPrivilegesSeccomp
     */
    profile?: string;
}

/**
 * @export
 * @namespace TaskSpecContainerSpecPrivilegesSeccomp
 */
export namespace TaskSpecContainerSpecPrivilegesSeccomp {
    /**
     * @export
     * @enum {string}
     */
    export enum ModeEnum {
        Default = <any> 'default',
        Unconfined = <any> 'unconfined',
        Custom = <any> 'custom',
    }
}

/**
 * 
 * @export
 * @interface TaskSpecContainerSpecSecrets
 */
export interface TaskSpecContainerSpecSecrets {
    /**
     * 
     * @type {TaskSpecContainerSpecFile}
     * @memberof TaskSpecContainerSpecSecrets
     */
    file?: TaskSpecContainerSpecFile;
    /**
     * SecretID represents the ID of the specific secret that we're referencing. 
     * @type {string}
     * @memberof TaskSpecContainerSpecSecrets
     */
    secretID?: string;
    /**
     * SecretName is the name of the secret that this references, but this is just provided for lookup/display purposes. The secret in the reference will be identified by its ID. 
     * @type {string}
     * @memberof TaskSpecContainerSpecSecrets
     */
    secretName?: string;
}

/**
 * Specifies the log driver to use for tasks created from this spec. If not present, the default one for the swarm will be used, finally falling back to the engine default if not specified. 
 * @export
 * @interface TaskSpecLogDriver
 */
export interface TaskSpecLogDriver {
    /**
     * 
     * @type {string}
     * @memberof TaskSpecLogDriver
     */
    name?: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof TaskSpecLogDriver
     */
    options?: { [key: string]: string; };
}

/**
 * Read-only spec type for non-swarm containers attached to swarm overlay networks.  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 * @export
 * @interface TaskSpecNetworkAttachmentSpec
 */
export interface TaskSpecNetworkAttachmentSpec {
    /**
     * ID of the container represented by this task
     * @type {string}
     * @memberof TaskSpecNetworkAttachmentSpec
     */
    containerID?: string;
}

/**
 * 
 * @export
 * @interface TaskSpecPlacement
 */
export interface TaskSpecPlacement {
    /**
     * An array of constraint expressions to limit the set of nodes where a task can be scheduled. Constraint expressions can either use a _match_ (`==`) or _exclude_ (`!=`) rule. Multiple constraints find nodes that satisfy every expression (AND match). Constraints can match node or Docker Engine labels as follows:  node attribute       | matches                        | example ---------------------|--------------------------------|----------------------------------------------- `node.id`            | Node ID                        | `node.id==2ivku8v2gvtg4` `node.hostname`      | Node hostname                  | `node.hostname!=node-2` `node.role`          | Node role (`manager`/`worker`) | `node.role==manager` `node.platform.os`   | Node operating system          | `node.platform.os==windows` `node.platform.arch` | Node architecture              | `node.platform.arch==x86_64` `node.labels`        | User-defined node labels       | `node.labels.security==high` `engine.labels`      | Docker Engine's labels         | `engine.labels.operatingsystem==ubuntu-14.04`  `engine.labels` apply to Docker Engine labels like operating system, drivers, etc. Swarm administrators add `node.labels` for operational purposes by using the [`node update endpoint`](#operation/NodeUpdate). 
     * @type {Array<string>}
     * @memberof TaskSpecPlacement
     */
    constraints?: Array<string>;
    /**
     * Preferences provide a way to make the scheduler aware of factors such as topology. They are provided in order from highest to lowest precedence. 
     * @type {Array<TaskSpecPlacementPreferences>}
     * @memberof TaskSpecPlacement
     */
    preferences?: Array<TaskSpecPlacementPreferences>;
    /**
     * Maximum number of replicas for per node (default value is 0, which is unlimited) 
     * @type {number}
     * @memberof TaskSpecPlacement
     */
    maxReplicas?: number;
    /**
     * Platforms stores all the platforms that the service's image can run on. This field is used in the platform filter for scheduling. If empty, then the platform filter is off, meaning there are no scheduling restrictions. 
     * @type {Array<Platform>}
     * @memberof TaskSpecPlacement
     */
    platforms?: Array<Platform>;
}

/**
 * 
 * @export
 * @interface TaskSpecPlacementPreferences
 */
export interface TaskSpecPlacementPreferences {
    /**
     * 
     * @type {TaskSpecPlacementSpread}
     * @memberof TaskSpecPlacementPreferences
     */
    spread?: TaskSpecPlacementSpread;
}

/**
 * 
 * @export
 * @interface TaskSpecPlacementSpread
 */
export interface TaskSpecPlacementSpread {
    /**
     * label descriptor, such as `engine.labels.az`. 
     * @type {string}
     * @memberof TaskSpecPlacementSpread
     */
    spreadDescriptor?: string;
}

/**
 * Plugin spec for the service.  *(Experimental release only.)*  <p><br /></p>  > **Note**: ContainerSpec, NetworkAttachmentSpec, and PluginSpec are > mutually exclusive. PluginSpec is only used when the Runtime field > is set to `plugin`. NetworkAttachmentSpec is used when the Runtime > field is set to `attachment`. 
 * @export
 * @interface TaskSpecPluginSpec
 */
export interface TaskSpecPluginSpec {
    /**
     * The name or 'alias' to use for the plugin.
     * @type {string}
     * @memberof TaskSpecPluginSpec
     */
    name?: string;
    /**
     * The plugin image reference to use.
     * @type {string}
     * @memberof TaskSpecPluginSpec
     */
    remote?: string;
    /**
     * Disable the plugin once scheduled.
     * @type {boolean}
     * @memberof TaskSpecPluginSpec
     */
    disabled?: boolean;
    /**
     * 
     * @type {Array<PluginPrivilege>}
     * @memberof TaskSpecPluginSpec
     */
    pluginPrivilege?: Array<PluginPrivilege>;
}

/**
 * Resource requirements which apply to each individual container created as part of the service. 
 * @export
 * @interface TaskSpecResources
 */
export interface TaskSpecResources {
    /**
     * 
     * @type {Limit}
     * @memberof TaskSpecResources
     */
    limits?: Limit;
    /**
     * 
     * @type {ResourceObject}
     * @memberof TaskSpecResources
     */
    reservations?: ResourceObject;
}

/**
 * Specification for the restart policy which applies to containers created as part of this service. 
 * @export
 * @interface TaskSpecRestartPolicy
 */
export interface TaskSpecRestartPolicy {
    /**
     * Condition for restart.
     * @type {string}
     * @memberof TaskSpecRestartPolicy
     */
    condition?: TaskSpecRestartPolicy.ConditionEnum;
    /**
     * Delay between restart attempts.
     * @type {number}
     * @memberof TaskSpecRestartPolicy
     */
    delay?: number;
    /**
     * Maximum attempts to restart a given container before giving up (default value is 0, which is ignored). 
     * @type {number}
     * @memberof TaskSpecRestartPolicy
     */
    maxAttempts?: number;
    /**
     * Windows is the time window used to evaluate the restart policy (default value is 0, which is unbounded). 
     * @type {number}
     * @memberof TaskSpecRestartPolicy
     */
    window?: number;
}

/**
 * @export
 * @namespace TaskSpecRestartPolicy
 */
export namespace TaskSpecRestartPolicy {
    /**
     * @export
     * @enum {string}
     */
    export enum ConditionEnum {
        None = <any> 'none',
        OnFailure = <any> 'on-failure',
        Any = <any> 'any',
    }
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum TaskState {
    New = <any> 'new',
    Allocated = <any> 'allocated',
    Pending = <any> 'pending',
    Assigned = <any> 'assigned',
    Accepted = <any> 'accepted',
    Preparing = <any> 'preparing',
    Ready = <any> 'ready',
    Starting = <any> 'starting',
    Running = <any> 'running',
    Complete = <any> 'complete',
    Shutdown = <any> 'shutdown',
    Failed = <any> 'failed',
    Rejected = <any> 'rejected',
    Remove = <any> 'remove',
    Orphaned = <any> 'orphaned',
}

/**
 * 
 * @export
 * @interface TaskStatus
 */
export interface TaskStatus {
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    timestamp?: string;
    /**
     * 
     * @type {TaskState}
     * @memberof TaskStatus
     */
    state?: TaskState;
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    message?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskStatus
     */
    err?: string;
    /**
     * 
     * @type {TaskStatusContainerStatus}
     * @memberof TaskStatus
     */
    containerStatus?: TaskStatusContainerStatus;
}

/**
 * 
 * @export
 * @interface TaskStatusContainerStatus
 */
export interface TaskStatusContainerStatus {
    /**
     * 
     * @type {string}
     * @memberof TaskStatusContainerStatus
     */
    containerID?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskStatusContainerStatus
     */
    PID?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskStatusContainerStatus
     */
    exitCode?: number;
}

/**
 * 
 * @export
 * @interface ThrottleDevice
 */
export interface ThrottleDevice {
    /**
     * Device path
     * @type {string}
     * @memberof ThrottleDevice
     */
    path?: string;
    /**
     * Rate
     * @type {number}
     * @memberof ThrottleDevice
     */
    rate?: number;
}

/**
 * A map of topological domains to topological segments. For in depth details, see documentation for the Topology object in the CSI specification. 
 * @export
 * @interface Topology
 */
export interface Topology extends null<String, string> {
    [key: string]: string;

}

/**
 * 
 * @export
 * @interface UnlockKeyResponse
 */
export interface UnlockKeyResponse {
    /**
     * The swarm's unlock key.
     * @type {string}
     * @memberof UnlockKeyResponse
     */
    unlockKey?: string;
}

/**
 * 
 * @export
 * @interface Volume
 */
export interface Volume {
    /**
     * Name of the volume.
     * @type {string}
     * @memberof Volume
     */
    name: string;
    /**
     * Name of the volume driver used by the volume.
     * @type {string}
     * @memberof Volume
     */
    driver: string;
    /**
     * Mount path of the volume on the host.
     * @type {string}
     * @memberof Volume
     */
    mountpoint: string;
    /**
     * Date/Time the volume was created.
     * @type {string}
     * @memberof Volume
     */
    createdAt?: string;
    /**
     * Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature. 
     * @type {{ [key: string]: any; }}
     * @memberof Volume
     */
    status?: { [key: string]: any; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof Volume
     */
    labels: { [key: string]: string; };
    /**
     * The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level. 
     * @type {string}
     * @memberof Volume
     */
    scope: Volume.ScopeEnum;
    /**
     * 
     * @type {ClusterVolume}
     * @memberof Volume
     */
    clusterVolume?: ClusterVolume;
    /**
     * The driver specific options used when creating the volume. 
     * @type {{ [key: string]: string; }}
     * @memberof Volume
     */
    options: { [key: string]: string; };
    /**
     * 
     * @type {VolumeUsageData}
     * @memberof Volume
     */
    usageData?: VolumeUsageData;
}

/**
 * @export
 * @namespace Volume
 */
export namespace Volume {
    /**
     * @export
     * @enum {string}
     */
    export enum ScopeEnum {
        Local = <any> 'local',
        Global = <any> 'global',
    }
}

/**
 * Volume configuration
 * @export
 * @interface VolumeCreateOptions
 */
export interface VolumeCreateOptions {
    /**
     * The new volume's name. If not specified, Docker generates a name. 
     * @type {string}
     * @memberof VolumeCreateOptions
     */
    name?: string;
    /**
     * Name of the volume driver to use.
     * @type {string}
     * @memberof VolumeCreateOptions
     */
    driver?: string;
    /**
     * A mapping of driver options and values. These options are passed directly to the driver and are driver specific. 
     * @type {{ [key: string]: string; }}
     * @memberof VolumeCreateOptions
     */
    driverOpts?: { [key: string]: string; };
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof VolumeCreateOptions
     */
    labels?: { [key: string]: string; };
    /**
     * 
     * @type {ClusterVolumeSpec}
     * @memberof VolumeCreateOptions
     */
    clusterVolumeSpec?: ClusterVolumeSpec;
}

/**
 * Volume list response
 * @export
 * @interface VolumeListResponse
 */
export interface VolumeListResponse {
    /**
     * List of volumes
     * @type {Array<Volume>}
     * @memberof VolumeListResponse
     */
    volumes?: Array<Volume>;
    /**
     * Warnings that occurred when fetching the list of volumes. 
     * @type {Array<string>}
     * @memberof VolumeListResponse
     */
    warnings?: Array<string>;
}

/**
 * 
 * @export
 * @interface VolumePruneResponse
 */
export interface VolumePruneResponse {
    /**
     * Volumes that were deleted
     * @type {Array<string>}
     * @memberof VolumePruneResponse
     */
    volumesDeleted?: Array<string>;
    /**
     * Disk space reclaimed in bytes
     * @type {number}
     * @memberof VolumePruneResponse
     */
    spaceReclaimed?: number;
}

/**
 * Usage details about the volume. This information is used by the `GET /system/df` endpoint, and omitted in other endpoints. 
 * @export
 * @interface VolumeUsageData
 */
export interface VolumeUsageData {
    /**
     * Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\") 
     * @type {number}
     * @memberof VolumeUsageData
     */
    size: number;
    /**
     * The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available. 
     * @type {number}
     * @memberof VolumeUsageData
     */
    refCount: number;
}

/**
 * Volume configuration
 * @export
 * @interface VolumesNameBody
 */
export interface VolumesNameBody {
    /**
     * 
     * @type {ClusterVolumeSpec}
     * @memberof VolumesNameBody
     */
    spec?: ClusterVolumeSpec;
}


/**
 * ConfigApi - fetch parameter creator
 * @export
 */
export const ConfigApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a config
         * @param {ConfigsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configCreate(body?: ConfigsCreateBody, options: any = {}): FetchArgs {
            const localVarPath = `/configs/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConfigsCreateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling configDelete.');
            }
            const localVarPath = `/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configInspect(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling configInspect.');
            }
            const localVarPath = `/configs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List configs
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/configs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Config
         * @param {string} id The ID or name of the config
         * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
         * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[ConfigInspect endpoint](#operation/ConfigInspect) response values.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configUpdate(id: string, version: number, body?: ConfigSpec, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling configUpdate.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling configUpdate.');
            }
            const localVarPath = `/configs/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ConfigSpec" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a config
         * @param {ConfigsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configCreate(body?: ConfigsCreateBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).configCreate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).configDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configInspect(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Config> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).configInspect(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List configs
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Config>> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).configList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a Config
         * @param {string} id The ID or name of the config
         * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
         * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[ConfigInspect endpoint](#operation/ConfigInspect) response values.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configUpdate(id: string, version: number, body?: ConfigSpec, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ConfigApiFetchParamCreator(configuration).configUpdate(id, version, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a config
         * @param {ConfigsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configCreate(body?: ConfigsCreateBody, options?: any) {
            return ConfigApiFp(configuration).configCreate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configDelete(id: string, options?: any) {
            return ConfigApiFp(configuration).configDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a config
         * @param {string} id ID of the config
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configInspect(id: string, options?: any) {
            return ConfigApiFp(configuration).configInspect(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List configs
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configList(filters?: string, options?: any) {
            return ConfigApiFp(configuration).configList(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a Config
         * @param {string} id The ID or name of the config
         * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
         * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[ConfigInspect endpoint](#operation/ConfigInspect) response values.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        configUpdate(id: string, version: number, body?: ConfigSpec, options?: any) {
            return ConfigApiFp(configuration).configUpdate(id, version, body, options)(fetch, basePath);
        },
    };
};

/**
 * ConfigApi - interface
 * @export
 * @interface ConfigApi
 */
export interface ConfigApiInterface {
    /**
     * 
     * @summary Create a config
     * @param {ConfigsCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    configCreate(body?: ConfigsCreateBody, options?: any): Promise<IdResponse>;

    /**
     * 
     * @summary Delete a config
     * @param {string} id ID of the config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    configDelete(id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a config
     * @param {string} id ID of the config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    configInspect(id: string, options?: any): Promise<Config>;

    /**
     * 
     * @summary List configs
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    configList(filters?: string, options?: any): Promise<Array<Config>>;

    /**
     * 
     * @summary Update a Config
     * @param {string} id The ID or name of the config
     * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
     * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[ConfigInspect endpoint](#operation/ConfigInspect) response values.

     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApiInterface
     */
    configUpdate(id: string, version: number, body?: ConfigSpec, options?: any): Promise<{}>;

}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI implements ConfigApiInterface {
    /**
     * 
     * @summary Create a config
     * @param {ConfigsCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configCreate(body?: ConfigsCreateBody, options?: any) {
        return ConfigApiFp(this.configuration).configCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a config
     * @param {string} id ID of the config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configDelete(id: string, options?: any) {
        return ConfigApiFp(this.configuration).configDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a config
     * @param {string} id ID of the config
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configInspect(id: string, options?: any) {
        return ConfigApiFp(this.configuration).configInspect(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List configs
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the configs list.  Available filters:  - &#x60;id&#x3D;&lt;config id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;config name&gt;&#x60; - &#x60;names&#x3D;&lt;config name&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configList(filters?: string, options?: any) {
        return ConfigApiFp(this.configuration).configList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a Config
     * @param {string} id The ID or name of the config
     * @param {number} version The version number of the config object being updated. This is required to avoid conflicting writes. 
     * @param {ConfigSpec} [body] The spec of the config to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[ConfigInspect endpoint](#operation/ConfigInspect) response values.

     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigApi
     */
    public configUpdate(id: string, version: number, body?: ConfigSpec, options?: any) {
        return ConfigApiFp(this.configuration).configUpdate(id, version, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ContainerApi - fetch parameter creator
 * @export
 */
export const ContainerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive(id: string, path: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerArchive.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling containerArchive.');
            }
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo(id: string, path: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerArchiveInfo.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling containerArchiveInfo.');
            }
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerAttach.');
            }
            const localVarPath = `/containers/{id}/attach`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            if (logs !== undefined) {
                localVarQueryParameter['logs'] = logs;
            }

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (stdin !== undefined) {
                localVarQueryParameter['stdin'] = stdin;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerAttachWebsocket.');
            }
            const localVarPath = `/containers/{id}/attach/ws`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            if (logs !== undefined) {
                localVarQueryParameter['logs'] = logs;
            }

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (stdin !== undefined) {
                localVarQueryParameter['stdin'] = stdin;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerChanges.');
            }
            const localVarPath = `/containers/{id}/changes`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainersCreateBody} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate(body: ContainersCreateBody, name?: string, platform?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling containerCreate.');
            }
            const localVarPath = `/containers/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ContainersCreateBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerDelete.');
            }
            const localVarPath = `/containers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (v !== undefined) {
                localVarQueryParameter['v'] = v;
            }

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (link !== undefined) {
                localVarQueryParameter['link'] = link;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerExport.');
            }
            const localVarPath = `/containers/{id}/export`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect(id: string, size?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerInspect.');
            }
            const localVarPath = `/containers/{id}/json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill(id: string, signal?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerKill.');
            }
            const localVarPath = `/containers/{id}/kill`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/containers/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerLogs.');
            }
            const localVarPath = `/containers/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerPause.');
            }
            const localVarPath = `/containers/{id}/pause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/containers/prune`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename(id: string, name: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerRename.');
            }
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling containerRename.');
            }
            const localVarPath = `/containers/{id}/rename`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize(id: string, h?: number, w?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerResize.');
            }
            const localVarPath = `/containers/{id}/resize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (h !== undefined) {
                localVarQueryParameter['h'] = h;
            }

            if (w !== undefined) {
                localVarQueryParameter['w'] = w;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart(id: string, signal?: string, t?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerRestart.');
            }
            const localVarPath = `/containers/{id}/restart`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart(id: string, detachKeys?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerStart.');
            }
            const localVarPath = `/containers/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (detachKeys !== undefined) {
                localVarQueryParameter['detachKeys'] = detachKeys;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats(id: string, stream?: boolean, oneShot?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerStats.');
            }
            const localVarPath = `/containers/{id}/stats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (stream !== undefined) {
                localVarQueryParameter['stream'] = stream;
            }

            if (oneShot !== undefined) {
                localVarQueryParameter['one-shot'] = oneShot;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop(id: string, signal?: string, t?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerStop.');
            }
            const localVarPath = `/containers/{id}/stop`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (signal !== undefined) {
                localVarQueryParameter['signal'] = signal;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop(id: string, psArgs?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerTop.');
            }
            const localVarPath = `/containers/{id}/top`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (psArgs !== undefined) {
                localVarQueryParameter['ps_args'] = psArgs;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerUnpause.');
            }
            const localVarPath = `/containers/{id}/unpause`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {IdUpdateBody} body 
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate(body: IdUpdateBody, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling containerUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerUpdate.');
            }
            const localVarPath = `/containers/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IdUpdateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {string} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait(id: string, condition?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerWait.');
            }
            const localVarPath = `/containers/{id}/wait`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (condition !== undefined) {
                localVarQueryParameter['condition'] = condition;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {Object} body The input stream must be a tar archive compressed with one of the
following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;,
or &#x60;xz&#x60;.

         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive(body: Object, id: string, path: string, noOverwriteDirNonDir?: string, copyUIDGID?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling putContainerArchive.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putContainerArchive.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling putContainerArchive.');
            }
            const localVarPath = `/containers/{id}/archive`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (noOverwriteDirNonDir !== undefined) {
                localVarQueryParameter['noOverwriteDirNonDir'] = noOverwriteDirNonDir;
            }

            if (copyUIDGID !== undefined) {
                localVarQueryParameter['copyUIDGID'] = copyUIDGID;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Object" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContainerApi - functional programming interface
 * @export
 */
export const ContainerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive(id: string, path: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerArchive(id, path, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo(id: string, path: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerArchiveInfo(id, path, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerAttachWebsocket(id, detachKeys, logs, stream, stdin, stdout, stderr, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<FilesystemChange>> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerChanges(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainersCreateBody} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate(body: ContainersCreateBody, name?: string, platform?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContainerCreateResponse> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerCreate(body, name, platform, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerDelete(id, v, force, link, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerExport(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect(id: string, size?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContainerInspectResponse> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerInspect(id, size, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill(id: string, signal?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerKill(id, signal, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ContainerSummary>> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerList(all, limit, size, filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerPause(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContainerPruneResponse> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerPrune(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename(id: string, name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerRename(id, name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize(id: string, h?: number, w?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerResize(id, h, w, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart(id: string, signal?: string, t?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerRestart(id, signal, t, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart(id: string, detachKeys?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerStart(id, detachKeys, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerStats(id, stream, oneShot, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop(id: string, signal?: string, t?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerStop(id, signal, t, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop(id: string, psArgs?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContainerTopResponse> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerTop(id, psArgs, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerUnpause(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {IdUpdateBody} body 
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate(body: IdUpdateBody, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContainerUpdateResponse> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerUpdate(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {string} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait(id: string, condition?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContainerWaitResponse> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).containerWait(id, condition, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {Object} body The input stream must be a tar archive compressed with one of the
following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;,
or &#x60;xz&#x60;.

         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive(body: Object, id: string, path: string, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ContainerApiFetchParamCreator(configuration).putContainerArchive(body, id, path, noOverwriteDirNonDir, copyUIDGID, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContainerApi - factory interface
 * @export
 */
export const ContainerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get a tar archive of a resource in the filesystem of container id.
         * @summary Get an archive of a filesystem resource in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchive(id: string, path: string, options?: any) {
            return ContainerApiFp(configuration).containerArchive(id, path, options)(fetch, basePath);
        },
        /**
         * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
         * @summary Get information about files in a container
         * @param {string} id ID or name of the container
         * @param {string} path Resource in the container’s filesystem to archive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerArchiveInfo(id: string, path: string, options?: any) {
            return ContainerApiFp(configuration).containerArchiveInfo(id, path, options)(fetch, basePath);
        },
        /**
         * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
         * @summary Attach to a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
         * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any) {
            return ContainerApiFp(configuration).containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Attach to a container via a websocket
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
         * @param {boolean} [logs] Return logs
         * @param {boolean} [stream] Return stream
         * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
         * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
         * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any) {
            return ContainerApiFp(configuration).containerAttachWebsocket(id, detachKeys, logs, stream, stdin, stdout, stderr, options)(fetch, basePath);
        },
        /**
         * Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
         * @summary Get changes on a container’s filesystem
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerChanges(id: string, options?: any) {
            return ContainerApiFp(configuration).containerChanges(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a container
         * @param {ContainersCreateBody} body Container to create
         * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
         * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerCreate(body: ContainersCreateBody, name?: string, platform?: string, options?: any) {
            return ContainerApiFp(configuration).containerCreate(body, name, platform, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove a container
         * @param {string} id ID or name of the container
         * @param {boolean} [v] Remove anonymous volumes associated with the container.
         * @param {boolean} [force] If the container is running, kill it before removing it.
         * @param {boolean} [link] Remove the specified link associated with the container.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: any) {
            return ContainerApiFp(configuration).containerDelete(id, v, force, link, options)(fetch, basePath);
        },
        /**
         * Export the contents of a container as a tarball.
         * @summary Export a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExport(id: string, options?: any) {
            return ContainerApiFp(configuration).containerExport(id, options)(fetch, basePath);
        },
        /**
         * Return low-level information about a container.
         * @summary Inspect a container
         * @param {string} id ID or name of the container
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerInspect(id: string, size?: boolean, options?: any) {
            return ContainerApiFp(configuration).containerInspect(id, size, options)(fetch, basePath);
        },
        /**
         * Send a POSIX signal to a container, defaulting to killing to the container. 
         * @summary Kill a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerKill(id: string, signal?: string, options?: any) {
            return ContainerApiFp(configuration).containerKill(id, signal, options)(fetch, basePath);
        },
        /**
         * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
         * @summary List containers
         * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
         * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
         * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
         * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: any) {
            return ContainerApiFp(configuration).containerList(all, limit, size, filters, options)(fetch, basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
         * @summary Get container logs
         * @param {string} id ID or name of the container
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {number} [until] Only return logs before this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: any) {
            return ContainerApiFp(configuration).containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options)(fetch, basePath);
        },
        /**
         * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
         * @summary Pause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPause(id: string, options?: any) {
            return ContainerApiFp(configuration).containerPause(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete stopped containers
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerPrune(filters?: string, options?: any) {
            return ContainerApiFp(configuration).containerPrune(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Rename a container
         * @param {string} id ID or name of the container
         * @param {string} name New name for the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRename(id: string, name: string, options?: any) {
            return ContainerApiFp(configuration).containerRename(id, name, options)(fetch, basePath);
        },
        /**
         * Resize the TTY for a container.
         * @summary Resize a container TTY
         * @param {string} id ID or name of the container
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerResize(id: string, h?: number, w?: number, options?: any) {
            return ContainerApiFp(configuration).containerResize(id, h, w, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Restart a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerRestart(id: string, signal?: string, t?: number, options?: any) {
            return ContainerApiFp(configuration).containerRestart(id, signal, t, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Start a container
         * @param {string} id ID or name of the container
         * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStart(id: string, detachKeys?: string, options?: any) {
            return ContainerApiFp(configuration).containerStart(id, detachKeys, options)(fetch, basePath);
        },
        /**
         * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
         * @summary Get container stats based on resource usage
         * @param {string} id ID or name of the container
         * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
         * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: any) {
            return ContainerApiFp(configuration).containerStats(id, stream, oneShot, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Stop a container
         * @param {string} id ID or name of the container
         * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
         * @param {number} [t] Number of seconds to wait before killing the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerStop(id: string, signal?: string, t?: number, options?: any) {
            return ContainerApiFp(configuration).containerStop(id, signal, t, options)(fetch, basePath);
        },
        /**
         * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
         * @summary List processes running inside a container
         * @param {string} id ID or name of the container
         * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerTop(id: string, psArgs?: string, options?: any) {
            return ContainerApiFp(configuration).containerTop(id, psArgs, options)(fetch, basePath);
        },
        /**
         * Resume a container which has been paused.
         * @summary Unpause a container
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUnpause(id: string, options?: any) {
            return ContainerApiFp(configuration).containerUnpause(id, options)(fetch, basePath);
        },
        /**
         * Change various configuration options of a container without having to recreate it. 
         * @summary Update a container
         * @param {IdUpdateBody} body 
         * @param {string} id ID or name of the container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerUpdate(body: IdUpdateBody, id: string, options?: any) {
            return ContainerApiFp(configuration).containerUpdate(body, id, options)(fetch, basePath);
        },
        /**
         * Block until a container stops, then returns the exit code.
         * @summary Wait for a container
         * @param {string} id ID or name of the container
         * @param {string} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerWait(id: string, condition?: string, options?: any) {
            return ContainerApiFp(configuration).containerWait(id, condition, options)(fetch, basePath);
        },
        /**
         * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
         * @summary Extract an archive of files or folders to a directory in a container
         * @param {Object} body The input stream must be a tar archive compressed with one of the
following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;,
or &#x60;xz&#x60;.

         * @param {string} id ID or name of the container
         * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
         * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
         * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putContainerArchive(body: Object, id: string, path: string, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: any) {
            return ContainerApiFp(configuration).putContainerArchive(body, id, path, noOverwriteDirNonDir, copyUIDGID, options)(fetch, basePath);
        },
    };
};

/**
 * ContainerApi - interface
 * @export
 * @interface ContainerApi
 */
export interface ContainerApiInterface {
    /**
     * Get a tar archive of a resource in the filesystem of container id.
     * @summary Get an archive of a filesystem resource in a container
     * @param {string} id ID or name of the container
     * @param {string} path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerArchive(id: string, path: string, options?: any): Promise<{}>;

    /**
     * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
     * @summary Get information about files in a container
     * @param {string} id ID or name of the container
     * @param {string} path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerArchiveInfo(id: string, path: string, options?: any): Promise<{}>;

    /**
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
     * @summary Attach to a container
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
     * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
     * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
     * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
     * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any): Promise<{}>;

    /**
     * 
     * @summary Attach to a container via a websocket
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
     * @param {boolean} [logs] Return logs
     * @param {boolean} [stream] Return stream
     * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
     * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
     * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any): Promise<{}>;

    /**
     * Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
     * @summary Get changes on a container’s filesystem
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerChanges(id: string, options?: any): Promise<Array<FilesystemChange>>;

    /**
     * 
     * @summary Create a container
     * @param {ContainersCreateBody} body Container to create
     * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
     * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerCreate(body: ContainersCreateBody, name?: string, platform?: string, options?: any): Promise<ContainerCreateResponse>;

    /**
     * 
     * @summary Remove a container
     * @param {string} id ID or name of the container
     * @param {boolean} [v] Remove anonymous volumes associated with the container.
     * @param {boolean} [force] If the container is running, kill it before removing it.
     * @param {boolean} [link] Remove the specified link associated with the container.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: any): Promise<{}>;

    /**
     * Export the contents of a container as a tarball.
     * @summary Export a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerExport(id: string, options?: any): Promise<{}>;

    /**
     * Return low-level information about a container.
     * @summary Inspect a container
     * @param {string} id ID or name of the container
     * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerInspect(id: string, size?: boolean, options?: any): Promise<ContainerInspectResponse>;

    /**
     * Send a POSIX signal to a container, defaulting to killing to the container. 
     * @summary Kill a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerKill(id: string, signal?: string, options?: any): Promise<{}>;

    /**
     * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     * @summary List containers
     * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
     * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
     * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
     * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: any): Promise<Array<ContainerSummary>>;

    /**
     * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
     * @summary Get container logs
     * @param {string} id ID or name of the container
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {number} [until] Only return logs before this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: any): Promise<Blob>;

    /**
     * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     * @summary Pause a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerPause(id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Delete stopped containers
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerPrune(filters?: string, options?: any): Promise<ContainerPruneResponse>;

    /**
     * 
     * @summary Rename a container
     * @param {string} id ID or name of the container
     * @param {string} name New name for the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerRename(id: string, name: string, options?: any): Promise<{}>;

    /**
     * Resize the TTY for a container.
     * @summary Resize a container TTY
     * @param {string} id ID or name of the container
     * @param {number} [h] Height of the TTY session in characters
     * @param {number} [w] Width of the TTY session in characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerResize(id: string, h?: number, w?: number, options?: any): Promise<{}>;

    /**
     * 
     * @summary Restart a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {number} [t] Number of seconds to wait before killing the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerRestart(id: string, signal?: string, t?: number, options?: any): Promise<{}>;

    /**
     * 
     * @summary Start a container
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerStart(id: string, detachKeys?: string, options?: any): Promise<{}>;

    /**
     * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
     * @summary Get container stats based on resource usage
     * @param {string} id ID or name of the container
     * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
     * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: any): Promise<any>;

    /**
     * 
     * @summary Stop a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {number} [t] Number of seconds to wait before killing the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerStop(id: string, signal?: string, t?: number, options?: any): Promise<{}>;

    /**
     * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
     * @summary List processes running inside a container
     * @param {string} id ID or name of the container
     * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerTop(id: string, psArgs?: string, options?: any): Promise<ContainerTopResponse>;

    /**
     * Resume a container which has been paused.
     * @summary Unpause a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerUnpause(id: string, options?: any): Promise<{}>;

    /**
     * Change various configuration options of a container without having to recreate it. 
     * @summary Update a container
     * @param {IdUpdateBody} body 
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerUpdate(body: IdUpdateBody, id: string, options?: any): Promise<ContainerUpdateResponse>;

    /**
     * Block until a container stops, then returns the exit code.
     * @summary Wait for a container
     * @param {string} id ID or name of the container
     * @param {string} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    containerWait(id: string, condition?: string, options?: any): Promise<ContainerWaitResponse>;

    /**
     * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
     * @summary Extract an archive of files or folders to a directory in a container
     * @param {Object} body The input stream must be a tar archive compressed with one of the
following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;,
or &#x60;xz&#x60;.

     * @param {string} id ID or name of the container
     * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
     * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
     * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApiInterface
     */
    putContainerArchive(body: Object, id: string, path: string, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: any): Promise<{}>;

}

/**
 * ContainerApi - object-oriented interface
 * @export
 * @class ContainerApi
 * @extends {BaseAPI}
 */
export class ContainerApi extends BaseAPI implements ContainerApiInterface {
    /**
     * Get a tar archive of a resource in the filesystem of container id.
     * @summary Get an archive of a filesystem resource in a container
     * @param {string} id ID or name of the container
     * @param {string} path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerArchive(id: string, path: string, options?: any) {
        return ContainerApiFp(this.configuration).containerArchive(id, path, options)(this.fetch, this.basePath);
    }

    /**
     * A response header `X-Docker-Container-Path-Stat` is returned, containing a base64 - encoded JSON object with some filesystem header information about the path. 
     * @summary Get information about files in a container
     * @param {string} id ID or name of the container
     * @param {string} path Resource in the container’s filesystem to archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerArchiveInfo(id: string, path: string, options?: any) {
        return ContainerApiFp(this.configuration).containerArchiveInfo(id, path, options)(this.fetch, this.basePath);
    }

    /**
     * Attach to a container to read its output or send it input. You can attach to the same container multiple times and you can reattach to containers that have been detached.  Either the `stream` or `logs` parameter must be `true` for this endpoint to do anything.  See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/) for more details.  ### Hijacking  This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`, and `stderr` on the same socket.  This is the response from the daemon for an attach request:  ``` HTTP/1.1 200 OK Content-Type: application/vnd.docker.raw-stream  [STREAM] ```  After the headers and two new lines, the TCP connection can now be used for raw, bidirectional communication between the client and server.  To hint potential proxies about connection hijacking, the Docker client can also optionally send connection upgrade headers.  For example, the client sends this request to upgrade the connection:  ``` POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1 Upgrade: tcp Connection: Upgrade ```  The Docker daemon will respond with a `101 UPGRADED` response, and will similarly follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Content-Type: application/vnd.docker.raw-stream Connection: Upgrade Upgrade: tcp  [STREAM] ```  ### Stream format  When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate), the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream and the stream over the hijacked connected is multiplexed to separate out `stdout` and `stderr`. The stream consists of a series of frames, each containing a header and a payload.  The header contains the information which the stream writes (`stdout` or `stderr`). It also contains the size of the associated frame encoded in the last four bytes (`uint32`).  It is encoded on the first eight bytes like this:  ```go header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4} ```  `STREAM_TYPE` can be:  - 0: `stdin` (is written on `stdout`) - 1: `stdout` - 2: `stderr`  `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size encoded as big endian.  Following the header is the payload, which is the specified number of bytes of `STREAM_TYPE`.  The simplest way to implement this protocol is the following:  1. Read 8 bytes. 2. Choose `stdout` or `stderr` depending on the first byte. 3. Extract the frame size from the last four bytes. 4. Read the extracted size and output it on the correct output. 5. Goto 1.  ### Stream format when using a TTY  When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate), the stream is not multiplexed. The data exchanged over the hijacked connection is simply the raw data from the process PTY and client's `stdin`. 
     * @summary Attach to a container
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {boolean} [logs] Replay previous logs from the container.  This is useful for attaching to a container that has started and you want to output everything since the container started.  If &#x60;stream&#x60; is also enabled, once all the previous output has been returned, it will seamlessly transition into streaming current output. 
     * @param {boolean} [stream] Stream attached streams from the time the request was made onwards. 
     * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
     * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
     * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerAttach(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any) {
        return ContainerApiFp(this.configuration).containerAttach(id, detachKeys, logs, stream, stdin, stdout, stderr, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Attach to a container via a websocket
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container.Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60;, or &#x60;_&#x60;. 
     * @param {boolean} [logs] Return logs
     * @param {boolean} [stream] Return stream
     * @param {boolean} [stdin] Attach to &#x60;stdin&#x60;
     * @param {boolean} [stdout] Attach to &#x60;stdout&#x60;
     * @param {boolean} [stderr] Attach to &#x60;stderr&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerAttachWebsocket(id: string, detachKeys?: string, logs?: boolean, stream?: boolean, stdin?: boolean, stdout?: boolean, stderr?: boolean, options?: any) {
        return ContainerApiFp(this.configuration).containerAttachWebsocket(id, detachKeys, logs, stream, stdin, stdout, stderr, options)(this.fetch, this.basePath);
    }

    /**
     * Returns which files in a container's filesystem have been added, deleted, or modified. The `Kind` of modification can be one of:  - `0`: Modified (\"C\") - `1`: Added (\"A\") - `2`: Deleted (\"D\") 
     * @summary Get changes on a container’s filesystem
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerChanges(id: string, options?: any) {
        return ContainerApiFp(this.configuration).containerChanges(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a container
     * @param {ContainersCreateBody} body Container to create
     * @param {string} [name] Assign the specified name to the container. Must match &#x60;/?[a-zA-Z0-9][a-zA-Z0-9_.-]+&#x60;. 
     * @param {string} [platform] Platform in the format &#x60;os[/arch[/variant]]&#x60; used for image lookup.  When specified, the daemon checks if the requested image is present in the local image cache with the given OS and Architecture, and otherwise returns a &#x60;404&#x60; status.  If the option is not set, the host&#39;s native OS and Architecture are used to look up the image in the image cache. However, if no platform is passed and the given image does exist in the local image cache, but its OS or architecture does not match, the container is created with the available image, and a warning is added to the &#x60;Warnings&#x60; field in the response, for example;      WARNING: The requested image&#39;s platform (linux/arm64/v8) does not              match the detected host platform (linux/amd64) and no              specific platform was requested 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerCreate(body: ContainersCreateBody, name?: string, platform?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerCreate(body, name, platform, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove a container
     * @param {string} id ID or name of the container
     * @param {boolean} [v] Remove anonymous volumes associated with the container.
     * @param {boolean} [force] If the container is running, kill it before removing it.
     * @param {boolean} [link] Remove the specified link associated with the container.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerDelete(id: string, v?: boolean, force?: boolean, link?: boolean, options?: any) {
        return ContainerApiFp(this.configuration).containerDelete(id, v, force, link, options)(this.fetch, this.basePath);
    }

    /**
     * Export the contents of a container as a tarball.
     * @summary Export a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerExport(id: string, options?: any) {
        return ContainerApiFp(this.configuration).containerExport(id, options)(this.fetch, this.basePath);
    }

    /**
     * Return low-level information about a container.
     * @summary Inspect a container
     * @param {string} id ID or name of the container
     * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerInspect(id: string, size?: boolean, options?: any) {
        return ContainerApiFp(this.configuration).containerInspect(id, size, options)(this.fetch, this.basePath);
    }

    /**
     * Send a POSIX signal to a container, defaulting to killing to the container. 
     * @summary Kill a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerKill(id: string, signal?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerKill(id, signal, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of containers. For details on the format, see the [inspect endpoint](#operation/ContainerInspect).  Note that it uses a different, smaller representation of a container than inspecting a single container. For example, the list of linked containers is not propagated . 
     * @summary List containers
     * @param {boolean} [all] Return all containers. By default, only running containers are shown. 
     * @param {number} [limit] Return this number of most recently created containers, including non-running ones. 
     * @param {boolean} [size] Return the size of container as fields &#x60;SizeRw&#x60; and &#x60;SizeRootFs&#x60;. 
     * @param {string} [filters] Filters to process on the container list, encoded as JSON (a &#x60;map[string][]string&#x60;). For example, &#x60;{\&quot;status\&quot;: [\&quot;paused\&quot;]}&#x60; will only return paused containers.  Available filters:  - &#x60;ancestor&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;, &#x60;&lt;image id&gt;&#x60;, or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;before&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;expose&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;exited&#x3D;&lt;int&gt;&#x60; containers with exit code of &#x60;&lt;int&gt;&#x60; - &#x60;health&#x60;&#x3D;(&#x60;starting&#x60;|&#x60;healthy&#x60;|&#x60;unhealthy&#x60;|&#x60;none&#x60;) - &#x60;id&#x3D;&lt;ID&gt;&#x60; a container&#39;s ID - &#x60;isolation&#x3D;&#x60;(&#x60;default&#x60;|&#x60;process&#x60;|&#x60;hyperv&#x60;) (Windows daemon only) - &#x60;is-task&#x3D;&#x60;(&#x60;true&#x60;|&#x60;false&#x60;) - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of a container label - &#x60;name&#x3D;&lt;name&gt;&#x60; a container&#39;s name - &#x60;network&#x60;&#x3D;(&#x60;&lt;network id&gt;&#x60; or &#x60;&lt;network name&gt;&#x60;) - &#x60;publish&#x60;&#x3D;(&#x60;&lt;port&gt;[/&lt;proto&gt;]&#x60;|&#x60;&lt;startport-endport&gt;/[&lt;proto&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;container id&gt;&#x60; or &#x60;&lt;container name&gt;&#x60;) - &#x60;status&#x3D;&#x60;(&#x60;created&#x60;|&#x60;restarting&#x60;|&#x60;running&#x60;|&#x60;removing&#x60;|&#x60;paused&#x60;|&#x60;exited&#x60;|&#x60;dead&#x60;) - &#x60;volume&#x60;&#x3D;(&#x60;&lt;volume name&gt;&#x60; or &#x60;&lt;mount point destination&gt;&#x60;) 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerList(all?: boolean, limit?: number, size?: boolean, filters?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerList(all, limit, size, filters, options)(this.fetch, this.basePath);
    }

    /**
     * Get `stdout` and `stderr` logs from a container.  Note: This endpoint works only for containers with the `json-file` or `journald` logging driver. 
     * @summary Get container logs
     * @param {string} id ID or name of the container
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {number} [until] Only return logs before this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerLogs(id: string, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, until?: number, timestamps?: boolean, tail?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerLogs(id, follow, stdout, stderr, since, until, timestamps, tail, options)(this.fetch, this.basePath);
    }

    /**
     * Use the freezer cgroup to suspend all processes in a container.  Traditionally, when suspending a process the `SIGSTOP` signal is used, which is observable by the process being suspended. With the freezer cgroup the process is unaware, and unable to capture, that it is being suspended, and subsequently resumed. 
     * @summary Pause a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerPause(id: string, options?: any) {
        return ContainerApiFp(this.configuration).containerPause(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete stopped containers
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune containers created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune containers with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerPrune(filters?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerPrune(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Rename a container
     * @param {string} id ID or name of the container
     * @param {string} name New name for the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerRename(id: string, name: string, options?: any) {
        return ContainerApiFp(this.configuration).containerRename(id, name, options)(this.fetch, this.basePath);
    }

    /**
     * Resize the TTY for a container.
     * @summary Resize a container TTY
     * @param {string} id ID or name of the container
     * @param {number} [h] Height of the TTY session in characters
     * @param {number} [w] Width of the TTY session in characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerResize(id: string, h?: number, w?: number, options?: any) {
        return ContainerApiFp(this.configuration).containerResize(id, h, w, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Restart a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {number} [t] Number of seconds to wait before killing the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerRestart(id: string, signal?: string, t?: number, options?: any) {
        return ContainerApiFp(this.configuration).containerRestart(id, signal, t, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Start a container
     * @param {string} id ID or name of the container
     * @param {string} [detachKeys] Override the key sequence for detaching a container. Format is a single character &#x60;[a-Z]&#x60; or &#x60;ctrl-&lt;value&gt;&#x60; where &#x60;&lt;value&gt;&#x60; is one of: &#x60;a-z&#x60;, &#x60;@&#x60;, &#x60;^&#x60;, &#x60;[&#x60;, &#x60;,&#x60; or &#x60;_&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStart(id: string, detachKeys?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerStart(id, detachKeys, options)(this.fetch, this.basePath);
    }

    /**
     * This endpoint returns a live stream of a container’s resource usage statistics.  The `precpu_stats` is the CPU statistic of the *previous* read, and is used to calculate the CPU usage percentage. It is not an exact copy of the `cpu_stats` field.  If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is nil then for compatibility with older daemons the length of the corresponding `cpu_usage.percpu_usage` array should be used.  On a cgroup v2 host, the following fields are not set * `blkio_stats`: all fields other than `io_service_bytes_recursive` * `cpu_stats`: `cpu_usage.percpu_usage` * `memory_stats`: `max_usage` and `failcnt` Also, `memory_stats.stats` fields are incompatible with cgroup v1.  To calculate the values shown by the `stats` command of the docker cli tool the following formulas can be used: * used_memory = `memory_stats.usage - memory_stats.stats.cache` * available_memory = `memory_stats.limit` * Memory usage % = `(used_memory / available_memory) * 100.0` * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage` * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage` * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus` * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0` 
     * @summary Get container stats based on resource usage
     * @param {string} id ID or name of the container
     * @param {boolean} [stream] Stream the output. If false, the stats will be output once and then it will disconnect. 
     * @param {boolean} [oneShot] Only get a single stat instead of waiting for 2 cycles. Must be used with &#x60;stream&#x3D;false&#x60;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStats(id: string, stream?: boolean, oneShot?: boolean, options?: any) {
        return ContainerApiFp(this.configuration).containerStats(id, stream, oneShot, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Stop a container
     * @param {string} id ID or name of the container
     * @param {string} [signal] Signal to send to the container as an integer or string (e.g. &#x60;SIGINT&#x60;). 
     * @param {number} [t] Number of seconds to wait before killing the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerStop(id: string, signal?: string, t?: number, options?: any) {
        return ContainerApiFp(this.configuration).containerStop(id, signal, t, options)(this.fetch, this.basePath);
    }

    /**
     * On Unix systems, this is done by running the `ps` command. This endpoint is not supported on Windows. 
     * @summary List processes running inside a container
     * @param {string} id ID or name of the container
     * @param {string} [psArgs] The arguments to pass to &#x60;ps&#x60;. For example, &#x60;aux&#x60;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerTop(id: string, psArgs?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerTop(id, psArgs, options)(this.fetch, this.basePath);
    }

    /**
     * Resume a container which has been paused.
     * @summary Unpause a container
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerUnpause(id: string, options?: any) {
        return ContainerApiFp(this.configuration).containerUnpause(id, options)(this.fetch, this.basePath);
    }

    /**
     * Change various configuration options of a container without having to recreate it. 
     * @summary Update a container
     * @param {IdUpdateBody} body 
     * @param {string} id ID or name of the container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerUpdate(body: IdUpdateBody, id: string, options?: any) {
        return ContainerApiFp(this.configuration).containerUpdate(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Block until a container stops, then returns the exit code.
     * @summary Wait for a container
     * @param {string} id ID or name of the container
     * @param {string} [condition] Wait until a container state reaches the given condition.  Defaults to &#x60;not-running&#x60; if omitted or empty. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public containerWait(id: string, condition?: string, options?: any) {
        return ContainerApiFp(this.configuration).containerWait(id, condition, options)(this.fetch, this.basePath);
    }

    /**
     * Upload a tar archive to be extracted to a path in the filesystem of container id. `path` parameter is asserted to be a directory. If it exists as a file, 400 error will be returned with message \"not a directory\". 
     * @summary Extract an archive of files or folders to a directory in a container
     * @param {Object} body The input stream must be a tar archive compressed with one of the
following algorithms: &#x60;identity&#x60; (no compression), &#x60;gzip&#x60;, &#x60;bzip2&#x60;,
or &#x60;xz&#x60;.

     * @param {string} id ID or name of the container
     * @param {string} path Path to a directory in the container to extract the archive’s contents into. 
     * @param {string} [noOverwriteDirNonDir] If &#x60;1&#x60;, &#x60;true&#x60;, or &#x60;True&#x60; then it will be an error if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa. 
     * @param {string} [copyUIDGID] If &#x60;1&#x60;, &#x60;true&#x60;, then it will copy UID/GID maps to the dest file or dir 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContainerApi
     */
    public putContainerArchive(body: Object, id: string, path: string, noOverwriteDirNonDir?: string, copyUIDGID?: string, options?: any) {
        return ContainerApiFp(this.configuration).putContainerArchive(body, id, path, noOverwriteDirNonDir, copyUIDGID, options)(this.fetch, this.basePath);
    }

}

/**
 * DistributionApi - fetch parameter creator
 * @export
 */
export const DistributionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Return image digest and platform information by contacting the registry. 
         * @summary Get image information from the registry
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionInspect(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling distributionInspect.');
            }
            const localVarPath = `/distribution/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DistributionApi - functional programming interface
 * @export
 */
export const DistributionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Return image digest and platform information by contacting the registry. 
         * @summary Get image information from the registry
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionInspect(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<DistributionInspect> {
            const localVarFetchArgs = DistributionApiFetchParamCreator(configuration).distributionInspect(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DistributionApi - factory interface
 * @export
 */
export const DistributionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Return image digest and platform information by contacting the registry. 
         * @summary Get image information from the registry
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        distributionInspect(name: string, options?: any) {
            return DistributionApiFp(configuration).distributionInspect(name, options)(fetch, basePath);
        },
    };
};

/**
 * DistributionApi - interface
 * @export
 * @interface DistributionApi
 */
export interface DistributionApiInterface {
    /**
     * Return image digest and platform information by contacting the registry. 
     * @summary Get image information from the registry
     * @param {string} name Image name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApiInterface
     */
    distributionInspect(name: string, options?: any): Promise<DistributionInspect>;

}

/**
 * DistributionApi - object-oriented interface
 * @export
 * @class DistributionApi
 * @extends {BaseAPI}
 */
export class DistributionApi extends BaseAPI implements DistributionApiInterface {
    /**
     * Return image digest and platform information by contacting the registry. 
     * @summary Get image information from the registry
     * @param {string} name Image name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistributionApi
     */
    public distributionInspect(name: string, options?: any) {
        return DistributionApiFp(this.configuration).distributionInspect(name, options)(this.fetch, this.basePath);
    }

}

/**
 * ExecApi - fetch parameter creator
 * @export
 */
export const ExecApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Run a command inside a running container.
         * @summary Create an exec instance
         * @param {ExecConfig} body Exec configuration
         * @param {string} id ID or name of container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExec(body: ExecConfig, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling containerExec.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling containerExec.');
            }
            const localVarPath = `/containers/{id}/exec`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ExecConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about an exec instance.
         * @summary Inspect an exec instance
         * @param {string} id Exec instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execInspect(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling execInspect.');
            }
            const localVarPath = `/exec/{id}/json`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
         * @summary Resize an exec instance
         * @param {string} id Exec instance ID
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execResize(id: string, h?: number, w?: number, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling execResize.');
            }
            const localVarPath = `/exec/{id}/resize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (h !== undefined) {
                localVarQueryParameter['h'] = h;
            }

            if (w !== undefined) {
                localVarQueryParameter['w'] = w;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
         * @summary Start an exec instance
         * @param {string} id Exec instance ID
         * @param {ExecStartConfig} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execStart(id: string, body?: ExecStartConfig, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling execStart.');
            }
            const localVarPath = `/exec/{id}/start`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ExecStartConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExecApi - functional programming interface
 * @export
 */
export const ExecApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Run a command inside a running container.
         * @summary Create an exec instance
         * @param {ExecConfig} body Exec configuration
         * @param {string} id ID or name of container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExec(body: ExecConfig, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = ExecApiFetchParamCreator(configuration).containerExec(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return low-level information about an exec instance.
         * @summary Inspect an exec instance
         * @param {string} id Exec instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execInspect(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ExecInspectResponse> {
            const localVarFetchArgs = ExecApiFetchParamCreator(configuration).execInspect(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
         * @summary Resize an exec instance
         * @param {string} id Exec instance ID
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execResize(id: string, h?: number, w?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExecApiFetchParamCreator(configuration).execResize(id, h, w, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
         * @summary Start an exec instance
         * @param {string} id Exec instance ID
         * @param {ExecStartConfig} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execStart(id: string, body?: ExecStartConfig, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ExecApiFetchParamCreator(configuration).execStart(id, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ExecApi - factory interface
 * @export
 */
export const ExecApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Run a command inside a running container.
         * @summary Create an exec instance
         * @param {ExecConfig} body Exec configuration
         * @param {string} id ID or name of container
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        containerExec(body: ExecConfig, id: string, options?: any) {
            return ExecApiFp(configuration).containerExec(body, id, options)(fetch, basePath);
        },
        /**
         * Return low-level information about an exec instance.
         * @summary Inspect an exec instance
         * @param {string} id Exec instance ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execInspect(id: string, options?: any) {
            return ExecApiFp(configuration).execInspect(id, options)(fetch, basePath);
        },
        /**
         * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
         * @summary Resize an exec instance
         * @param {string} id Exec instance ID
         * @param {number} [h] Height of the TTY session in characters
         * @param {number} [w] Width of the TTY session in characters
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execResize(id: string, h?: number, w?: number, options?: any) {
            return ExecApiFp(configuration).execResize(id, h, w, options)(fetch, basePath);
        },
        /**
         * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
         * @summary Start an exec instance
         * @param {string} id Exec instance ID
         * @param {ExecStartConfig} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        execStart(id: string, body?: ExecStartConfig, options?: any) {
            return ExecApiFp(configuration).execStart(id, body, options)(fetch, basePath);
        },
    };
};

/**
 * ExecApi - interface
 * @export
 * @interface ExecApi
 */
export interface ExecApiInterface {
    /**
     * Run a command inside a running container.
     * @summary Create an exec instance
     * @param {ExecConfig} body Exec configuration
     * @param {string} id ID or name of container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApiInterface
     */
    containerExec(body: ExecConfig, id: string, options?: any): Promise<IdResponse>;

    /**
     * Return low-level information about an exec instance.
     * @summary Inspect an exec instance
     * @param {string} id Exec instance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApiInterface
     */
    execInspect(id: string, options?: any): Promise<ExecInspectResponse>;

    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
     * @summary Resize an exec instance
     * @param {string} id Exec instance ID
     * @param {number} [h] Height of the TTY session in characters
     * @param {number} [w] Width of the TTY session in characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApiInterface
     */
    execResize(id: string, h?: number, w?: number, options?: any): Promise<{}>;

    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
     * @summary Start an exec instance
     * @param {string} id Exec instance ID
     * @param {ExecStartConfig} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApiInterface
     */
    execStart(id: string, body?: ExecStartConfig, options?: any): Promise<{}>;

}

/**
 * ExecApi - object-oriented interface
 * @export
 * @class ExecApi
 * @extends {BaseAPI}
 */
export class ExecApi extends BaseAPI implements ExecApiInterface {
    /**
     * Run a command inside a running container.
     * @summary Create an exec instance
     * @param {ExecConfig} body Exec configuration
     * @param {string} id ID or name of container
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public containerExec(body: ExecConfig, id: string, options?: any) {
        return ExecApiFp(this.configuration).containerExec(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * Return low-level information about an exec instance.
     * @summary Inspect an exec instance
     * @param {string} id Exec instance ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public execInspect(id: string, options?: any) {
        return ExecApiFp(this.configuration).execInspect(id, options)(this.fetch, this.basePath);
    }

    /**
     * Resize the TTY session used by an exec instance. This endpoint only works if `tty` was specified as part of creating and starting the exec instance. 
     * @summary Resize an exec instance
     * @param {string} id Exec instance ID
     * @param {number} [h] Height of the TTY session in characters
     * @param {number} [w] Width of the TTY session in characters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public execResize(id: string, h?: number, w?: number, options?: any) {
        return ExecApiFp(this.configuration).execResize(id, h, w, options)(this.fetch, this.basePath);
    }

    /**
     * Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command. 
     * @summary Start an exec instance
     * @param {string} id Exec instance ID
     * @param {ExecStartConfig} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExecApi
     */
    public execStart(id: string, body?: ExecStartConfig, options?: any) {
        return ExecApiFp(this.configuration).execStart(id, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ImageApi - fetch parameter creator
 * @export
 */
export const ImageApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune(keepStorage?: number, all?: boolean, filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/build/prune`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (keepStorage !== undefined) {
                localVarQueryParameter['keep-storage'] = keepStorage;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {Object} [body] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to. 
         * @param {string} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild(body?: Object, dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: string, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, options: any = {}): FetchArgs {
            const localVarPath = `/build`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (dockerfile !== undefined) {
                localVarQueryParameter['dockerfile'] = dockerfile;
            }

            if (t !== undefined) {
                localVarQueryParameter['t'] = t;
            }

            if (extrahosts !== undefined) {
                localVarQueryParameter['extrahosts'] = extrahosts;
            }

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (nocache !== undefined) {
                localVarQueryParameter['nocache'] = nocache;
            }

            if (cachefrom !== undefined) {
                localVarQueryParameter['cachefrom'] = cachefrom;
            }

            if (pull !== undefined) {
                localVarQueryParameter['pull'] = pull;
            }

            if (rm !== undefined) {
                localVarQueryParameter['rm'] = rm;
            }

            if (forcerm !== undefined) {
                localVarQueryParameter['forcerm'] = forcerm;
            }

            if (memory !== undefined) {
                localVarQueryParameter['memory'] = memory;
            }

            if (memswap !== undefined) {
                localVarQueryParameter['memswap'] = memswap;
            }

            if (cpushares !== undefined) {
                localVarQueryParameter['cpushares'] = cpushares;
            }

            if (cpusetcpus !== undefined) {
                localVarQueryParameter['cpusetcpus'] = cpusetcpus;
            }

            if (cpuperiod !== undefined) {
                localVarQueryParameter['cpuperiod'] = cpuperiod;
            }

            if (cpuquota !== undefined) {
                localVarQueryParameter['cpuquota'] = cpuquota;
            }

            if (buildargs !== undefined) {
                localVarQueryParameter['buildargs'] = buildargs;
            }

            if (shmsize !== undefined) {
                localVarQueryParameter['shmsize'] = shmsize;
            }

            if (squash !== undefined) {
                localVarQueryParameter['squash'] = squash;
            }

            if (labels !== undefined) {
                localVarQueryParameter['labels'] = labels;
            }

            if (networkmode !== undefined) {
                localVarQueryParameter['networkmode'] = networkmode;
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (target !== undefined) {
                localVarQueryParameter['target'] = target;
            }

            if (outputs !== undefined) {
                localVarQueryParameter['outputs'] = outputs;
            }

            if (contentType !== undefined && contentType !== null) {
                localVarHeaderParameter['Content-type'] = String(contentType);
            }

            if (xRegistryConfig !== undefined && xRegistryConfig !== null) {
                localVarHeaderParameter['X-Registry-Config'] = String(xRegistryConfig);
            }

            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Object" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {ContainerConfig} [body] The container configuration
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit(body?: ContainerConfig, container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, options: any = {}): FetchArgs {
            const localVarPath = `/commit`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (container !== undefined) {
                localVarQueryParameter['container'] = container;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (comment !== undefined) {
                localVarQueryParameter['comment'] = comment;
            }

            if (author !== undefined) {
                localVarQueryParameter['author'] = author;
            }

            if (pause !== undefined) {
                localVarQueryParameter['pause'] = pause;
            }

            if (changes !== undefined) {
                localVarQueryParameter['changes'] = changes;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ContainerConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pull or import an image.
         * @summary Create an image
         * @param {string} [body] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(body?: string, fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, options: any = {}): FetchArgs {
            const localVarPath = `/images/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromImage !== undefined) {
                localVarQueryParameter['fromImage'] = fromImage;
            }

            if (fromSrc !== undefined) {
                localVarQueryParameter['fromSrc'] = fromSrc;
            }

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (message !== undefined) {
                localVarQueryParameter['message'] = message;
            }

            if (changes) {
                localVarQueryParameter['changes'] = changes.join(COLLECTION_FORMATS["csv"]);
            }

            if (platform !== undefined) {
                localVarQueryParameter['platform'] = platform;
            }

            if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }

            localVarHeaderParameter['Content-Type'] = 'text/plain';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete(name: string, force?: boolean, noprune?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling imageDelete.');
            }
            const localVarPath = `/images/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            if (noprune !== undefined) {
                localVarQueryParameter['noprune'] = noprune;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling imageGet.');
            }
            const localVarPath = `/images/{name}/get`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll(names?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/images/get`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (names) {
                localVarQueryParameter['names'] = names.join(COLLECTION_FORMATS["csv"]);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling imageHistory.');
            }
            const localVarPath = `/images/{name}/history`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling imageInspect.');
            }
            const localVarPath = `/images/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
         * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/images/json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (sharedSize !== undefined) {
                localVarQueryParameter['shared-size'] = sharedSize;
            }

            if (digests !== undefined) {
                localVarQueryParameter['digests'] = digests;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {Object} [body] Tar archive containing images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad(body?: Object, quiet?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/images/load`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (quiet !== undefined) {
                localVarQueryParameter['quiet'] = quiet;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Object" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/images/prune`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Image name or ID.
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] The tag to associate with the image on the registry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush(name: string, xRegistryAuth: string, tag?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling imagePush.');
            }
            // verify required parameter 'xRegistryAuth' is not null or undefined
            if (xRegistryAuth === null || xRegistryAuth === undefined) {
                throw new RequiredError('xRegistryAuth','Required parameter xRegistryAuth was null or undefined when calling imagePush.');
            }
            const localVarPath = `/images/{name}/push`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; (deprecated, see below) - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  The &#x60;is-automated&#x60; filter is deprecated. The &#x60;is_automated&#x60; field has been deprecated by Docker Hub&#39;s search API. Consequently, searching for &#x60;is-automated&#x3D;true&#x60; will yield no results. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch(term: string, limit?: number, filters?: string, options: any = {}): FetchArgs {
            // verify required parameter 'term' is not null or undefined
            if (term === null || term === undefined) {
                throw new RequiredError('term','Required parameter term was null or undefined when calling imageSearch.');
            }
            const localVarPath = `/images/search`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (term !== undefined) {
                localVarQueryParameter['term'] = term;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag(name: string, repo?: string, tag?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling imageTag.');
            }
            const localVarPath = `/images/{name}/tag`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (repo !== undefined) {
                localVarQueryParameter['repo'] = repo;
            }

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BuildPruneResponse> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).buildPrune(keepStorage, all, filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {Object} [body] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to. 
         * @param {string} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild(body?: Object, dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: string, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageBuild(body, dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {ContainerConfig} [body] The container configuration
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit(body?: ContainerConfig, container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageCommit(body, container, repo, tag, comment, author, pause, changes, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Pull or import an image.
         * @summary Create an image
         * @param {string} [body] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(body?: string, fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageCreate(body, fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete(name: string, force?: boolean, noprune?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ImageDeleteResponseItem>> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageDelete(name, force, noprune, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageGet(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll(names?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageGetAll(names, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<HistoryResponseItem>> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageHistory(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ImageInspect> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageInspect(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
         * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ImageSummary>> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageList(all, filters, sharedSize, digests, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {Object} [body] Tar archive containing images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad(body?: Object, quiet?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageLoad(body, quiet, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ImagePruneResponse> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imagePrune(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Image name or ID.
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] The tag to associate with the image on the registry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush(name: string, xRegistryAuth: string, tag?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imagePush(name, xRegistryAuth, tag, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; (deprecated, see below) - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  The &#x60;is-automated&#x60; filter is deprecated. The &#x60;is_automated&#x60; field has been deprecated by Docker Hub&#39;s search API. Consequently, searching for &#x60;is-automated&#x3D;true&#x60; will yield no results. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch(term: string, limit?: number, filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ImageSearchResponseItem>> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageSearch(term, limit, filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag(name: string, repo?: string, tag?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ImageApiFetchParamCreator(configuration).imageTag(name, repo, tag, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete builder cache
         * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
         * @param {boolean} [all] Remove all types of build cache
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: any) {
            return ImageApiFp(configuration).buildPrune(keepStorage, all, filters, options)(fetch, basePath);
        },
        /**
         * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
         * @summary Build an image
         * @param {Object} [body] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
         * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
         * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
         * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
         * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
         * @param {boolean} [q] Suppress verbose build output.
         * @param {boolean} [nocache] Do not use the cache when building the image.
         * @param {string} [cachefrom] JSON array of images used for build cache resolution.
         * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
         * @param {boolean} [rm] Remove intermediate containers after a successful build.
         * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
         * @param {number} [memory] Set memory limit for build.
         * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
         * @param {number} [cpushares] CPU shares (relative weight).
         * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
         * @param {number} [cpuperiod] The length of a CPU period in microseconds.
         * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
         * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
         * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
         * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
         * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
         * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to. 
         * @param {string} [contentType] 
         * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
         * @param {string} [platform] Platform in the format os[/arch[/variant]]
         * @param {string} [target] Target build stage
         * @param {string} [outputs] BuildKit output configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageBuild(body?: Object, dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: string, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, options?: any) {
            return ImageApiFp(configuration).imageBuild(body, dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a new image from a container
         * @param {ContainerConfig} [body] The container configuration
         * @param {string} [container] The ID or name of the container to commit
         * @param {string} [repo] Repository name for the created image
         * @param {string} [tag] Tag name for the create image
         * @param {string} [comment] Commit message
         * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
         * @param {boolean} [pause] Whether to pause the container before committing
         * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCommit(body?: ContainerConfig, container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, options?: any) {
            return ImageApiFp(configuration).imageCommit(body, container, repo, tag, comment, author, pause, changes, options)(fetch, basePath);
        },
        /**
         * Pull or import an image.
         * @summary Create an image
         * @param {string} [body] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
         * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
         * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
         * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
         * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
         * @param {string} [message] Set commit message for imported image.
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
         * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageCreate(body?: string, fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, options?: any) {
            return ImageApiFp(configuration).imageCreate(body, fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, options)(fetch, basePath);
        },
        /**
         * Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
         * @summary Remove an image
         * @param {string} name Image name or ID
         * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
         * @param {boolean} [noprune] Do not delete untagged parent images
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageDelete(name: string, force?: boolean, noprune?: boolean, options?: any) {
            return ImageApiFp(configuration).imageDelete(name, force, noprune, options)(fetch, basePath);
        },
        /**
         * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
         * @summary Export an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGet(name: string, options?: any) {
            return ImageApiFp(configuration).imageGet(name, options)(fetch, basePath);
        },
        /**
         * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Export several images
         * @param {Array<string>} [names] Image names to filter by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageGetAll(names?: Array<string>, options?: any) {
            return ImageApiFp(configuration).imageGetAll(names, options)(fetch, basePath);
        },
        /**
         * Return parent layers of an image.
         * @summary Get the history of an image
         * @param {string} name Image name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageHistory(name: string, options?: any) {
            return ImageApiFp(configuration).imageHistory(name, options)(fetch, basePath);
        },
        /**
         * Return low-level information about an image.
         * @summary Inspect an image
         * @param {string} name Image name or id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageInspect(name: string, options?: any) {
            return ImageApiFp(configuration).imageInspect(name, options)(fetch, basePath);
        },
        /**
         * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
         * @summary List Images
         * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
         * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
         * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageList(all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options?: any) {
            return ImageApiFp(configuration).imageList(all, filters, sharedSize, digests, options)(fetch, basePath);
        },
        /**
         * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
         * @summary Import images
         * @param {Object} [body] Tar archive containing images
         * @param {boolean} [quiet] Suppress progress details during load.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageLoad(body?: Object, quiet?: boolean, options?: any) {
            return ImageApiFp(configuration).imageLoad(body, quiet, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete unused images
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePrune(filters?: string, options?: any) {
            return ImageApiFp(configuration).imagePrune(filters, options)(fetch, basePath);
        },
        /**
         * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
         * @summary Push an image
         * @param {string} name Image name or ID.
         * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {string} [tag] The tag to associate with the image on the registry.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imagePush(name: string, xRegistryAuth: string, tag?: string, options?: any) {
            return ImageApiFp(configuration).imagePush(name, xRegistryAuth, tag, options)(fetch, basePath);
        },
        /**
         * Search for an image on Docker Hub.
         * @summary Search images
         * @param {string} term Term to search
         * @param {number} [limit] Maximum number of results to return
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; (deprecated, see below) - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  The &#x60;is-automated&#x60; filter is deprecated. The &#x60;is_automated&#x60; field has been deprecated by Docker Hub&#39;s search API. Consequently, searching for &#x60;is-automated&#x3D;true&#x60; will yield no results. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageSearch(term: string, limit?: number, filters?: string, options?: any) {
            return ImageApiFp(configuration).imageSearch(term, limit, filters, options)(fetch, basePath);
        },
        /**
         * Tag an image so that it becomes part of a repository.
         * @summary Tag an image
         * @param {string} name Image name or ID to tag.
         * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
         * @param {string} [tag] The name of the new tag.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        imageTag(name: string, repo?: string, tag?: string, options?: any) {
            return ImageApiFp(configuration).imageTag(name, repo, tag, options)(fetch, basePath);
        },
    };
};

/**
 * ImageApi - interface
 * @export
 * @interface ImageApi
 */
export interface ImageApiInterface {
    /**
     * 
     * @summary Delete builder cache
     * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
     * @param {boolean} [all] Remove all types of build cache
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: any): Promise<BuildPruneResponse>;

    /**
     * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     * @summary Build an image
     * @param {Object} [body] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
     * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
     * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
     * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
     * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
     * @param {boolean} [q] Suppress verbose build output.
     * @param {boolean} [nocache] Do not use the cache when building the image.
     * @param {string} [cachefrom] JSON array of images used for build cache resolution.
     * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
     * @param {boolean} [rm] Remove intermediate containers after a successful build.
     * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
     * @param {number} [memory] Set memory limit for build.
     * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
     * @param {number} [cpushares] CPU shares (relative weight).
     * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
     * @param {number} [cpuperiod] The length of a CPU period in microseconds.
     * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
     * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
     * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
     * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
     * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
     * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to. 
     * @param {string} [contentType] 
     * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
     * @param {string} [platform] Platform in the format os[/arch[/variant]]
     * @param {string} [target] Target build stage
     * @param {string} [outputs] BuildKit output configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageBuild(body?: Object, dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: string, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Create a new image from a container
     * @param {ContainerConfig} [body] The container configuration
     * @param {string} [container] The ID or name of the container to commit
     * @param {string} [repo] Repository name for the created image
     * @param {string} [tag] Tag name for the create image
     * @param {string} [comment] Commit message
     * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
     * @param {boolean} [pause] Whether to pause the container before committing
     * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageCommit(body?: ContainerConfig, container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, options?: any): Promise<IdResponse>;

    /**
     * Pull or import an image.
     * @summary Create an image
     * @param {string} [body] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
     * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
     * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
     * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
     * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
     * @param {string} [message] Set commit message for imported image.
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
     * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageCreate(body?: string, fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, options?: any): Promise<{}>;

    /**
     * Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
     * @summary Remove an image
     * @param {string} name Image name or ID
     * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
     * @param {boolean} [noprune] Do not delete untagged parent images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageDelete(name: string, force?: boolean, noprune?: boolean, options?: any): Promise<Array<ImageDeleteResponseItem>>;

    /**
     * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     * @summary Export an image
     * @param {string} name Image name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageGet(name: string, options?: any): Promise<Blob>;

    /**
     * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Export several images
     * @param {Array<string>} [names] Image names to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageGetAll(names?: Array<string>, options?: any): Promise<Blob>;

    /**
     * Return parent layers of an image.
     * @summary Get the history of an image
     * @param {string} name Image name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageHistory(name: string, options?: any): Promise<Array<HistoryResponseItem>>;

    /**
     * Return low-level information about an image.
     * @summary Inspect an image
     * @param {string} name Image name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageInspect(name: string, options?: any): Promise<ImageInspect>;

    /**
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     * @summary List Images
     * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
     * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
     * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageList(all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options?: any): Promise<Array<ImageSummary>>;

    /**
     * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Import images
     * @param {Object} [body] Tar archive containing images
     * @param {boolean} [quiet] Suppress progress details during load.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageLoad(body?: Object, quiet?: boolean, options?: any): Promise<{}>;

    /**
     * 
     * @summary Delete unused images
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imagePrune(filters?: string, options?: any): Promise<ImagePruneResponse>;

    /**
     * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     * @summary Push an image
     * @param {string} name Image name or ID.
     * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {string} [tag] The tag to associate with the image on the registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imagePush(name: string, xRegistryAuth: string, tag?: string, options?: any): Promise<{}>;

    /**
     * Search for an image on Docker Hub.
     * @summary Search images
     * @param {string} term Term to search
     * @param {number} [limit] Maximum number of results to return
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; (deprecated, see below) - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  The &#x60;is-automated&#x60; filter is deprecated. The &#x60;is_automated&#x60; field has been deprecated by Docker Hub&#39;s search API. Consequently, searching for &#x60;is-automated&#x3D;true&#x60; will yield no results. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageSearch(term: string, limit?: number, filters?: string, options?: any): Promise<Array<ImageSearchResponseItem>>;

    /**
     * Tag an image so that it becomes part of a repository.
     * @summary Tag an image
     * @param {string} name Image name or ID to tag.
     * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
     * @param {string} [tag] The name of the new tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    imageTag(name: string, repo?: string, tag?: string, options?: any): Promise<{}>;

}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI implements ImageApiInterface {
    /**
     * 
     * @summary Delete builder cache
     * @param {number} [keepStorage] Amount of disk space in bytes to keep for cache
     * @param {boolean} [all] Remove all types of build cache
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the list of build cache objects.  Available filters:  - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; remove cache older than &#x60;&lt;timestamp&gt;&#x60;. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon&#39;s local time. - &#x60;id&#x3D;&lt;id&gt;&#x60; - &#x60;parent&#x3D;&lt;id&gt;&#x60; - &#x60;type&#x3D;&lt;string&gt;&#x60; - &#x60;description&#x3D;&lt;string&gt;&#x60; - &#x60;inuse&#x60; - &#x60;shared&#x60; - &#x60;private&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public buildPrune(keepStorage?: number, all?: boolean, filters?: string, options?: any) {
        return ImageApiFp(this.configuration).buildPrune(keepStorage, all, filters, options)(this.fetch, this.basePath);
    }

    /**
     * Build an image from a tar archive with a `Dockerfile` in it.  The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).  The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.  The build is canceled if the client drops the connection by quitting or being killed. 
     * @summary Build an image
     * @param {Object} [body] A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz.
     * @param {string} [dockerfile] Path within the build context to the &#x60;Dockerfile&#x60;. This is ignored if &#x60;remote&#x60; is specified and points to an external &#x60;Dockerfile&#x60;.
     * @param {string} [t] A name and optional tag to apply to the image in the &#x60;name:tag&#x60; format. If you omit the tag the default &#x60;latest&#x60; value is assumed. You can provide several &#x60;t&#x60; parameters.
     * @param {string} [extrahosts] Extra hosts to add to /etc/hosts
     * @param {string} [remote] A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called &#x60;Dockerfile&#x60; and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the &#x60;dockerfile&#x60; parameter is also specified, there must be a file with the corresponding path inside the tarball.
     * @param {boolean} [q] Suppress verbose build output.
     * @param {boolean} [nocache] Do not use the cache when building the image.
     * @param {string} [cachefrom] JSON array of images used for build cache resolution.
     * @param {string} [pull] Attempt to pull the image even if an older image exists locally.
     * @param {boolean} [rm] Remove intermediate containers after a successful build.
     * @param {boolean} [forcerm] Always remove intermediate containers, even upon failure.
     * @param {number} [memory] Set memory limit for build.
     * @param {number} [memswap] Total memory (memory + swap). Set as &#x60;-1&#x60; to disable swap.
     * @param {number} [cpushares] CPU shares (relative weight).
     * @param {string} [cpusetcpus] CPUs in which to allow execution (e.g., &#x60;0-3&#x60;, &#x60;0,1&#x60;).
     * @param {number} [cpuperiod] The length of a CPU period in microseconds.
     * @param {number} [cpuquota] Microseconds of CPU time that the container can get in a CPU period.
     * @param {string} [buildargs] JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker uses the buildargs as the environment context for commands run via the &#x60;Dockerfile&#x60; RUN instruction, or for variable expansion in other &#x60;Dockerfile&#x60; instructions. This is not meant for passing secret values.  For example, the build arg &#x60;FOO&#x3D;bar&#x60; would become &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; in JSON. This would result in the query parameter &#x60;buildargs&#x3D;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60;. Note that &#x60;{\&quot;FOO\&quot;:\&quot;bar\&quot;}&#x60; should be URI component encoded.  [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg) 
     * @param {number} [shmsize] Size of &#x60;/dev/shm&#x60; in bytes. The size must be greater than 0. If omitted the system uses 64MB.
     * @param {boolean} [squash] Squash the resulting images layers into a single layer. *(Experimental release only.)*
     * @param {string} [labels] Arbitrary key/value labels to set on the image, as a JSON map of string pairs.
     * @param {string} [networkmode] Sets the networking mode for the run commands during build. Supported standard values are: &#x60;bridge&#x60;, &#x60;host&#x60;, &#x60;none&#x60;, and &#x60;container:&lt;name|id&gt;&#x60;. Any other value is taken as a custom network&#39;s name or ID to which this container should connect to. 
     * @param {string} [contentType] 
     * @param {string} [xRegistryConfig] This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.  The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:  &#x60;&#x60;&#x60; {   \&quot;docker.example.com\&quot;: {     \&quot;username\&quot;: \&quot;janedoe\&quot;,     \&quot;password\&quot;: \&quot;hunter2\&quot;   },   \&quot;https://index.docker.io/v1/\&quot;: {     \&quot;username\&quot;: \&quot;mobydock\&quot;,     \&quot;password\&quot;: \&quot;conta1n3rize14\&quot;   } } &#x60;&#x60;&#x60;  Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a &#x60;https://&#x60; prefix and a &#x60;/v1/&#x60; suffix even though Docker will prefer to use the v2 registry API. 
     * @param {string} [platform] Platform in the format os[/arch[/variant]]
     * @param {string} [target] Target build stage
     * @param {string} [outputs] BuildKit output configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageBuild(body?: Object, dockerfile?: string, t?: string, extrahosts?: string, remote?: string, q?: boolean, nocache?: boolean, cachefrom?: string, pull?: string, rm?: boolean, forcerm?: boolean, memory?: number, memswap?: number, cpushares?: number, cpusetcpus?: string, cpuperiod?: number, cpuquota?: number, buildargs?: string, shmsize?: number, squash?: boolean, labels?: string, networkmode?: string, contentType?: string, xRegistryConfig?: string, platform?: string, target?: string, outputs?: string, options?: any) {
        return ImageApiFp(this.configuration).imageBuild(body, dockerfile, t, extrahosts, remote, q, nocache, cachefrom, pull, rm, forcerm, memory, memswap, cpushares, cpusetcpus, cpuperiod, cpuquota, buildargs, shmsize, squash, labels, networkmode, contentType, xRegistryConfig, platform, target, outputs, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a new image from a container
     * @param {ContainerConfig} [body] The container configuration
     * @param {string} [container] The ID or name of the container to commit
     * @param {string} [repo] Repository name for the created image
     * @param {string} [tag] Tag name for the create image
     * @param {string} [comment] Commit message
     * @param {string} [author] Author of the image (e.g., &#x60;John Hannibal Smith &lt;hannibal@a-team.com&gt;&#x60;)
     * @param {boolean} [pause] Whether to pause the container before committing
     * @param {string} [changes] &#x60;Dockerfile&#x60; instructions to apply while committing
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageCommit(body?: ContainerConfig, container?: string, repo?: string, tag?: string, comment?: string, author?: string, pause?: boolean, changes?: string, options?: any) {
        return ImageApiFp(this.configuration).imageCommit(body, container, repo, tag, comment, author, pause, changes, options)(this.fetch, this.basePath);
    }

    /**
     * Pull or import an image.
     * @summary Create an image
     * @param {string} [body] Image content if the value &#x60;-&#x60; has been specified in fromSrc query parameter
     * @param {string} [fromImage] Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed.
     * @param {string} [fromSrc] Source to import. The value may be a URL from which the image can be retrieved or &#x60;-&#x60; to read the image from the request body. This parameter may only be used when importing an image.
     * @param {string} [repo] Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image.
     * @param {string} [tag] Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled.
     * @param {string} [message] Set commit message for imported image.
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {Array<string>} [changes] Apply &#x60;Dockerfile&#x60; instructions to the image that is created, for example: &#x60;changes&#x3D;ENV DEBUG&#x3D;true&#x60;. Note that &#x60;ENV DEBUG&#x3D;true&#x60; should be URI component encoded.  Supported &#x60;Dockerfile&#x60; instructions: &#x60;CMD&#x60;|&#x60;ENTRYPOINT&#x60;|&#x60;ENV&#x60;|&#x60;EXPOSE&#x60;|&#x60;ONBUILD&#x60;|&#x60;USER&#x60;|&#x60;VOLUME&#x60;|&#x60;WORKDIR&#x60; 
     * @param {string} [platform] Platform in the format os[/arch[/variant]].  When used in combination with the &#x60;fromImage&#x60; option, the daemon checks if the given image is present in the local image cache with the given OS and Architecture, and otherwise attempts to pull the image. If the option is not set, the host&#39;s native OS and Architecture are used. If the given image does not exist in the local image cache, the daemon attempts to pull the image with the host&#39;s native OS and Architecture. If the given image does exists in the local image cache, but its OS or architecture does not match, a warning is produced.  When used with the &#x60;fromSrc&#x60; option to import an image from an archive, this option sets the platform information for the imported image. If the option is not set, the host&#39;s native OS and Architecture are used for the imported image. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageCreate(body?: string, fromImage?: string, fromSrc?: string, repo?: string, tag?: string, message?: string, xRegistryAuth?: string, changes?: Array<string>, platform?: string, options?: any) {
        return ImageApiFp(this.configuration).imageCreate(body, fromImage, fromSrc, repo, tag, message, xRegistryAuth, changes, platform, options)(this.fetch, this.basePath);
    }

    /**
     * Remove an image, along with any untagged parent images that were referenced by that image.  Images can't be removed if they have descendant images, are being used by a running container or are being used by a build. 
     * @summary Remove an image
     * @param {string} name Image name or ID
     * @param {boolean} [force] Remove the image even if it is being used by stopped containers or has other tags
     * @param {boolean} [noprune] Do not delete untagged parent images
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageDelete(name: string, force?: boolean, noprune?: boolean, options?: any) {
        return ImageApiFp(this.configuration).imageDelete(name, force, noprune, options)(this.fetch, this.basePath);
    }

    /**
     * Get a tarball containing all images and metadata for a repository.  If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.  ### Image tarball format  An image tarball contains one directory per image layer (named using its long ID), each containing these files:  - `VERSION`: currently `1.0` - the file format version - `json`: detailed layer information, similar to `docker inspect layer_id` - `layer.tar`: A tarfile containing the filesystem changes in this layer  The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.  If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.  ```json {   \"hello-world\": {     \"latest\": \"565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1\"   } } ``` 
     * @summary Export an image
     * @param {string} name Image name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageGet(name: string, options?: any) {
        return ImageApiFp(this.configuration).imageGet(name, options)(this.fetch, this.basePath);
    }

    /**
     * Get a tarball containing all images and metadata for several image repositories.  For each value of the `names` parameter: if it is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned; if it is an image ID, similarly only that image (and its parents) are returned and there would be no names referenced in the 'repositories' file for this image ID.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Export several images
     * @param {Array<string>} [names] Image names to filter by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageGetAll(names?: Array<string>, options?: any) {
        return ImageApiFp(this.configuration).imageGetAll(names, options)(this.fetch, this.basePath);
    }

    /**
     * Return parent layers of an image.
     * @summary Get the history of an image
     * @param {string} name Image name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageHistory(name: string, options?: any) {
        return ImageApiFp(this.configuration).imageHistory(name, options)(this.fetch, this.basePath);
    }

    /**
     * Return low-level information about an image.
     * @summary Inspect an image
     * @param {string} name Image name or id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageInspect(name: string, options?: any) {
        return ImageApiFp(this.configuration).imageInspect(name, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image.
     * @summary List Images
     * @param {boolean} [all] Show all images. Only images from a final layer (no children) are shown by default.
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list.  Available filters:  - &#x60;before&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;dangling&#x3D;true&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; of an image label - &#x60;reference&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;) - &#x60;since&#x60;&#x3D;(&#x60;&lt;image-name&gt;[:&lt;tag&gt;]&#x60;,  &#x60;&lt;image id&gt;&#x60; or &#x60;&lt;image@digest&gt;&#x60;) - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; 
     * @param {boolean} [sharedSize] Compute and show shared size as a &#x60;SharedSize&#x60; field on each image.
     * @param {boolean} [digests] Show digest information as a &#x60;RepoDigests&#x60; field on each image.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageList(all?: boolean, filters?: string, sharedSize?: boolean, digests?: boolean, options?: any) {
        return ImageApiFp(this.configuration).imageList(all, filters, sharedSize, digests, options)(this.fetch, this.basePath);
    }

    /**
     * Load a set of images and tags into a repository.  For details on the format, see the [export image endpoint](#operation/ImageGet). 
     * @summary Import images
     * @param {Object} [body] Tar archive containing images
     * @param {boolean} [quiet] Suppress progress details during load.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageLoad(body?: Object, quiet?: boolean, options?: any) {
        return ImageApiFp(this.configuration).imageLoad(body, quiet, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete unused images
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;). Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), prune only    unused *and* untagged images. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), all unused images are pruned. - &#x60;until&#x3D;&lt;string&gt;&#x60; Prune images created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune images with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imagePrune(filters?: string, options?: any) {
        return ImageApiFp(this.configuration).imagePrune(filters, options)(this.fetch, this.basePath);
    }

    /**
     * Push an image to a registry.  If you wish to push an image on to a private registry, that image must already have a tag which references the registry. For example, `registry.example.com/myimage:latest`.  The push is cancelled if the HTTP connection is closed. 
     * @summary Push an image
     * @param {string} name Image name or ID.
     * @param {string} xRegistryAuth A base64url-encoded auth configuration.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {string} [tag] The tag to associate with the image on the registry.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imagePush(name: string, xRegistryAuth: string, tag?: string, options?: any) {
        return ImageApiFp(this.configuration).imagePush(name, xRegistryAuth, tag, options)(this.fetch, this.basePath);
    }

    /**
     * Search for an image on Docker Hub.
     * @summary Search images
     * @param {string} term Term to search
     * @param {number} [limit] Maximum number of results to return
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the images list. Available filters:  - &#x60;is-automated&#x3D;(true|false)&#x60; (deprecated, see below) - &#x60;is-official&#x3D;(true|false)&#x60; - &#x60;stars&#x3D;&lt;number&gt;&#x60; Matches images that has at least &#39;number&#39; stars.  The &#x60;is-automated&#x60; filter is deprecated. The &#x60;is_automated&#x60; field has been deprecated by Docker Hub&#39;s search API. Consequently, searching for &#x60;is-automated&#x3D;true&#x60; will yield no results. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageSearch(term: string, limit?: number, filters?: string, options?: any) {
        return ImageApiFp(this.configuration).imageSearch(term, limit, filters, options)(this.fetch, this.basePath);
    }

    /**
     * Tag an image so that it becomes part of a repository.
     * @summary Tag an image
     * @param {string} name Image name or ID to tag.
     * @param {string} [repo] The repository to tag in. For example, &#x60;someuser/someimage&#x60;.
     * @param {string} [tag] The name of the new tag.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public imageTag(name: string, repo?: string, tag?: string, options?: any) {
        return ImageApiFp(this.configuration).imageTag(name, repo, tag, options)(this.fetch, this.basePath);
    }

}

/**
 * NetworkApi - fetch parameter creator
 * @export
 */
export const NetworkApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
         * @summary Connect a container to a network
         * @param {NetworkConnectRequest} body 
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkConnect(body: NetworkConnectRequest, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling networkConnect.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling networkConnect.');
            }
            const localVarPath = `/networks/{id}/connect`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkConnectRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a network
         * @param {NetworkCreateRequest} body Network configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkCreate(body: NetworkCreateRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling networkCreate.');
            }
            const localVarPath = `/networks/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkCreateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a network
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling networkDelete.');
            }
            const localVarPath = `/networks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disconnect a container from a network
         * @param {NetworkDisconnectRequest} body 
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDisconnect(body: NetworkDisconnectRequest, id: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling networkDisconnect.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling networkDisconnect.');
            }
            const localVarPath = `/networks/{id}/disconnect`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NetworkDisconnectRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a network
         * @param {string} id Network ID or name
         * @param {boolean} [verbose] Detailed inspect output for troubleshooting
         * @param {string} [scope] Filter the network by scope (swarm, global, or local)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInspect(id: string, verbose?: boolean, scope?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling networkInspect.');
            }
            const localVarPath = `/networks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (verbose !== undefined) {
                localVarQueryParameter['verbose'] = verbose;
            }

            if (scope !== undefined) {
                localVarQueryParameter['scope'] = scope;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
         * @summary List networks
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/networks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused networks
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkPrune(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/networks/prune`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NetworkApi - functional programming interface
 * @export
 */
export const NetworkApiFp = function(configuration?: Configuration) {
    return {
        /**
         * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
         * @summary Connect a container to a network
         * @param {NetworkConnectRequest} body 
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkConnect(body: NetworkConnectRequest, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkConnect(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a network
         * @param {NetworkCreateRequest} body Network configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkCreate(body: NetworkCreateRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NetworkCreateResponse> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkCreate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove a network
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Disconnect a container from a network
         * @param {NetworkDisconnectRequest} body 
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDisconnect(body: NetworkDisconnectRequest, id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkDisconnect(body, id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a network
         * @param {string} id Network ID or name
         * @param {boolean} [verbose] Detailed inspect output for troubleshooting
         * @param {string} [scope] Filter the network by scope (swarm, global, or local)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInspect(id: string, verbose?: boolean, scope?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Network> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkInspect(id, verbose, scope, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
         * @summary List networks
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Network>> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete unused networks
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkPrune(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<NetworkPruneResponse> {
            const localVarFetchArgs = NetworkApiFetchParamCreator(configuration).networkPrune(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NetworkApi - factory interface
 * @export
 */
export const NetworkApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
         * @summary Connect a container to a network
         * @param {NetworkConnectRequest} body 
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkConnect(body: NetworkConnectRequest, id: string, options?: any) {
            return NetworkApiFp(configuration).networkConnect(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a network
         * @param {NetworkCreateRequest} body Network configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkCreate(body: NetworkCreateRequest, options?: any) {
            return NetworkApiFp(configuration).networkCreate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove a network
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDelete(id: string, options?: any) {
            return NetworkApiFp(configuration).networkDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Disconnect a container from a network
         * @param {NetworkDisconnectRequest} body 
         * @param {string} id Network ID or name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkDisconnect(body: NetworkDisconnectRequest, id: string, options?: any) {
            return NetworkApiFp(configuration).networkDisconnect(body, id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a network
         * @param {string} id Network ID or name
         * @param {boolean} [verbose] Detailed inspect output for troubleshooting
         * @param {string} [scope] Filter the network by scope (swarm, global, or local)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkInspect(id: string, verbose?: boolean, scope?: string, options?: any) {
            return NetworkApiFp(configuration).networkInspect(id, verbose, scope, options)(fetch, basePath);
        },
        /**
         * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
         * @summary List networks
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkList(filters?: string, options?: any) {
            return NetworkApiFp(configuration).networkList(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete unused networks
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        networkPrune(filters?: string, options?: any) {
            return NetworkApiFp(configuration).networkPrune(filters, options)(fetch, basePath);
        },
    };
};

/**
 * NetworkApi - interface
 * @export
 * @interface NetworkApi
 */
export interface NetworkApiInterface {
    /**
     * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
     * @summary Connect a container to a network
     * @param {NetworkConnectRequest} body 
     * @param {string} id Network ID or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkConnect(body: NetworkConnectRequest, id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Create a network
     * @param {NetworkCreateRequest} body Network configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkCreate(body: NetworkCreateRequest, options?: any): Promise<NetworkCreateResponse>;

    /**
     * 
     * @summary Remove a network
     * @param {string} id Network ID or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkDelete(id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Disconnect a container from a network
     * @param {NetworkDisconnectRequest} body 
     * @param {string} id Network ID or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkDisconnect(body: NetworkDisconnectRequest, id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a network
     * @param {string} id Network ID or name
     * @param {boolean} [verbose] Detailed inspect output for troubleshooting
     * @param {string} [scope] Filter the network by scope (swarm, global, or local)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkInspect(id: string, verbose?: boolean, scope?: string, options?: any): Promise<Network>;

    /**
     * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
     * @summary List networks
     * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkList(filters?: string, options?: any): Promise<Array<Network>>;

    /**
     * 
     * @summary Delete unused networks
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApiInterface
     */
    networkPrune(filters?: string, options?: any): Promise<NetworkPruneResponse>;

}

/**
 * NetworkApi - object-oriented interface
 * @export
 * @class NetworkApi
 * @extends {BaseAPI}
 */
export class NetworkApi extends BaseAPI implements NetworkApiInterface {
    /**
     * The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container
     * @summary Connect a container to a network
     * @param {NetworkConnectRequest} body 
     * @param {string} id Network ID or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkConnect(body: NetworkConnectRequest, id: string, options?: any) {
        return NetworkApiFp(this.configuration).networkConnect(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a network
     * @param {NetworkCreateRequest} body Network configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkCreate(body: NetworkCreateRequest, options?: any) {
        return NetworkApiFp(this.configuration).networkCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove a network
     * @param {string} id Network ID or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkDelete(id: string, options?: any) {
        return NetworkApiFp(this.configuration).networkDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Disconnect a container from a network
     * @param {NetworkDisconnectRequest} body 
     * @param {string} id Network ID or name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkDisconnect(body: NetworkDisconnectRequest, id: string, options?: any) {
        return NetworkApiFp(this.configuration).networkDisconnect(body, id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a network
     * @param {string} id Network ID or name
     * @param {boolean} [verbose] Detailed inspect output for troubleshooting
     * @param {string} [scope] Filter the network by scope (swarm, global, or local)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkInspect(id: string, verbose?: boolean, scope?: string, options?: any) {
        return NetworkApiFp(this.configuration).networkInspect(id, verbose, scope, options)(this.fetch, this.basePath);
    }

    /**
     * Returns a list of networks. For details on the format, see the [network inspect endpoint](#operation/NetworkInspect).  Note that it uses a different, smaller representation of a network than inspecting a single network. For example, the list of containers attached to the network is not propagated in API versions 1.28 and up. 
     * @summary List networks
     * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the networks list.  Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    networks that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only networks that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;driver-name&gt;&#x60; Matches a network&#39;s driver. - &#x60;id&#x3D;&lt;network-id&gt;&#x60; Matches all or part of a network ID. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60; of a network label. - &#x60;name&#x3D;&lt;network-name&gt;&#x60; Matches all or part of a network name. - &#x60;scope&#x3D;[\&quot;swarm\&quot;|\&quot;global\&quot;|\&quot;local\&quot;]&#x60; Filters networks by scope (&#x60;swarm&#x60;, &#x60;global&#x60;, or &#x60;local&#x60;). - &#x60;type&#x3D;[\&quot;custom\&quot;|\&quot;builtin\&quot;]&#x60; Filters networks by type. The &#x60;custom&#x60; keyword returns all user-defined networks. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkList(filters?: string, options?: any) {
        return NetworkApiFp(this.configuration).networkList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete unused networks
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;until&#x3D;&lt;timestamp&gt;&#x60; Prune networks created before this timestamp. The &#x60;&lt;timestamp&gt;&#x60; can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. &#x60;10m&#x60;, &#x60;1h30m&#x60;) computed relative to the daemon machine’s time. - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune networks with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    public networkPrune(filters?: string, options?: any) {
        return NetworkApiFp(this.configuration).networkPrune(filters, options)(this.fetch, this.basePath);
    }

}

/**
 * NodeApi - fetch parameter creator
 * @export
 */
export const NodeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a node
         * @param {string} id The ID or name of the node
         * @param {boolean} [force] Force remove a node from the swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeDelete(id: string, force?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling nodeDelete.');
            }
            const localVarPath = `/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a node
         * @param {string} id The ID or name of the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInspect(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling nodeInspect.');
            }
            const localVarPath = `/nodes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List nodes
         * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/nodes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a node
         * @param {string} id The ID of the node
         * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
         * @param {NodeSpec} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeUpdate(id: string, version: number, body?: NodeSpec, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling nodeUpdate.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling nodeUpdate.');
            }
            const localVarPath = `/nodes/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"NodeSpec" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NodeApi - functional programming interface
 * @export
 */
export const NodeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete a node
         * @param {string} id The ID or name of the node
         * @param {boolean} [force] Force remove a node from the swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeDelete(id: string, force?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NodeApiFetchParamCreator(configuration).nodeDelete(id, force, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a node
         * @param {string} id The ID or name of the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInspect(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Node> {
            const localVarFetchArgs = NodeApiFetchParamCreator(configuration).nodeInspect(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List nodes
         * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Node>> {
            const localVarFetchArgs = NodeApiFetchParamCreator(configuration).nodeList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a node
         * @param {string} id The ID of the node
         * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
         * @param {NodeSpec} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeUpdate(id: string, version: number, body?: NodeSpec, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = NodeApiFetchParamCreator(configuration).nodeUpdate(id, version, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * NodeApi - factory interface
 * @export
 */
export const NodeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Delete a node
         * @param {string} id The ID or name of the node
         * @param {boolean} [force] Force remove a node from the swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeDelete(id: string, force?: boolean, options?: any) {
            return NodeApiFp(configuration).nodeDelete(id, force, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a node
         * @param {string} id The ID or name of the node
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeInspect(id: string, options?: any) {
            return NodeApiFp(configuration).nodeInspect(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List nodes
         * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeList(filters?: string, options?: any) {
            return NodeApiFp(configuration).nodeList(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a node
         * @param {string} id The ID of the node
         * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
         * @param {NodeSpec} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        nodeUpdate(id: string, version: number, body?: NodeSpec, options?: any) {
            return NodeApiFp(configuration).nodeUpdate(id, version, body, options)(fetch, basePath);
        },
    };
};

/**
 * NodeApi - interface
 * @export
 * @interface NodeApi
 */
export interface NodeApiInterface {
    /**
     * 
     * @summary Delete a node
     * @param {string} id The ID or name of the node
     * @param {boolean} [force] Force remove a node from the swarm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApiInterface
     */
    nodeDelete(id: string, force?: boolean, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a node
     * @param {string} id The ID or name of the node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApiInterface
     */
    nodeInspect(id: string, options?: any): Promise<Node>;

    /**
     * 
     * @summary List nodes
     * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApiInterface
     */
    nodeList(filters?: string, options?: any): Promise<Array<Node>>;

    /**
     * 
     * @summary Update a node
     * @param {string} id The ID of the node
     * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
     * @param {NodeSpec} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApiInterface
     */
    nodeUpdate(id: string, version: number, body?: NodeSpec, options?: any): Promise<{}>;

}

/**
 * NodeApi - object-oriented interface
 * @export
 * @class NodeApi
 * @extends {BaseAPI}
 */
export class NodeApi extends BaseAPI implements NodeApiInterface {
    /**
     * 
     * @summary Delete a node
     * @param {string} id The ID or name of the node
     * @param {boolean} [force] Force remove a node from the swarm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeDelete(id: string, force?: boolean, options?: any) {
        return NodeApiFp(this.configuration).nodeDelete(id, force, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a node
     * @param {string} id The ID or name of the node
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeInspect(id: string, options?: any) {
        return NodeApiFp(this.configuration).nodeInspect(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List nodes
     * @param {string} [filters] Filters to process on the nodes list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;id&#x3D;&lt;node id&gt;&#x60; - &#x60;label&#x3D;&lt;engine label&gt;&#x60; - &#x60;membership&#x3D;&#x60;(&#x60;accepted&#x60;|&#x60;pending&#x60;)&#x60; - &#x60;name&#x3D;&lt;node name&gt;&#x60; - &#x60;node.label&#x3D;&lt;node label&gt;&#x60; - &#x60;role&#x3D;&#x60;(&#x60;manager&#x60;|&#x60;worker&#x60;)&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeList(filters?: string, options?: any) {
        return NodeApiFp(this.configuration).nodeList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a node
     * @param {string} id The ID of the node
     * @param {number} version The version number of the node object being updated. This is required to avoid conflicting writes. 
     * @param {NodeSpec} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodeApi
     */
    public nodeUpdate(id: string, version: number, body?: NodeSpec, options?: any) {
        return NodeApiFp(this.configuration).nodeUpdate(id, version, body, options)(this.fetch, this.basePath);
    }

}

/**
 * PluginApi - fetch parameter creator
 * @export
 */
export const PluginApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get plugin privileges
         * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginPrivileges(remote: string, options: any = {}): FetchArgs {
            // verify required parameter 'remote' is not null or undefined
            if (remote === null || remote === undefined) {
                throw new RequiredError('remote','Required parameter remote was null or undefined when calling getPluginPrivileges.');
            }
            const localVarPath = `/plugins/privileges`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Object} [body] Path to tar containing plugin rootfs and manifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginCreate(name: string, body?: Object, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginCreate.');
            }
            const localVarPath = `/plugins/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            localVarHeaderParameter['Content-Type'] = 'application/x-tar';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Object" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Remove a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDelete(name: string, force?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginDelete.');
            }
            const localVarPath = `/plugins/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Disable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Force disable a plugin even if still in use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDisable(name: string, force?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginDisable.');
            }
            const localVarPath = `/plugins/{name}/disable`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Enable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {number} [timeout] Set the HTTP client timeout (in seconds)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEnable(name: string, timeout?: number, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginEnable.');
            }
            const localVarPath = `/plugins/{name}/enable`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timeout !== undefined) {
                localVarQueryParameter['timeout'] = timeout;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginInspect(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginInspect.');
            }
            const localVarPath = `/plugins/{name}/json`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about installed plugins.
         * @summary List plugins
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/plugins`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
         * @summary Install a plugin
         * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPull(remote: string, body?: Array<PluginPrivilege>, name?: string, xRegistryAuth?: string, options: any = {}): FetchArgs {
            // verify required parameter 'remote' is not null or undefined
            if (remote === null || remote === undefined) {
                throw new RequiredError('remote','Required parameter remote was null or undefined when calling pluginPull.');
            }
            const localVarPath = `/plugins/pull`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;PluginPrivilege&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Push a plugin to the registry. 
         * @summary Push a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPush(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginPush.');
            }
            const localVarPath = `/plugins/{name}/push`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Configure a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginSet(name: string, body?: Array<string>, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginSet.');
            }
            const localVarPath = `/plugins/{name}/set`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;string&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upgrade a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginUpgrade(name: string, remote: string, body?: Array<PluginPrivilege>, xRegistryAuth?: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling pluginUpgrade.');
            }
            // verify required parameter 'remote' is not null or undefined
            if (remote === null || remote === undefined) {
                throw new RequiredError('remote','Required parameter remote was null or undefined when calling pluginUpgrade.');
            }
            const localVarPath = `/plugins/{name}/upgrade`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (remote !== undefined) {
                localVarQueryParameter['remote'] = remote;
            }

            if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Array&lt;PluginPrivilege&gt;" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PluginApi - functional programming interface
 * @export
 */
export const PluginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get plugin privileges
         * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginPrivileges(remote: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PluginPrivilege>> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).getPluginPrivileges(remote, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Create a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Object} [body] Path to tar containing plugin rootfs and manifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginCreate(name: string, body?: Object, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginCreate(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Remove a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDelete(name: string, force?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Plugin> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginDelete(name, force, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Disable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Force disable a plugin even if still in use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDisable(name: string, force?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginDisable(name, force, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Enable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {number} [timeout] Set the HTTP client timeout (in seconds)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEnable(name: string, timeout?: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginEnable(name, timeout, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginInspect(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Plugin> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginInspect(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns information about installed plugins.
         * @summary List plugins
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Plugin>> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
         * @summary Install a plugin
         * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPull(remote: string, body?: Array<PluginPrivilege>, name?: string, xRegistryAuth?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginPull(remote, body, name, xRegistryAuth, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Push a plugin to the registry. 
         * @summary Push a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPush(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginPush(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Configure a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginSet(name: string, body?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginSet(name, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Upgrade a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginUpgrade(name: string, remote: string, body?: Array<PluginPrivilege>, xRegistryAuth?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PluginApiFetchParamCreator(configuration).pluginUpgrade(name, remote, body, xRegistryAuth, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PluginApi - factory interface
 * @export
 */
export const PluginApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Get plugin privileges
         * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPluginPrivileges(remote: string, options?: any) {
            return PluginApiFp(configuration).getPluginPrivileges(remote, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Create a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Object} [body] Path to tar containing plugin rootfs and manifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginCreate(name: string, body?: Object, options?: any) {
            return PluginApiFp(configuration).pluginCreate(name, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Remove a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDelete(name: string, force?: boolean, options?: any) {
            return PluginApiFp(configuration).pluginDelete(name, force, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Disable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {boolean} [force] Force disable a plugin even if still in use. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginDisable(name: string, force?: boolean, options?: any) {
            return PluginApiFp(configuration).pluginDisable(name, force, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Enable a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {number} [timeout] Set the HTTP client timeout (in seconds)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginEnable(name: string, timeout?: number, options?: any) {
            return PluginApiFp(configuration).pluginEnable(name, timeout, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginInspect(name: string, options?: any) {
            return PluginApiFp(configuration).pluginInspect(name, options)(fetch, basePath);
        },
        /**
         * Returns information about installed plugins.
         * @summary List plugins
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginList(filters?: string, options?: any) {
            return PluginApiFp(configuration).pluginList(filters, options)(fetch, basePath);
        },
        /**
         * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
         * @summary Install a plugin
         * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPull(remote: string, body?: Array<PluginPrivilege>, name?: string, xRegistryAuth?: string, options?: any) {
            return PluginApiFp(configuration).pluginPull(remote, body, name, xRegistryAuth, options)(fetch, basePath);
        },
        /**
         * Push a plugin to the registry. 
         * @summary Push a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginPush(name: string, options?: any) {
            return PluginApiFp(configuration).pluginPush(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Configure a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {Array<string>} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginSet(name: string, body?: Array<string>, options?: any) {
            return PluginApiFp(configuration).pluginSet(name, body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Upgrade a plugin
         * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
         * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
         * @param {Array<PluginPrivilege>} [body] 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pluginUpgrade(name: string, remote: string, body?: Array<PluginPrivilege>, xRegistryAuth?: string, options?: any) {
            return PluginApiFp(configuration).pluginUpgrade(name, remote, body, xRegistryAuth, options)(fetch, basePath);
        },
    };
};

/**
 * PluginApi - interface
 * @export
 * @interface PluginApi
 */
export interface PluginApiInterface {
    /**
     * 
     * @summary Get plugin privileges
     * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    getPluginPrivileges(remote: string, options?: any): Promise<Array<PluginPrivilege>>;

    /**
     * 
     * @summary Create a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {Object} [body] Path to tar containing plugin rootfs and manifest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginCreate(name: string, body?: Object, options?: any): Promise<{}>;

    /**
     * 
     * @summary Remove a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginDelete(name: string, force?: boolean, options?: any): Promise<Plugin>;

    /**
     * 
     * @summary Disable a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {boolean} [force] Force disable a plugin even if still in use. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginDisable(name: string, force?: boolean, options?: any): Promise<{}>;

    /**
     * 
     * @summary Enable a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {number} [timeout] Set the HTTP client timeout (in seconds)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginEnable(name: string, timeout?: number, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginInspect(name: string, options?: any): Promise<Plugin>;

    /**
     * Returns information about installed plugins.
     * @summary List plugins
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginList(filters?: string, options?: any): Promise<Array<Plugin>>;

    /**
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
     * @summary Install a plugin
     * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param {Array<PluginPrivilege>} [body] 
     * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginPull(remote: string, body?: Array<PluginPrivilege>, name?: string, xRegistryAuth?: string, options?: any): Promise<{}>;

    /**
     * Push a plugin to the registry. 
     * @summary Push a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginPush(name: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Configure a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {Array<string>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginSet(name: string, body?: Array<string>, options?: any): Promise<{}>;

    /**
     * 
     * @summary Upgrade a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param {Array<PluginPrivilege>} [body] 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApiInterface
     */
    pluginUpgrade(name: string, remote: string, body?: Array<PluginPrivilege>, xRegistryAuth?: string, options?: any): Promise<{}>;

}

/**
 * PluginApi - object-oriented interface
 * @export
 * @class PluginApi
 * @extends {BaseAPI}
 */
export class PluginApi extends BaseAPI implements PluginApiInterface {
    /**
     * 
     * @summary Get plugin privileges
     * @param {string} remote The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public getPluginPrivileges(remote: string, options?: any) {
        return PluginApiFp(this.configuration).getPluginPrivileges(remote, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Create a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {Object} [body] Path to tar containing plugin rootfs and manifest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginCreate(name: string, body?: Object, options?: any) {
        return PluginApiFp(this.configuration).pluginCreate(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Remove a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {boolean} [force] Disable the plugin before removing. This may result in issues if the plugin is in use by a container. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginDelete(name: string, force?: boolean, options?: any) {
        return PluginApiFp(this.configuration).pluginDelete(name, force, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Disable a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {boolean} [force] Force disable a plugin even if still in use. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginDisable(name: string, force?: boolean, options?: any) {
        return PluginApiFp(this.configuration).pluginDisable(name, force, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Enable a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {number} [timeout] Set the HTTP client timeout (in seconds)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginEnable(name: string, timeout?: number, options?: any) {
        return PluginApiFp(this.configuration).pluginEnable(name, timeout, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginInspect(name: string, options?: any) {
        return PluginApiFp(this.configuration).pluginInspect(name, options)(this.fetch, this.basePath);
    }

    /**
     * Returns information about installed plugins.
     * @summary List plugins
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the plugin list.  Available filters:  - &#x60;capability&#x3D;&lt;capability name&gt;&#x60; - &#x60;enable&#x3D;&lt;true&gt;|&lt;false&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginList(filters?: string, options?: any) {
        return PluginApiFp(this.configuration).pluginList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * Pulls and installs a plugin. After the plugin is installed, it can be enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable). 
     * @summary Install a plugin
     * @param {string} remote Remote reference for plugin to install.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param {Array<PluginPrivilege>} [body] 
     * @param {string} [name] Local name for the pulled plugin.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginPull(remote: string, body?: Array<PluginPrivilege>, name?: string, xRegistryAuth?: string, options?: any) {
        return PluginApiFp(this.configuration).pluginPull(remote, body, name, xRegistryAuth, options)(this.fetch, this.basePath);
    }

    /**
     * Push a plugin to the registry. 
     * @summary Push a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginPush(name: string, options?: any) {
        return PluginApiFp(this.configuration).pluginPush(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Configure a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {Array<string>} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginSet(name: string, body?: Array<string>, options?: any) {
        return PluginApiFp(this.configuration).pluginSet(name, body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Upgrade a plugin
     * @param {string} name The name of the plugin. The &#x60;:latest&#x60; tag is optional, and is the default if omitted. 
     * @param {string} remote Remote reference to upgrade to.  The &#x60;:latest&#x60; tag is optional, and is used as the default if omitted. 
     * @param {Array<PluginPrivilege>} [body] 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration to use when pulling a plugin from a registry.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginApi
     */
    public pluginUpgrade(name: string, remote: string, body?: Array<PluginPrivilege>, xRegistryAuth?: string, options?: any) {
        return PluginApiFp(this.configuration).pluginUpgrade(name, remote, body, xRegistryAuth, options)(this.fetch, this.basePath);
    }

}

/**
 * SecretApi - fetch parameter creator
 * @export
 */
export const SecretApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a secret
         * @param {SecretsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretCreate(body?: SecretsCreateBody, options: any = {}): FetchArgs {
            const localVarPath = `/secrets/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SecretsCreateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling secretDelete.');
            }
            const localVarPath = `/secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretInspect(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling secretInspect.');
            }
            const localVarPath = `/secrets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List secrets
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/secrets`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a Secret
         * @param {string} id The ID or name of the secret
         * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
         * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[SecretInspect endpoint](#operation/SecretInspect) response values.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretUpdate(id: string, version: number, body?: SecretSpec, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling secretUpdate.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling secretUpdate.');
            }
            const localVarPath = `/secrets/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SecretSpec" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SecretApi - functional programming interface
 * @export
 */
export const SecretApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a secret
         * @param {SecretsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretCreate(body?: SecretsCreateBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<IdResponse> {
            const localVarFetchArgs = SecretApiFetchParamCreator(configuration).secretCreate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SecretApiFetchParamCreator(configuration).secretDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretInspect(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Secret> {
            const localVarFetchArgs = SecretApiFetchParamCreator(configuration).secretInspect(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List secrets
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Secret>> {
            const localVarFetchArgs = SecretApiFetchParamCreator(configuration).secretList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a Secret
         * @param {string} id The ID or name of the secret
         * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
         * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[SecretInspect endpoint](#operation/SecretInspect) response values.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretUpdate(id: string, version: number, body?: SecretSpec, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SecretApiFetchParamCreator(configuration).secretUpdate(id, version, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SecretApi - factory interface
 * @export
 */
export const SecretApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a secret
         * @param {SecretsCreateBody} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretCreate(body?: SecretsCreateBody, options?: any) {
            return SecretApiFp(configuration).secretCreate(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretDelete(id: string, options?: any) {
            return SecretApiFp(configuration).secretDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a secret
         * @param {string} id ID of the secret
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretInspect(id: string, options?: any) {
            return SecretApiFp(configuration).secretInspect(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List secrets
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretList(filters?: string, options?: any) {
            return SecretApiFp(configuration).secretList(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a Secret
         * @param {string} id The ID or name of the secret
         * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
         * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[SecretInspect endpoint](#operation/SecretInspect) response values.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        secretUpdate(id: string, version: number, body?: SecretSpec, options?: any) {
            return SecretApiFp(configuration).secretUpdate(id, version, body, options)(fetch, basePath);
        },
    };
};

/**
 * SecretApi - interface
 * @export
 * @interface SecretApi
 */
export interface SecretApiInterface {
    /**
     * 
     * @summary Create a secret
     * @param {SecretsCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApiInterface
     */
    secretCreate(body?: SecretsCreateBody, options?: any): Promise<IdResponse>;

    /**
     * 
     * @summary Delete a secret
     * @param {string} id ID of the secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApiInterface
     */
    secretDelete(id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a secret
     * @param {string} id ID of the secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApiInterface
     */
    secretInspect(id: string, options?: any): Promise<Secret>;

    /**
     * 
     * @summary List secrets
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApiInterface
     */
    secretList(filters?: string, options?: any): Promise<Array<Secret>>;

    /**
     * 
     * @summary Update a Secret
     * @param {string} id The ID or name of the secret
     * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
     * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[SecretInspect endpoint](#operation/SecretInspect) response values.

     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApiInterface
     */
    secretUpdate(id: string, version: number, body?: SecretSpec, options?: any): Promise<{}>;

}

/**
 * SecretApi - object-oriented interface
 * @export
 * @class SecretApi
 * @extends {BaseAPI}
 */
export class SecretApi extends BaseAPI implements SecretApiInterface {
    /**
     * 
     * @summary Create a secret
     * @param {SecretsCreateBody} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretCreate(body?: SecretsCreateBody, options?: any) {
        return SecretApiFp(this.configuration).secretCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a secret
     * @param {string} id ID of the secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretDelete(id: string, options?: any) {
        return SecretApiFp(this.configuration).secretDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a secret
     * @param {string} id ID of the secret
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretInspect(id: string, options?: any) {
        return SecretApiFp(this.configuration).secretInspect(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List secrets
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the secrets list.  Available filters:  - &#x60;id&#x3D;&lt;secret id&gt;&#x60; - &#x60;label&#x3D;&lt;key&gt; or label&#x3D;&lt;key&gt;&#x3D;value&#x60; - &#x60;name&#x3D;&lt;secret name&gt;&#x60; - &#x60;names&#x3D;&lt;secret name&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretList(filters?: string, options?: any) {
        return SecretApiFp(this.configuration).secretList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a Secret
     * @param {string} id The ID or name of the secret
     * @param {number} version The version number of the secret object being updated. This is required to avoid conflicting writes. 
     * @param {SecretSpec} [body] The spec of the secret to update. Currently, only the Labels field
can be updated. All other fields must remain unchanged from the
[SecretInspect endpoint](#operation/SecretInspect) response values.

     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecretApi
     */
    public secretUpdate(id: string, version: number, body?: SecretSpec, options?: any) {
        return SecretApiFp(this.configuration).secretUpdate(id, version, body, options)(this.fetch, this.basePath);
    }

}

/**
 * ServiceApi - fetch parameter creator
 * @export
 */
export const ServiceApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a service
         * @param {ServicesCreateBody} body 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceCreate(body: ServicesCreateBody, xRegistryAuth?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling serviceCreate.');
            }
            const localVarPath = `/services/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ServicesCreateBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a service
         * @param {string} id ID or name of service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceDelete(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling serviceDelete.');
            }
            const localVarPath = `/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a service
         * @param {string} id ID or name of service.
         * @param {boolean} [insertDefaults] Fill empty fields with default values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceInspect(id: string, insertDefaults?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling serviceInspect.');
            }
            const localVarPath = `/services/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (insertDefaults !== undefined) {
                localVarQueryParameter['insertDefaults'] = insertDefaults;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List services
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
         * @param {boolean} [status] Include service status, with count of running and desired tasks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceList(filters?: string, status?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/services`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get service logs
         * @param {string} id ID or name of the service
         * @param {boolean} [details] Show service context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling serviceLogs.');
            }
            const localVarPath = `/services/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a service
         * @param {IdUpdateBody1} body 
         * @param {string} id ID or name of service.
         * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
         * @param {string} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
         * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceUpdate(body: IdUpdateBody1, id: string, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling serviceUpdate.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling serviceUpdate.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling serviceUpdate.');
            }
            const localVarPath = `/services/{id}/update`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (registryAuthFrom !== undefined) {
                localVarQueryParameter['registryAuthFrom'] = registryAuthFrom;
            }

            if (rollback !== undefined) {
                localVarQueryParameter['rollback'] = rollback;
            }

            if (xRegistryAuth !== undefined && xRegistryAuth !== null) {
                localVarHeaderParameter['X-Registry-Auth'] = String(xRegistryAuth);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"IdUpdateBody1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a service
         * @param {ServicesCreateBody} body 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceCreate(body: ServicesCreateBody, xRegistryAuth?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceCreateResponse> {
            const localVarFetchArgs = ServiceApiFetchParamCreator(configuration).serviceCreate(body, xRegistryAuth, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete a service
         * @param {string} id ID or name of service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceDelete(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ServiceApiFetchParamCreator(configuration).serviceDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a service
         * @param {string} id ID or name of service.
         * @param {boolean} [insertDefaults] Fill empty fields with default values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceInspect(id: string, insertDefaults?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Service> {
            const localVarFetchArgs = ServiceApiFetchParamCreator(configuration).serviceInspect(id, insertDefaults, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List services
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
         * @param {boolean} [status] Include service status, with count of running and desired tasks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceList(filters?: string, status?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Service>> {
            const localVarFetchArgs = ServiceApiFetchParamCreator(configuration).serviceList(filters, status, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get service logs
         * @param {string} id ID or name of the service
         * @param {boolean} [details] Show service context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = ServiceApiFetchParamCreator(configuration).serviceLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a service
         * @param {IdUpdateBody1} body 
         * @param {string} id ID or name of service.
         * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
         * @param {string} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
         * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceUpdate(body: IdUpdateBody1, id: string, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ServiceUpdateResponse> {
            const localVarFetchArgs = ServiceApiFetchParamCreator(configuration).serviceUpdate(body, id, version, registryAuthFrom, rollback, xRegistryAuth, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a service
         * @param {ServicesCreateBody} body 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceCreate(body: ServicesCreateBody, xRegistryAuth?: string, options?: any) {
            return ServiceApiFp(configuration).serviceCreate(body, xRegistryAuth, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete a service
         * @param {string} id ID or name of service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceDelete(id: string, options?: any) {
            return ServiceApiFp(configuration).serviceDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a service
         * @param {string} id ID or name of service.
         * @param {boolean} [insertDefaults] Fill empty fields with default values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceInspect(id: string, insertDefaults?: boolean, options?: any) {
            return ServiceApiFp(configuration).serviceInspect(id, insertDefaults, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List services
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
         * @param {boolean} [status] Include service status, with count of running and desired tasks. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceList(filters?: string, status?: boolean, options?: any) {
            return ServiceApiFp(configuration).serviceList(filters, status, options)(fetch, basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get service logs
         * @param {string} id ID or name of the service
         * @param {boolean} [details] Show service context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any) {
            return ServiceApiFp(configuration).serviceLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a service
         * @param {IdUpdateBody1} body 
         * @param {string} id ID or name of service.
         * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
         * @param {string} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
         * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
         * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        serviceUpdate(body: IdUpdateBody1, id: string, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, options?: any) {
            return ServiceApiFp(configuration).serviceUpdate(body, id, version, registryAuthFrom, rollback, xRegistryAuth, options)(fetch, basePath);
        },
    };
};

/**
 * ServiceApi - interface
 * @export
 * @interface ServiceApi
 */
export interface ServiceApiInterface {
    /**
     * 
     * @summary Create a service
     * @param {ServicesCreateBody} body 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApiInterface
     */
    serviceCreate(body: ServicesCreateBody, xRegistryAuth?: string, options?: any): Promise<ServiceCreateResponse>;

    /**
     * 
     * @summary Delete a service
     * @param {string} id ID or name of service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApiInterface
     */
    serviceDelete(id: string, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a service
     * @param {string} id ID or name of service.
     * @param {boolean} [insertDefaults] Fill empty fields with default values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApiInterface
     */
    serviceInspect(id: string, insertDefaults?: boolean, options?: any): Promise<Service>;

    /**
     * 
     * @summary List services
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
     * @param {boolean} [status] Include service status, with count of running and desired tasks. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApiInterface
     */
    serviceList(filters?: string, status?: boolean, options?: any): Promise<Array<Service>>;

    /**
     * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get service logs
     * @param {string} id ID or name of the service
     * @param {boolean} [details] Show service context and extra details provided to logs.
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApiInterface
     */
    serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any): Promise<Blob>;

    /**
     * 
     * @summary Update a service
     * @param {IdUpdateBody1} body 
     * @param {string} id ID or name of service.
     * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
     * @param {string} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
     * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApiInterface
     */
    serviceUpdate(body: IdUpdateBody1, id: string, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, options?: any): Promise<ServiceUpdateResponse>;

}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI implements ServiceApiInterface {
    /**
     * 
     * @summary Create a service
     * @param {ServicesCreateBody} body 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceCreate(body: ServicesCreateBody, xRegistryAuth?: string, options?: any) {
        return ServiceApiFp(this.configuration).serviceCreate(body, xRegistryAuth, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete a service
     * @param {string} id ID or name of service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceDelete(id: string, options?: any) {
        return ServiceApiFp(this.configuration).serviceDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a service
     * @param {string} id ID or name of service.
     * @param {boolean} [insertDefaults] Fill empty fields with default values.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceInspect(id: string, insertDefaults?: boolean, options?: any) {
        return ServiceApiFp(this.configuration).serviceInspect(id, insertDefaults, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List services
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the services list.  Available filters:  - &#x60;id&#x3D;&lt;service id&gt;&#x60; - &#x60;label&#x3D;&lt;service label&gt;&#x60; - &#x60;mode&#x3D;[\&quot;replicated\&quot;|\&quot;global\&quot;]&#x60; - &#x60;name&#x3D;&lt;service name&gt;&#x60; 
     * @param {boolean} [status] Include service status, with count of running and desired tasks. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceList(filters?: string, status?: boolean, options?: any) {
        return ServiceApiFp(this.configuration).serviceList(filters, status, options)(this.fetch, this.basePath);
    }

    /**
     * Get `stdout` and `stderr` logs from a service. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get service logs
     * @param {string} id ID or name of the service
     * @param {boolean} [details] Show service context and extra details provided to logs.
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any) {
        return ServiceApiFp(this.configuration).serviceLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a service
     * @param {IdUpdateBody1} body 
     * @param {string} id ID or name of service.
     * @param {number} version The version number of the service object being updated. This is required to avoid conflicting writes. This version number should be the value as currently set on the service *before* the update. You can find the current version by calling &#x60;GET /services/{id}&#x60; 
     * @param {string} [registryAuthFrom] If the &#x60;X-Registry-Auth&#x60; header is not specified, this parameter indicates where to find registry authorization credentials. 
     * @param {string} [rollback] Set to this parameter to &#x60;previous&#x60; to cause a server-side rollback to the previous service spec. The supplied spec will be ignored in this case. 
     * @param {string} [xRegistryAuth] A base64url-encoded auth configuration for pulling from private registries.  Refer to the [authentication section](#section/Authentication) for details. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public serviceUpdate(body: IdUpdateBody1, id: string, version: number, registryAuthFrom?: string, rollback?: string, xRegistryAuth?: string, options?: any) {
        return ServiceApiFp(this.configuration).serviceUpdate(body, id, version, registryAuthFrom, rollback, xRegistryAuth, options)(this.fetch, this.basePath);
    }

}

/**
 * SessionApi - fetch parameter creator
 * @export
 */
export const SessionApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
         * @summary Initialize interactive session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        session(options: any = {}): FetchArgs {
            const localVarPath = `/session`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SessionApi - functional programming interface
 * @export
 */
export const SessionApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
         * @summary Initialize interactive session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        session(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SessionApiFetchParamCreator(configuration).session(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SessionApi - factory interface
 * @export
 */
export const SessionApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
         * @summary Initialize interactive session
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        session(options?: any) {
            return SessionApiFp(configuration).session(options)(fetch, basePath);
        },
    };
};

/**
 * SessionApi - interface
 * @export
 * @interface SessionApi
 */
export interface SessionApiInterface {
    /**
     * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
     * @summary Initialize interactive session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApiInterface
     */
    session(options?: any): Promise<{}>;

}

/**
 * SessionApi - object-oriented interface
 * @export
 * @class SessionApi
 * @extends {BaseAPI}
 */
export class SessionApi extends BaseAPI implements SessionApiInterface {
    /**
     * Start a new interactive session with a server. Session allows server to call back to the client for advanced capabilities.  ### Hijacking  This endpoint hijacks the HTTP connection to HTTP2 transport that allows the client to expose gPRC services on that connection.  For example, the client sends this request to upgrade the connection:  ``` POST /session HTTP/1.1 Upgrade: h2c Connection: Upgrade ```  The Docker daemon responds with a `101 UPGRADED` response follow with the raw stream:  ``` HTTP/1.1 101 UPGRADED Connection: Upgrade Upgrade: h2c ``` 
     * @summary Initialize interactive session
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SessionApi
     */
    public session(options?: any) {
        return SessionApiFp(this.configuration).session(options)(this.fetch, this.basePath);
    }

}

/**
 * SwarmApi - fetch parameter creator
 * @export
 */
export const SwarmApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initialize a new swarm
         * @param {SwarmInitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInit(body: SwarmInitRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling swarmInit.');
            }
            const localVarPath = `/swarm/init`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SwarmInitRequest1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInspect(options: any = {}): FetchArgs {
            const localVarPath = `/swarm`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join an existing swarm
         * @param {SwarmJoinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmJoin(body: SwarmJoinRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling swarmJoin.');
            }
            const localVarPath = `/swarm/join`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SwarmJoinRequest1" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leave a swarm
         * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmLeave(force?: boolean, options: any = {}): FetchArgs {
            const localVarPath = `/swarm/leave`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Unlock a locked manager
         * @param {SwarmUnlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlock(body: SwarmUnlockRequest, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling swarmUnlock.');
            }
            const localVarPath = `/swarm/unlock`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SwarmUnlockRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the unlock key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlockkey(options: any = {}): FetchArgs {
            const localVarPath = `/swarm/unlockkey`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a swarm
         * @param {SwarmSpec} body 
         * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
         * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
         * @param {boolean} [rotateManagerToken] Rotate the manager join token.
         * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUpdate(body: SwarmSpec, version: number, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling swarmUpdate.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling swarmUpdate.');
            }
            const localVarPath = `/swarm/update`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            if (rotateWorkerToken !== undefined) {
                localVarQueryParameter['rotateWorkerToken'] = rotateWorkerToken;
            }

            if (rotateManagerToken !== undefined) {
                localVarQueryParameter['rotateManagerToken'] = rotateManagerToken;
            }

            if (rotateManagerUnlockKey !== undefined) {
                localVarQueryParameter['rotateManagerUnlockKey'] = rotateManagerUnlockKey;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SwarmSpec" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SwarmApi - functional programming interface
 * @export
 */
export const SwarmApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Initialize a new swarm
         * @param {SwarmInitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInit(body: SwarmInitRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmInit(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInspect(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Swarm> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmInspect(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Join an existing swarm
         * @param {SwarmJoinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmJoin(body: SwarmJoinRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmJoin(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Leave a swarm
         * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmLeave(force?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmLeave(force, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Unlock a locked manager
         * @param {SwarmUnlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlock(body: SwarmUnlockRequest, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmUnlock(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get the unlock key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlockkey(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UnlockKeyResponse> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmUnlockkey(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Update a swarm
         * @param {SwarmSpec} body 
         * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
         * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
         * @param {boolean} [rotateManagerToken] Rotate the manager join token.
         * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUpdate(body: SwarmSpec, version: number, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = SwarmApiFetchParamCreator(configuration).swarmUpdate(body, version, rotateWorkerToken, rotateManagerToken, rotateManagerUnlockKey, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SwarmApi - factory interface
 * @export
 */
export const SwarmApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Initialize a new swarm
         * @param {SwarmInitRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInit(body: SwarmInitRequest, options?: any) {
            return SwarmApiFp(configuration).swarmInit(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect swarm
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmInspect(options?: any) {
            return SwarmApiFp(configuration).swarmInspect(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Join an existing swarm
         * @param {SwarmJoinRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmJoin(body: SwarmJoinRequest, options?: any) {
            return SwarmApiFp(configuration).swarmJoin(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Leave a swarm
         * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmLeave(force?: boolean, options?: any) {
            return SwarmApiFp(configuration).swarmLeave(force, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Unlock a locked manager
         * @param {SwarmUnlockRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlock(body: SwarmUnlockRequest, options?: any) {
            return SwarmApiFp(configuration).swarmUnlock(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get the unlock key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUnlockkey(options?: any) {
            return SwarmApiFp(configuration).swarmUnlockkey(options)(fetch, basePath);
        },
        /**
         * 
         * @summary Update a swarm
         * @param {SwarmSpec} body 
         * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
         * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
         * @param {boolean} [rotateManagerToken] Rotate the manager join token.
         * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        swarmUpdate(body: SwarmSpec, version: number, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options?: any) {
            return SwarmApiFp(configuration).swarmUpdate(body, version, rotateWorkerToken, rotateManagerToken, rotateManagerUnlockKey, options)(fetch, basePath);
        },
    };
};

/**
 * SwarmApi - interface
 * @export
 * @interface SwarmApi
 */
export interface SwarmApiInterface {
    /**
     * 
     * @summary Initialize a new swarm
     * @param {SwarmInitRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmInit(body: SwarmInitRequest, options?: any): Promise<string>;

    /**
     * 
     * @summary Inspect swarm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmInspect(options?: any): Promise<Swarm>;

    /**
     * 
     * @summary Join an existing swarm
     * @param {SwarmJoinRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmJoin(body: SwarmJoinRequest, options?: any): Promise<{}>;

    /**
     * 
     * @summary Leave a swarm
     * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmLeave(force?: boolean, options?: any): Promise<{}>;

    /**
     * 
     * @summary Unlock a locked manager
     * @param {SwarmUnlockRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmUnlock(body: SwarmUnlockRequest, options?: any): Promise<{}>;

    /**
     * 
     * @summary Get the unlock key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmUnlockkey(options?: any): Promise<UnlockKeyResponse>;

    /**
     * 
     * @summary Update a swarm
     * @param {SwarmSpec} body 
     * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
     * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
     * @param {boolean} [rotateManagerToken] Rotate the manager join token.
     * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApiInterface
     */
    swarmUpdate(body: SwarmSpec, version: number, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options?: any): Promise<{}>;

}

/**
 * SwarmApi - object-oriented interface
 * @export
 * @class SwarmApi
 * @extends {BaseAPI}
 */
export class SwarmApi extends BaseAPI implements SwarmApiInterface {
    /**
     * 
     * @summary Initialize a new swarm
     * @param {SwarmInitRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmInit(body: SwarmInitRequest, options?: any) {
        return SwarmApiFp(this.configuration).swarmInit(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect swarm
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmInspect(options?: any) {
        return SwarmApiFp(this.configuration).swarmInspect(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Join an existing swarm
     * @param {SwarmJoinRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmJoin(body: SwarmJoinRequest, options?: any) {
        return SwarmApiFp(this.configuration).swarmJoin(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Leave a swarm
     * @param {boolean} [force] Force leave swarm, even if this is the last manager or that it will break the cluster. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmLeave(force?: boolean, options?: any) {
        return SwarmApiFp(this.configuration).swarmLeave(force, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Unlock a locked manager
     * @param {SwarmUnlockRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmUnlock(body: SwarmUnlockRequest, options?: any) {
        return SwarmApiFp(this.configuration).swarmUnlock(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get the unlock key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmUnlockkey(options?: any) {
        return SwarmApiFp(this.configuration).swarmUnlockkey(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Update a swarm
     * @param {SwarmSpec} body 
     * @param {number} version The version number of the swarm object being updated. This is required to avoid conflicting writes. 
     * @param {boolean} [rotateWorkerToken] Rotate the worker join token.
     * @param {boolean} [rotateManagerToken] Rotate the manager join token.
     * @param {boolean} [rotateManagerUnlockKey] Rotate the manager unlock key.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SwarmApi
     */
    public swarmUpdate(body: SwarmSpec, version: number, rotateWorkerToken?: boolean, rotateManagerToken?: boolean, rotateManagerUnlockKey?: boolean, options?: any) {
        return SwarmApiFp(this.configuration).swarmUpdate(body, version, rotateWorkerToken, rotateManagerToken, rotateManagerUnlockKey, options)(this.fetch, this.basePath);
    }

}

/**
 * SystemApi - fetch parameter creator
 * @export
 */
export const SystemApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
         * @summary Check auth configuration
         * @param {AuthConfig} [body] Authentication to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemAuth(body?: AuthConfig, options: any = {}): FetchArgs {
            const localVarPath = `/auth`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AuthConfig" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data usage information
         * @param {Array<string>} [type] Object types, for which to compute and return data. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDataUsage(type?: Array<string>, options: any = {}): FetchArgs {
            const localVarPath = `/system/df`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type) {
                localVarQueryParameter['type'] = type;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
         * @summary Monitor events
         * @param {string} [since] Show events created since this timestamp then stream new events.
         * @param {string} [until] Show events created until this timestamp then stop streaming.
         * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemEvents(since?: string, until?: string, filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/events`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = until;
            }

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfo(options: any = {}): FetchArgs {
            const localVarPath = `/info`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPing(options: any = {}): FetchArgs {
            const localVarPath = `/_ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingHead(options: any = {}): FetchArgs {
            const localVarPath = `/_ping`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'HEAD' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the version of Docker that is running and various information about the system that Docker is running on.
         * @summary Get version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersion(options: any = {}): FetchArgs {
            const localVarPath = `/version`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
         * @summary Check auth configuration
         * @param {AuthConfig} [body] Authentication to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemAuth(body?: AuthConfig, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SystemAuthResponse> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemAuth(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get data usage information
         * @param {Array<string>} [type] Object types, for which to compute and return data. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDataUsage(type?: Array<string>, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SystemDataUsageResponse> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemDataUsage(type, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
         * @summary Monitor events
         * @param {string} [since] Show events created since this timestamp then stream new events.
         * @param {string} [until] Show events created until this timestamp then stop streaming.
         * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemEvents(since?: string, until?: string, filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<EventMessage> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemEvents(since, until, filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfo(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SystemInfo> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemInfo(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPing(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemPing(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingHead(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<string> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemPingHead(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Returns the version of Docker that is running and various information about the system that Docker is running on.
         * @summary Get version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersion(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<SystemVersion> {
            const localVarFetchArgs = SystemApiFetchParamCreator(configuration).systemVersion(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
         * @summary Check auth configuration
         * @param {AuthConfig} [body] Authentication to check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemAuth(body?: AuthConfig, options?: any) {
            return SystemApiFp(configuration).systemAuth(body, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get data usage information
         * @param {Array<string>} [type] Object types, for which to compute and return data. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDataUsage(type?: Array<string>, options?: any) {
            return SystemApiFp(configuration).systemDataUsage(type, options)(fetch, basePath);
        },
        /**
         * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
         * @summary Monitor events
         * @param {string} [since] Show events created since this timestamp then stream new events.
         * @param {string} [until] Show events created until this timestamp then stop streaming.
         * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemEvents(since?: string, until?: string, filters?: string, options?: any) {
            return SystemApiFp(configuration).systemEvents(since, until, filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Get system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfo(options?: any) {
            return SystemApiFp(configuration).systemInfo(options)(fetch, basePath);
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPing(options?: any) {
            return SystemApiFp(configuration).systemPing(options)(fetch, basePath);
        },
        /**
         * This is a dummy endpoint you can use to test if the server is accessible.
         * @summary Ping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingHead(options?: any) {
            return SystemApiFp(configuration).systemPingHead(options)(fetch, basePath);
        },
        /**
         * Returns the version of Docker that is running and various information about the system that Docker is running on.
         * @summary Get version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersion(options?: any) {
            return SystemApiFp(configuration).systemVersion(options)(fetch, basePath);
        },
    };
};

/**
 * SystemApi - interface
 * @export
 * @interface SystemApi
 */
export interface SystemApiInterface {
    /**
     * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
     * @summary Check auth configuration
     * @param {AuthConfig} [body] Authentication to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemAuth(body?: AuthConfig, options?: any): Promise<SystemAuthResponse>;

    /**
     * 
     * @summary Get data usage information
     * @param {Array<string>} [type] Object types, for which to compute and return data. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemDataUsage(type?: Array<string>, options?: any): Promise<SystemDataUsageResponse>;

    /**
     * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
     * @summary Monitor events
     * @param {string} [since] Show events created since this timestamp then stream new events.
     * @param {string} [until] Show events created until this timestamp then stop streaming.
     * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemEvents(since?: string, until?: string, filters?: string, options?: any): Promise<EventMessage>;

    /**
     * 
     * @summary Get system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemInfo(options?: any): Promise<SystemInfo>;

    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemPing(options?: any): Promise<string>;

    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemPingHead(options?: any): Promise<string>;

    /**
     * Returns the version of Docker that is running and various information about the system that Docker is running on.
     * @summary Get version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApiInterface
     */
    systemVersion(options?: any): Promise<SystemVersion>;

}

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI implements SystemApiInterface {
    /**
     * Validate credentials for a registry and, if available, get an identity token for accessing the registry without password. 
     * @summary Check auth configuration
     * @param {AuthConfig} [body] Authentication to check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemAuth(body?: AuthConfig, options?: any) {
        return SystemApiFp(this.configuration).systemAuth(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get data usage information
     * @param {Array<string>} [type] Object types, for which to compute and return data. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemDataUsage(type?: Array<string>, options?: any) {
        return SystemApiFp(this.configuration).systemDataUsage(type, options)(this.fetch, this.basePath);
    }

    /**
     * Stream real-time events from the server.  Various objects within Docker report events when something happens to them.  Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`  Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`  Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`  Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`  The Docker daemon reports these events: `reload`  Services report these events: `create`, `update`, and `remove`  Nodes report these events: `create`, `update`, and `remove`  Secrets report these events: `create`, `update`, and `remove`  Configs report these events: `create`, `update`, and `remove`  The Builder reports `prune` events 
     * @summary Monitor events
     * @param {string} [since] Show events created since this timestamp then stream new events.
     * @param {string} [until] Show events created until this timestamp then stop streaming.
     * @param {string} [filters] A JSON encoded value of filters (a &#x60;map[string][]string&#x60;) to process on the event list. Available filters:  - &#x60;config&#x3D;&lt;string&gt;&#x60; config name or ID - &#x60;container&#x3D;&lt;string&gt;&#x60; container name or ID - &#x60;daemon&#x3D;&lt;string&gt;&#x60; daemon name or ID - &#x60;event&#x3D;&lt;string&gt;&#x60; event type - &#x60;image&#x3D;&lt;string&gt;&#x60; image name or ID - &#x60;label&#x3D;&lt;string&gt;&#x60; image or container label - &#x60;network&#x3D;&lt;string&gt;&#x60; network name or ID - &#x60;node&#x3D;&lt;string&gt;&#x60; node ID - &#x60;plugin&#x60;&#x3D;&lt;string&gt; plugin name or ID - &#x60;scope&#x60;&#x3D;&lt;string&gt; local or swarm - &#x60;secret&#x3D;&lt;string&gt;&#x60; secret name or ID - &#x60;service&#x3D;&lt;string&gt;&#x60; service name or ID - &#x60;type&#x3D;&lt;string&gt;&#x60; object to filter by, one of &#x60;container&#x60;, &#x60;image&#x60;, &#x60;volume&#x60;, &#x60;network&#x60;, &#x60;daemon&#x60;, &#x60;plugin&#x60;, &#x60;node&#x60;, &#x60;service&#x60;, &#x60;secret&#x60; or &#x60;config&#x60; - &#x60;volume&#x3D;&lt;string&gt;&#x60; volume name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemEvents(since?: string, until?: string, filters?: string, options?: any) {
        return SystemApiFp(this.configuration).systemEvents(since, until, filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Get system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemInfo(options?: any) {
        return SystemApiFp(this.configuration).systemInfo(options)(this.fetch, this.basePath);
    }

    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemPing(options?: any) {
        return SystemApiFp(this.configuration).systemPing(options)(this.fetch, this.basePath);
    }

    /**
     * This is a dummy endpoint you can use to test if the server is accessible.
     * @summary Ping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemPingHead(options?: any) {
        return SystemApiFp(this.configuration).systemPingHead(options)(this.fetch, this.basePath);
    }

    /**
     * Returns the version of Docker that is running and various information about the system that Docker is running on.
     * @summary Get version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemVersion(options?: any) {
        return SystemApiFp(this.configuration).systemVersion(options)(this.fetch, this.basePath);
    }

}

/**
 * TaskApi - fetch parameter creator
 * @export
 */
export const TaskApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Inspect a task
         * @param {string} id ID of the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInspect(id: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling taskInspect.');
            }
            const localVarPath = `/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List tasks
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/tasks`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get task logs
         * @param {string} id ID of the task
         * @param {boolean} [details] Show task context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options: any = {}): FetchArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling taskLogs.');
            }
            const localVarPath = `/tasks/{id}/logs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (details !== undefined) {
                localVarQueryParameter['details'] = details;
            }

            if (follow !== undefined) {
                localVarQueryParameter['follow'] = follow;
            }

            if (stdout !== undefined) {
                localVarQueryParameter['stdout'] = stdout;
            }

            if (stderr !== undefined) {
                localVarQueryParameter['stderr'] = stderr;
            }

            if (since !== undefined) {
                localVarQueryParameter['since'] = since;
            }

            if (timestamps !== undefined) {
                localVarQueryParameter['timestamps'] = timestamps;
            }

            if (tail !== undefined) {
                localVarQueryParameter['tail'] = tail;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Inspect a task
         * @param {string} id ID of the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInspect(id: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Task> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).taskInspect(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List tasks
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<Task>> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).taskList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get task logs
         * @param {string} id ID of the task
         * @param {boolean} [details] Show task context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Blob> {
            const localVarFetchArgs = TaskApiFetchParamCreator(configuration).taskLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Inspect a task
         * @param {string} id ID of the task
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskInspect(id: string, options?: any) {
            return TaskApiFp(configuration).taskInspect(id, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List tasks
         * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskList(filters?: string, options?: any) {
            return TaskApiFp(configuration).taskList(filters, options)(fetch, basePath);
        },
        /**
         * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
         * @summary Get task logs
         * @param {string} id ID of the task
         * @param {boolean} [details] Show task context and extra details provided to logs.
         * @param {boolean} [follow] Keep connection after returning logs.
         * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
         * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
         * @param {number} [since] Only return logs since this time, as a UNIX timestamp
         * @param {boolean} [timestamps] Add timestamps to every log line
         * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any) {
            return TaskApiFp(configuration).taskLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options)(fetch, basePath);
        },
    };
};

/**
 * TaskApi - interface
 * @export
 * @interface TaskApi
 */
export interface TaskApiInterface {
    /**
     * 
     * @summary Inspect a task
     * @param {string} id ID of the task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskInspect(id: string, options?: any): Promise<Task>;

    /**
     * 
     * @summary List tasks
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskList(filters?: string, options?: any): Promise<Array<Task>>;

    /**
     * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get task logs
     * @param {string} id ID of the task
     * @param {boolean} [details] Show task context and extra details provided to logs.
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApiInterface
     */
    taskLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any): Promise<Blob>;

}

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI implements TaskApiInterface {
    /**
     * 
     * @summary Inspect a task
     * @param {string} id ID of the task
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskInspect(id: string, options?: any) {
        return TaskApiFp(this.configuration).taskInspect(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List tasks
     * @param {string} [filters] A JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the tasks list.  Available filters:  - &#x60;desired-state&#x3D;(running | shutdown | accepted)&#x60; - &#x60;id&#x3D;&lt;task id&gt;&#x60; - &#x60;label&#x3D;key&#x60; or &#x60;label&#x3D;\&quot;key&#x3D;value\&quot;&#x60; - &#x60;name&#x3D;&lt;task name&gt;&#x60; - &#x60;node&#x3D;&lt;node id or name&gt;&#x60; - &#x60;service&#x3D;&lt;service name&gt;&#x60; 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskList(filters?: string, options?: any) {
        return TaskApiFp(this.configuration).taskList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * Get `stdout` and `stderr` logs from a task. See also [`/containers/{id}/logs`](#operation/ContainerLogs).  **Note**: This endpoint works only for services with the `local`, `json-file` or `journald` logging drivers. 
     * @summary Get task logs
     * @param {string} id ID of the task
     * @param {boolean} [details] Show task context and extra details provided to logs.
     * @param {boolean} [follow] Keep connection after returning logs.
     * @param {boolean} [stdout] Return logs from &#x60;stdout&#x60;
     * @param {boolean} [stderr] Return logs from &#x60;stderr&#x60;
     * @param {number} [since] Only return logs since this time, as a UNIX timestamp
     * @param {boolean} [timestamps] Add timestamps to every log line
     * @param {string} [tail] Only return this number of log lines from the end of the logs. Specify as an integer or &#x60;all&#x60; to output all log lines. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskApi
     */
    public taskLogs(id: string, details?: boolean, follow?: boolean, stdout?: boolean, stderr?: boolean, since?: number, timestamps?: boolean, tail?: string, options?: any) {
        return TaskApiFp(this.configuration).taskLogs(id, details, follow, stdout, stderr, since, timestamps, tail, options)(this.fetch, this.basePath);
    }

}

/**
 * VolumeApi - fetch parameter creator
 * @export
 */
export const VolumeApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a volume
         * @param {VolumeCreateOptions} body Volume configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreate(body: VolumeCreateOptions, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling volumeCreate.');
            }
            const localVarPath = `/volumes/create`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VolumeCreateOptions" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Instruct the driver to remove the volume.
         * @summary Remove a volume
         * @param {string} name Volume name or ID
         * @param {boolean} [force] Force the removal of the volume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeDelete(name: string, force?: boolean, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling volumeDelete.');
            }
            const localVarPath = `/volumes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (force !== undefined) {
                localVarQueryParameter['force'] = force;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Inspect a volume
         * @param {string} name Volume name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeInspect(name: string, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling volumeInspect.');
            }
            const localVarPath = `/volumes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List volumes
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeList(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/volumes`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete unused volumes
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumePrune(filters?: string, options: any = {}): FetchArgs {
            const localVarPath = `/volumes/prune`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
         * @param {string} name The name or ID of the volume
         * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume&#39;s &#x60;ClusterVolume&#x60; field. 
         * @param {VolumesNameBody} [body] The spec of the volume to update. Currently, only Availability may
change. All other fields must remain unchanged.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeUpdate(name: string, version: number, body?: VolumesNameBody, options: any = {}): FetchArgs {
            // verify required parameter 'name' is not null or undefined
            if (name === null || name === undefined) {
                throw new RequiredError('name','Required parameter name was null or undefined when calling volumeUpdate.');
            }
            // verify required parameter 'version' is not null or undefined
            if (version === null || version === undefined) {
                throw new RequiredError('version','Required parameter version was null or undefined when calling volumeUpdate.');
            }
            const localVarPath = `/volumes/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (version !== undefined) {
                localVarQueryParameter['version'] = version;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"VolumesNameBody" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VolumeApi - functional programming interface
 * @export
 */
export const VolumeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a volume
         * @param {VolumeCreateOptions} body Volume configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreate(body: VolumeCreateOptions, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Volume> {
            const localVarFetchArgs = VolumeApiFetchParamCreator(configuration).volumeCreate(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Instruct the driver to remove the volume.
         * @summary Remove a volume
         * @param {string} name Volume name or ID
         * @param {boolean} [force] Force the removal of the volume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeDelete(name: string, force?: boolean, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VolumeApiFetchParamCreator(configuration).volumeDelete(name, force, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Inspect a volume
         * @param {string} name Volume name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeInspect(name: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Volume> {
            const localVarFetchArgs = VolumeApiFetchParamCreator(configuration).volumeInspect(name, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary List volumes
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeList(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VolumeListResponse> {
            const localVarFetchArgs = VolumeApiFetchParamCreator(configuration).volumeList(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Delete unused volumes
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumePrune(filters?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<VolumePruneResponse> {
            const localVarFetchArgs = VolumeApiFetchParamCreator(configuration).volumePrune(filters, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
         * @param {string} name The name or ID of the volume
         * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume&#39;s &#x60;ClusterVolume&#x60; field. 
         * @param {VolumesNameBody} [body] The spec of the volume to update. Currently, only Availability may
change. All other fields must remain unchanged.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeUpdate(name: string, version: number, body?: VolumesNameBody, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = VolumeApiFetchParamCreator(configuration).volumeUpdate(name, version, body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * VolumeApi - factory interface
 * @export
 */
export const VolumeApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Create a volume
         * @param {VolumeCreateOptions} body Volume configuration
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeCreate(body: VolumeCreateOptions, options?: any) {
            return VolumeApiFp(configuration).volumeCreate(body, options)(fetch, basePath);
        },
        /**
         * Instruct the driver to remove the volume.
         * @summary Remove a volume
         * @param {string} name Volume name or ID
         * @param {boolean} [force] Force the removal of the volume
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeDelete(name: string, force?: boolean, options?: any) {
            return VolumeApiFp(configuration).volumeDelete(name, force, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Inspect a volume
         * @param {string} name Volume name or ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeInspect(name: string, options?: any) {
            return VolumeApiFp(configuration).volumeInspect(name, options)(fetch, basePath);
        },
        /**
         * 
         * @summary List volumes
         * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeList(filters?: string, options?: any) {
            return VolumeApiFp(configuration).volumeList(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Delete unused volumes
         * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumePrune(filters?: string, options?: any) {
            return VolumeApiFp(configuration).volumePrune(filters, options)(fetch, basePath);
        },
        /**
         * 
         * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
         * @param {string} name The name or ID of the volume
         * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume&#39;s &#x60;ClusterVolume&#x60; field. 
         * @param {VolumesNameBody} [body] The spec of the volume to update. Currently, only Availability may
change. All other fields must remain unchanged.

         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        volumeUpdate(name: string, version: number, body?: VolumesNameBody, options?: any) {
            return VolumeApiFp(configuration).volumeUpdate(name, version, body, options)(fetch, basePath);
        },
    };
};

/**
 * VolumeApi - interface
 * @export
 * @interface VolumeApi
 */
export interface VolumeApiInterface {
    /**
     * 
     * @summary Create a volume
     * @param {VolumeCreateOptions} body Volume configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApiInterface
     */
    volumeCreate(body: VolumeCreateOptions, options?: any): Promise<Volume>;

    /**
     * Instruct the driver to remove the volume.
     * @summary Remove a volume
     * @param {string} name Volume name or ID
     * @param {boolean} [force] Force the removal of the volume
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApiInterface
     */
    volumeDelete(name: string, force?: boolean, options?: any): Promise<{}>;

    /**
     * 
     * @summary Inspect a volume
     * @param {string} name Volume name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApiInterface
     */
    volumeInspect(name: string, options?: any): Promise<Volume>;

    /**
     * 
     * @summary List volumes
     * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApiInterface
     */
    volumeList(filters?: string, options?: any): Promise<VolumeListResponse>;

    /**
     * 
     * @summary Delete unused volumes
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApiInterface
     */
    volumePrune(filters?: string, options?: any): Promise<VolumePruneResponse>;

    /**
     * 
     * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
     * @param {string} name The name or ID of the volume
     * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume&#39;s &#x60;ClusterVolume&#x60; field. 
     * @param {VolumesNameBody} [body] The spec of the volume to update. Currently, only Availability may
change. All other fields must remain unchanged.

     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApiInterface
     */
    volumeUpdate(name: string, version: number, body?: VolumesNameBody, options?: any): Promise<{}>;

}

/**
 * VolumeApi - object-oriented interface
 * @export
 * @class VolumeApi
 * @extends {BaseAPI}
 */
export class VolumeApi extends BaseAPI implements VolumeApiInterface {
    /**
     * 
     * @summary Create a volume
     * @param {VolumeCreateOptions} body Volume configuration
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeCreate(body: VolumeCreateOptions, options?: any) {
        return VolumeApiFp(this.configuration).volumeCreate(body, options)(this.fetch, this.basePath);
    }

    /**
     * Instruct the driver to remove the volume.
     * @summary Remove a volume
     * @param {string} name Volume name or ID
     * @param {boolean} [force] Force the removal of the volume
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeDelete(name: string, force?: boolean, options?: any) {
        return VolumeApiFp(this.configuration).volumeDelete(name, force, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Inspect a volume
     * @param {string} name Volume name or ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeInspect(name: string, options?: any) {
        return VolumeApiFp(this.configuration).volumeInspect(name, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary List volumes
     * @param {string} [filters] JSON encoded value of the filters (a &#x60;map[string][]string&#x60;) to process on the volumes list. Available filters:  - &#x60;dangling&#x3D;&lt;boolean&gt;&#x60; When set to &#x60;true&#x60; (or &#x60;1&#x60;), returns all    volumes that are not in use by a container. When set to &#x60;false&#x60;    (or &#x60;0&#x60;), only volumes that are in use by one or more    containers are returned. - &#x60;driver&#x3D;&lt;volume-driver-name&gt;&#x60; Matches volumes based on their driver. - &#x60;label&#x3D;&lt;key&gt;&#x60; or &#x60;label&#x3D;&lt;key&gt;:&lt;value&gt;&#x60; Matches volumes based on    the presence of a &#x60;label&#x60; alone or a &#x60;label&#x60; and a value. - &#x60;name&#x3D;&lt;volume-name&gt;&#x60; Matches all or part of a volume name. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeList(filters?: string, options?: any) {
        return VolumeApiFp(this.configuration).volumeList(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Delete unused volumes
     * @param {string} [filters] Filters to process on the prune list, encoded as JSON (a &#x60;map[string][]string&#x60;).  Available filters: - &#x60;label&#x60; (&#x60;label&#x3D;&lt;key&gt;&#x60;, &#x60;label&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;, &#x60;label!&#x3D;&lt;key&gt;&#x60;, or &#x60;label!&#x3D;&lt;key&gt;&#x3D;&lt;value&gt;&#x60;) Prune volumes with (or without, in case &#x60;label!&#x3D;...&#x60; is used) the specified labels. - &#x60;all&#x60; (&#x60;all&#x3D;true&#x60;) - Consider all (local) volumes for pruning and not just anonymous volumes. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumePrune(filters?: string, options?: any) {
        return VolumeApiFp(this.configuration).volumePrune(filters, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary \"Update a volume. Valid only for Swarm cluster volumes\" 
     * @param {string} name The name or ID of the volume
     * @param {number} version The version number of the volume being updated. This is required to avoid conflicting writes. Found in the volume&#39;s &#x60;ClusterVolume&#x60; field. 
     * @param {VolumesNameBody} [body] The spec of the volume to update. Currently, only Availability may
change. All other fields must remain unchanged.

     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VolumeApi
     */
    public volumeUpdate(name: string, version: number, body?: VolumesNameBody, options?: any) {
        return VolumeApiFp(this.configuration).volumeUpdate(name, version, body, options)(this.fetch, this.basePath);
    }

}

