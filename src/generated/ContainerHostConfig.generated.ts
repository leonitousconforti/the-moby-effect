import * as Schema from "@effect/schema/Schema";
import * as MobySchemas from "../schemas/index.js";
import * as MobySchemasGenerated from "./index.js";

export class ContainerHostConfig extends Schema.Class<ContainerHostConfig>("ContainerHostConfig")(
    {
        Binds: Schema.NullOr(Schema.Array(Schema.String)),
        ContainerIDFile: Schema.String,
        LogConfig: MobySchemasGenerated.ContainerLogConfig,
        NetworkMode: Schema.String,
        PortBindings: Schema.NullOr(Schema.Record(Schema.String, Schema.Array(MobySchemasGenerated.PortBinding))),
        RestartPolicy: MobySchemasGenerated.ContainerRestartPolicy,
        AutoRemove: Schema.Boolean,
        VolumeDriver: Schema.String,
        VolumesFrom: Schema.NullOr(Schema.Array(Schema.String)),
        ConsoleSize: Schema.Array(MobySchemas.UInt64).pipe(Schema.itemsCount(2)),
        Annotations: Schema.optional(Schema.Record(Schema.String, Schema.String), { nullable: true }),
        CapAdd: Schema.NullOr(Schema.Array(Schema.String)),
        CapDrop: Schema.NullOr(Schema.Array(Schema.String)),
        CgroupnsMode: Schema.String,
        Dns: Schema.NullOr(Schema.Array(Schema.String)),
        DnsOptions: Schema.NullOr(Schema.Array(Schema.String)),
        DnsSearch: Schema.NullOr(Schema.Array(Schema.String)),
        ExtraHosts: Schema.NullOr(Schema.Array(Schema.String)),
        GroupAdd: Schema.NullOr(Schema.Array(Schema.String)),
        IpcMode: Schema.String,
        Cgroup: Schema.String,
        Links: Schema.NullOr(Schema.Array(Schema.String)),
        OomScoreAdj: MobySchemas.Int64,
        PidMode: Schema.String,
        Privileged: Schema.Boolean,
        PublishAllPorts: Schema.Boolean,
        ReadonlyRootfs: Schema.Boolean,
        SecurityOpt: Schema.NullOr(Schema.Array(Schema.String)),
        StorageOpt: Schema.optional(Schema.Record(Schema.String, Schema.String), { nullable: true }),
        Tmpfs: Schema.optional(Schema.Record(Schema.String, Schema.String), { nullable: true }),
        UTSMode: Schema.String,
        UsernsMode: Schema.String,
        ShmSize: MobySchemas.Int64,
        Sysctls: Schema.optional(Schema.Record(Schema.String, Schema.String), { nullable: true }),
        Runtime: Schema.optional(Schema.String),
        Isolation: Schema.String,
        CpuShares: MobySchemas.Int64,
        Memory: MobySchemas.Int64,
        NanoCpus: MobySchemas.Int64,
        CgroupParent: Schema.String,
        BlkioWeight: MobySchemas.UInt16,
        BlkioWeightDevice: Schema.NullOr(Schema.Array(MobySchemasGenerated.WeightDevice)),
        BlkioDeviceReadBps: Schema.NullOr(Schema.Array(MobySchemasGenerated.ThrottleDevice)),
        BlkioDeviceWriteBps: Schema.NullOr(Schema.Array(MobySchemasGenerated.ThrottleDevice)),
        BlkioDeviceReadIOps: Schema.NullOr(Schema.Array(MobySchemasGenerated.ThrottleDevice)),
        BlkioDeviceWriteIOps: Schema.NullOr(Schema.Array(MobySchemasGenerated.ThrottleDevice)),
        CpuPeriod: MobySchemas.Int64,
        CpuQuota: MobySchemas.Int64,
        CpuRealtimePeriod: MobySchemas.Int64,
        CpuRealtimeRuntime: MobySchemas.Int64,
        CpusetCpus: Schema.String,
        CpusetMems: Schema.String,
        Devices: Schema.NullOr(Schema.Array(MobySchemasGenerated.ContainerDeviceMapping)),
        DeviceCgroupRules: Schema.NullOr(Schema.Array(Schema.String)),
        DeviceRequests: Schema.NullOr(Schema.Array(MobySchemasGenerated.ContainerDeviceRequest)),
        KernelMemory: Schema.optional(MobySchemas.Int64),
        KernelMemoryTCP: Schema.optional(MobySchemas.Int64),
        MemoryReservation: MobySchemas.Int64,
        MemorySwap: MobySchemas.Int64,
        MemorySwappiness: Schema.NullOr(MobySchemas.Int64),
        OomKillDisable: Schema.NullOr(Schema.Boolean),
        PidsLimit: Schema.NullOr(MobySchemas.Int64),
        Ulimits: Schema.NullOr(Schema.Array(MobySchemasGenerated.Ulimit)),
        CpuCount: MobySchemas.Int64,
        CpuPercent: MobySchemas.Int64,
        IOMaximumIOps: MobySchemas.UInt64,
        IOMaximumBandwidth: MobySchemas.UInt64,
        Mounts: Schema.optional(Schema.Array(MobySchemasGenerated.Mount), { nullable: true }),
        MaskedPaths: Schema.NullOr(Schema.Array(Schema.String)),
        ReadonlyPaths: Schema.NullOr(Schema.Array(Schema.String)),
        Init: Schema.optional(Schema.Boolean, { nullable: true }),
    },
    {
        identifier: "ContainerHostConfig",
        title: "container.HostConfig",
    }
) {}
