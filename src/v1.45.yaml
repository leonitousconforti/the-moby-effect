# A Swagger 2.0 (a.k.a. OpenAPI) definition of the Engine API.
#
# This is used for generating API documentation and the types used by the
# client/server. See api/README.md for more information.
#
# Some style notes:
# - This file is used by ReDoc, which allows GitHub Flavored Markdown in
#   descriptions.
# - There is no maximum line length, for ease of editing and pretty diffs.
# - operationIds are in the format "NounVerb", with a singular noun.

swagger: "2.0"
schemes:
    - "http"
    - "https"
produces:
    - "application/json"
    - "text/plain"
consumes:
    - "application/json"
    - "text/plain"
basePath: "/v1.45"
info:
    title: "Docker Engine API"
    version: "1.45"
    x-logo:
        url: "https://docs.docker.com/assets/images/logo-docker-main.png"
    description: |
        The Engine API is an HTTP API served by Docker Engine. It is the API the
        Docker client uses to communicate with the Engine, so everything the Docker
        client can do can be done with the API.

        Most of the client's commands map directly to API endpoints (e.g. `docker ps`
        is `GET /containers/json`). The notable exception is running containers,
        which consists of several API calls.

        # Errors

        The API uses standard HTTP status codes to indicate the success or failure
        of the API call. The body of the response will be JSON in the following
        format:

        ```
        {
          "message": "page not found"
        }
        ```

        # Versioning

        The API is usually changed in each release, so API calls are versioned to
        ensure that clients don't break. To lock to a specific version of the API,
        you prefix the URL with its version, for example, call `/v1.30/info` to use
        the v1.30 version of the `/info` endpoint. If the API version specified in
        the URL is not supported by the daemon, a HTTP `400 Bad Request` error message
        is returned.

        If you omit the version-prefix, the current version of the API (v1.45) is used.
        For example, calling `/info` is the same as calling `/v1.45/info`. Using the
        API without a version-prefix is deprecated and will be removed in a future release.

        Engine releases in the near future should support this version of the API,
        so your client will continue to work even if it is talking to a newer Engine.

        The API uses an open schema model, which means server may add extra properties
        to responses. Likewise, the server will ignore any extra query parameters and
        request body properties. When you write clients, you need to ignore additional
        properties in responses to ensure they do not break when talking to newer
        daemons.


        # Authentication

        Authentication for registries is handled client side. The client has to send
        authentication details to various endpoints that need to communicate with
        registries, such as `POST /images/(name)/push`. These are sent as
        `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5)
        (JSON) string with the following structure:

        ```
        {
          "username": "string",
          "password": "string",
          "email": "string",
          "serveraddress": "string"
        }
        ```

        The `serveraddress` is a domain/IP without a protocol. Throughout this
        structure, double quotes are required.

        If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth),
        you can just pass this instead of credentials:

        ```
        {
          "identitytoken": "9cbaf023786cd7..."
        }
        ```

# The tags on paths define the menu sections in the ReDoc documentation, so
# the usage of tags must make sense for that:
# - They should be singular, not plural.
# - There should not be too many tags, or the menu becomes unwieldy. For
#   example, it is preferable to add a path to the "System" tag instead of
#   creating a tag with a single path in it.
# - The order of tags in this list defines the order in the menu.
tags:
    # Primary objects
    - name: "Container"
      x-displayName: "Containers"
      description: |
          Create and manage containers.
    - name: "Image"
      x-displayName: "Images"
    - name: "Network"
      x-displayName: "Networks"
      description: |
          Networks are user-defined networks that containers can be attached to.
          See the [networking documentation](https://docs.docker.com/network/)
          for more information.
    - name: "Volume"
      x-displayName: "Volumes"
      description: |
          Create and manage persistent storage that can be attached to containers.
    - name: "Exec"
      x-displayName: "Exec"
      description: |
          Run new commands inside running containers. Refer to the
          [command-line reference](https://docs.docker.com/engine/reference/commandline/exec/)
          for more information.

          To exec a command in a container, you first need to create an exec instance,
          then start it. These two API endpoints are wrapped up in a single command-line
          command, `docker exec`.

    # Swarm things
    - name: "Swarm"
      x-displayName: "Swarm"
      description: |
          Engines can be clustered together in a swarm. Refer to the
          [swarm mode documentation](https://docs.docker.com/engine/swarm/)
          for more information.
    - name: "Node"
      x-displayName: "Nodes"
      description: |
          Nodes are instances of the Engine participating in a swarm. Swarm mode
          must be enabled for these endpoints to work.
    - name: "Service"
      x-displayName: "Services"
      description: |
          Services are the definitions of tasks to run on a swarm. Swarm mode must
          be enabled for these endpoints to work.
    - name: "Task"
      x-displayName: "Tasks"
      description: |
          A task is a container running on a swarm. It is the atomic scheduling unit
          of swarm. Swarm mode must be enabled for these endpoints to work.
    - name: "Secret"
      x-displayName: "Secrets"
      description: |
          Secrets are sensitive data that can be used by services. Swarm mode must
          be enabled for these endpoints to work.
    - name: "Config"
      x-displayName: "Configs"
      description: |
          Configs are application configurations that can be used by services. Swarm
          mode must be enabled for these endpoints to work.
    # System things
    - name: "Plugin"
      x-displayName: "Plugins"
    - name: "System"
      x-displayName: "System"

definitions:
    Health:
        description: |
            Health stores information about the container's healthcheck results.
        type: "object"
        x-nullable: true
        properties:
            Status:
                description: |
                    Status is one of `none`, `starting`, `healthy` or `unhealthy`

                    - "none"      Indicates there is no healthcheck
                    - "starting"  Starting indicates that the container is not yet ready
                    - "healthy"   Healthy indicates that the container is running correctly
                    - "unhealthy" Unhealthy indicates that the container has a problem
                type: "string"
                enum:
                    - "none"
                    - "starting"
                    - "healthy"
                    - "unhealthy"
                example: "healthy"
            FailingStreak:
                description: "FailingStreak is the number of consecutive failures"
                type: "integer"
                example: 0
            Log:
                type: "array"
                description: |
                    Log contains the last few results (oldest first)
                items:
                    $ref: "#/definitions/HealthcheckResult"

    HostConfig:
        description: "Container configuration that depends on the host we are running on"
        allOf:
            - $ref: "#/definitions/Resources"
            - type: "object"
              properties:
                  # Applicable to all platforms
                  Binds:
                      type: "array"
                      description: |
                          A list of volume bindings for this container. Each volume binding
                          is a string in one of these forms:

                          - `host-src:container-dest[:options]` to bind-mount a host path
                            into the container. Both `host-src`, and `container-dest` must
                            be an _absolute_ path.
                          - `volume-name:container-dest[:options]` to bind-mount a volume
                            managed by a volume driver into the container. `container-dest`
                            must be an _absolute_ path.

                          `options` is an optional, comma-delimited list of:

                          - `nocopy` disables automatic copying of data from the container
                            path to the volume. The `nocopy` flag only applies to named volumes.
                          - `[ro|rw]` mounts a volume read-only or read-write, respectively.
                            If omitted or set to `rw`, volumes are mounted read-write.
                          - `[z|Z]` applies SELinux labels to allow or deny multiple containers
                            to read and write to the same volume.
                              - `z`: a _shared_ content label is applied to the content. This
                                label indicates that multiple containers can share the volume
                                content, for both reading and writing.
                              - `Z`: a _private unshared_ label is applied to the content.
                                This label indicates that only the current container can use
                                a private volume. Labeling systems such as SELinux require
                                proper labels to be placed on volume content that is mounted
                                into a container. Without a label, the security system can
                                prevent a container's processes from using the content. By
                                default, the labels set by the host operating system are not
                                modified.
                          - `[[r]shared|[r]slave|[r]private]` specifies mount
                            [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).
                            This only applies to bind-mounted volumes, not internal volumes
                            or named volumes. Mount propagation requires the source mount
                            point (the location where the source directory is mounted in the
                            host operating system) to have the correct propagation properties.
                            For shared volumes, the source mount point must be set to `shared`.
                            For slave volumes, the mount must be set to either `shared` or
                            `slave`.
                      items:
                          type: "string"
                  ContainerIDFile:
                      type: "string"
                      description: "Path to a file where the container ID is written"
                  LogConfig:
                      type: "object"
                      description: "The logging configuration for this container"
                      properties:
                          Type:
                              type: "string"
                              enum:
                                  - "json-file"
                                  - "syslog"
                                  - "journald"
                                  - "gelf"
                                  - "fluentd"
                                  - "awslogs"
                                  - "splunk"
                                  - "etwlogs"
                                  - "none"
                          Config:
                              type: "object"
                              additionalProperties:
                                  type: "string"
                  NetworkMode:
                      type: "string"
                      description: |
                          Network mode to use for this container. Supported standard values
                          are: `bridge`, `host`, `none`, and `container:<name|id>`. Any
                          other value is taken as a custom network's name to which this
                          container should connect to.
                  PortBindings:
                      $ref: "#/definitions/PortMap"
                  RestartPolicy:
                      $ref: "#/definitions/RestartPolicy"
                  AutoRemove:
                      type: "boolean"
                      description: |
                          Automatically remove the container when the container's process
                          exits. This has no effect if `RestartPolicy` is set.
                  VolumeDriver:
                      type: "string"
                      description: "Driver that this container uses to mount volumes."
                  VolumesFrom:
                      type: "array"
                      description: |
                          A list of volumes to inherit from another container, specified in
                          the form `<container name>[:<ro|rw>]`.
                      items:
                          type: "string"
                  Mounts:
                      description: |
                          Specification for mounts to be added to the container.
                      type: "array"
                      items:
                          $ref: "#/definitions/Mount"
                  ConsoleSize:
                      type: "array"
                      description: |
                          Initial console size, as an `[height, width]` array.
                      x-nullable: true
                      minItems: 2
                      maxItems: 2
                      items:
                          type: "integer"
                          minimum: 0
                  Annotations:
                      type: "object"
                      description: |
                          Arbitrary non-identifying metadata attached to container and
                          provided to the runtime when the container is started.
                      additionalProperties:
                          type: "string"

                  # Applicable to UNIX platforms
                  CapAdd:
                      type: "array"
                      description: |
                          A list of kernel capabilities to add to the container. Conflicts
                          with option 'Capabilities'.
                      items:
                          type: "string"
                  CapDrop:
                      type: "array"
                      description: |
                          A list of kernel capabilities to drop from the container. Conflicts
                          with option 'Capabilities'.
                      items:
                          type: "string"
                  CgroupnsMode:
                      type: "string"
                      enum:
                          - "private"
                          - "host"
                      description: |
                          cgroup namespace mode for the container. Possible values are:

                          - `"private"`: the container runs in its own private cgroup namespace
                          - `"host"`: use the host system's cgroup namespace

                          If not specified, the daemon default is used, which can either be `"private"`
                          or `"host"`, depending on daemon version, kernel support and configuration.
                  Dns:
                      type: "array"
                      description: "A list of DNS servers for the container to use."
                      items:
                          type: "string"
                  DnsOptions:
                      type: "array"
                      description: "A list of DNS options."
                      items:
                          type: "string"
                  DnsSearch:
                      type: "array"
                      description: "A list of DNS search domains."
                      items:
                          type: "string"
                  ExtraHosts:
                      type: "array"
                      description: |
                          A list of hostnames/IP mappings to add to the container's `/etc/hosts`
                          file. Specified in the form `["hostname:IP"]`.
                      items:
                          type: "string"
                  GroupAdd:
                      type: "array"
                      description: |
                          A list of additional groups that the container process will run as.
                      items:
                          type: "string"
                  IpcMode:
                      type: "string"
                      description: |
                          IPC sharing mode for the container. Possible values are:

                          - `"none"`: own private IPC namespace, with /dev/shm not mounted
                          - `"private"`: own private IPC namespace
                          - `"shareable"`: own private IPC namespace, with a possibility to share it with other containers
                          - `"container:<name|id>"`: join another (shareable) container's IPC namespace
                          - `"host"`: use the host system's IPC namespace

                          If not specified, daemon default is used, which can either be `"private"`
                          or `"shareable"`, depending on daemon version and configuration.
                  Cgroup:
                      type: "string"
                      description: "Cgroup to use for the container."
                  Links:
                      type: "array"
                      description: |
                          A list of links for the container in the form `container_name:alias`.
                      items:
                          type: "string"
                  OomScoreAdj:
                      type: "integer"
                      description: |
                          An integer value containing the score given to the container in
                          order to tune OOM killer preferences.
                      example: 500
                  PidMode:
                      type: "string"
                      description: |
                          Set the PID (Process) Namespace mode for the container. It can be
                          either:

                          - `"container:<name|id>"`: joins another container's PID namespace
                          - `"host"`: use the host's PID namespace inside the container
                  Privileged:
                      type: "boolean"
                      description: "Gives the container full access to the host."
                  PublishAllPorts:
                      type: "boolean"
                      description: |
                          Allocates an ephemeral host port for all of a container's
                          exposed ports.

                          Ports are de-allocated when the container stops and allocated when
                          the container starts. The allocated port might be changed when
                          restarting the container.

                          The port is selected from the ephemeral port range that depends on
                          the kernel. For example, on Linux the range is defined by
                          `/proc/sys/net/ipv4/ip_local_port_range`.
                  ReadonlyRootfs:
                      type: "boolean"
                      description: "Mount the container's root filesystem as read only."
                  SecurityOpt:
                      type: "array"
                      description: |
                          A list of string values to customize labels for MLS systems, such
                          as SELinux.
                      items:
                          type: "string"
                  StorageOpt:
                      type: "object"
                      description: |
                          Storage driver options for this container, in the form `{"size": "120G"}`.
                      additionalProperties:
                          type: "string"
                  Tmpfs:
                      type: "object"
                      description: |
                          A map of container directories which should be replaced by tmpfs
                          mounts, and their corresponding mount options. For example:

                          ```
                          { "/run": "rw,noexec,nosuid,size=65536k" }
                          ```
                      additionalProperties:
                          type: "string"
                  UTSMode:
                      type: "string"
                      description: "UTS namespace to use for the container."
                  UsernsMode:
                      type: "string"
                      description: |
                          Sets the usernamespace mode for the container when usernamespace
                          remapping option is enabled.
                  ShmSize:
                      type: "integer"
                      format: "int64"
                      description: |
                          Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
                      minimum: 0
                  Sysctls:
                      type: "object"
                      description: |
                          A list of kernel parameters (sysctls) to set in the container.
                          For example:

                          ```
                          {"net.ipv4.ip_forward": "1"}
                          ```
                      additionalProperties:
                          type: "string"
                  Runtime:
                      type: "string"
                      description: "Runtime to use with this container."
                  # Applicable to Windows
                  Isolation:
                      type: "string"
                      description: |
                          Isolation technology of the container. (Windows only)
                      enum:
                          - "default"
                          - "process"
                          - "hyperv"
                  MaskedPaths:
                      type: "array"
                      description: |
                          The list of paths to be masked inside the container (this overrides
                          the default set of paths).
                      items:
                          type: "string"
                  ReadonlyPaths:
                      type: "array"
                      description: |
                          The list of paths to be set as read-only inside the container
                          (this overrides the default set of paths).
                      items:
                          type: "string"

    NetworkingConfig:
        description: |
            NetworkingConfig represents the container's networking configuration for
            each of its interfaces.
            It is used for the networking configs specified in the `docker create`
            and `docker network connect` commands.
        type: "object"
        properties:
            EndpointsConfig:
                description: |
                    A mapping of network name to endpoint configuration for that network.
                    The endpoint configuration can be left empty to connect to that
                    network with no particular endpoint configuration.
                type: "object"
                additionalProperties:
                    $ref: "#/definitions/EndpointSettings"
        example:
            # putting an example here, instead of using the example values from
            # /definitions/EndpointSettings, because EndpointSettings contains
            # operational data returned when inspecting a container that we don't
            # accept here.
            EndpointsConfig:
                isolated_nw:
                    IPAMConfig:
                        IPv4Address: "172.20.30.33"
                        IPv6Address: "2001:db8:abcd::3033"
                        LinkLocalIPs:
                            - "169.254.34.68"
                            - "fe80::3468"
                    MacAddress: "02:42:ac:12:05:02"
                    Links:
                        - "container_1"
                        - "container_2"
                    Aliases:
                        - "server_x"
                        - "server_y"
                database_nw: {}

    NetworkSettings:
        description: "NetworkSettings exposes the network settings in the API"
        type: "object"
        properties:
            Bridge:
                description: |
                    Name of the default bridge interface when dockerd's --bridge flag is set.
                type: "string"
                example: "docker0"
            SandboxID:
                description: SandboxID uniquely represents a container's network stack.
                type: "string"
                example: "9d12daf2c33f5959c8bf90aa513e4f65b561738661003029ec84830cd503a0c3"
            HairpinMode:
                description: |
                    Indicates if hairpin NAT should be enabled on the virtual interface.

                    Deprecated: This field is never set and will be removed in a future release.
                type: "boolean"
                example: false
            LinkLocalIPv6Address:
                description: |
                    IPv6 unicast address using the link-local prefix.

                    Deprecated: This field is never set and will be removed in a future release.
                type: "string"
                example: ""
            LinkLocalIPv6PrefixLen:
                description: |
                    Prefix length of the IPv6 unicast address.

                    Deprecated: This field is never set and will be removed in a future release.
                type: "integer"
                example: ""
            Ports:
                $ref: "#/definitions/PortMap"
            SandboxKey:
                description: SandboxKey is the full path of the netns handle
                type: "string"
                example: "/var/run/docker/netns/8ab54b426c38"

            SecondaryIPAddresses:
                description: "Deprecated: This field is never set and will be removed in a future release."
                type: "array"
                items:
                    $ref: "#/definitions/Address"
                x-nullable: true

            SecondaryIPv6Addresses:
                description: "Deprecated: This field is never set and will be removed in a future release."
                type: "array"
                items:
                    $ref: "#/definitions/Address"
                x-nullable: true

            # TODO properties below are part of DefaultNetworkSettings, which is
            # marked as deprecated since Docker 1.9 and to be removed in Docker v17.12
            EndpointID:
                description: |
                    EndpointID uniquely represents a service endpoint in a Sandbox.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "string"
                example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
            Gateway:
                description: |
                    Gateway address for the default "bridge" network.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "string"
                example: "172.17.0.1"
            GlobalIPv6Address:
                description: |
                    Global IPv6 address for the default "bridge" network.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "string"
                example: "2001:db8::5689"
            GlobalIPv6PrefixLen:
                description: |
                    Mask length of the global IPv6 address.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "integer"
                example: 64
            IPAddress:
                description: |
                    IPv4 address for the default "bridge" network.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "string"
                example: "172.17.0.4"
            IPPrefixLen:
                description: |
                    Mask length of the IPv4 address.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "integer"
                example: 16
            IPv6Gateway:
                description: |
                    IPv6 gateway address for this network.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "string"
                example: "2001:db8:2::100"
            MacAddress:
                description: |
                    MAC address for the container on the default "bridge" network.

                    <p><br /></p>

                    > **Deprecated**: This field is only propagated when attached to the
                    > default "bridge" network. Use the information from the "bridge"
                    > network inside the `Networks` map instead, which contains the same
                    > information. This field was deprecated in Docker 1.9 and is scheduled
                    > to be removed in Docker 17.12.0
                type: "string"
                example: "02:42:ac:11:00:04"
            Networks:
                description: |
                    Information about all networks that the container is connected to.
                type: "object"
                additionalProperties:
                    $ref: "#/definitions/EndpointSettings"

    PortMap:
        description: |
            PortMap describes the mapping of container ports to host ports, using the
            container's port-number and protocol as key in the format `<port>/<protocol>`,
            for example, `80/udp`.

            If a container's port is mapped for multiple protocols, separate entries
            are added to the mapping table.
        type: "object"
        additionalProperties:
            type: "array"
            x-nullable: true
            items:
                $ref: "#/definitions/PortBinding"
        example:
            "443/tcp":
                - HostIp: "127.0.0.1"
                  HostPort: "4443"
            "80/tcp":
                - HostIp: "0.0.0.0"
                  HostPort: "80"
                - HostIp: "0.0.0.0"
                  HostPort: "8080"
            "80/udp":
                - HostIp: "0.0.0.0"
                  HostPort: "80"
            "53/udp":
                - HostIp: "0.0.0.0"
                  HostPort: "53"
            "2377/tcp": null

    FilesystemChange:
        description: |
            Change in the container's filesystem.
        type: "object"
        required: [Path, Kind]
        properties:
            Path:
                description: |
                    Path to file or directory that has changed.
                type: "string"
                x-nullable: false
            Kind:
                $ref: "#/definitions/ChangeType"

    ChangeType:
        description: |
            Kind of change

            Can be one of:

            - `0`: Modified ("C")
            - `1`: Added ("A")
            - `2`: Deleted ("D")
        type: "integer"
        format: "uint8"
        enum: [0, 1, 2]
        x-nullable: false

    ImageInspect:
        description: |
            Information about an image in the local image cache.
        type: "object"
        properties:
            Id:
                description: |
                    ID is the content-addressable ID of an image.

                    This identifier is a content-addressable digest calculated from the
                    image's configuration (which includes the digests of layers used by
                    the image).

                    Note that this digest differs from the `RepoDigests` below, which
                    holds digests of image manifests that reference the image.
                type: "string"
                x-nullable: false
                example: "sha256:ec3f0931a6e6b6855d76b2d7b0be30e81860baccd891b2e243280bf1cd8ad710"
            RepoTags:
                description: |
                    List of image names/tags in the local image cache that reference this
                    image.

                    Multiple image tags can refer to the same image, and this list may be
                    empty if no tags reference the image, in which case the image is
                    "untagged", in which case it can still be referenced by its ID.
                type: "array"
                items:
                    type: "string"
                example:
                    - "example:1.0"
                    - "example:latest"
                    - "example:stable"
                    - "internal.registry.example.com:5000/example:1.0"
            RepoDigests:
                description: |
                    List of content-addressable digests of locally available image manifests
                    that the image is referenced from. Multiple manifests can refer to the
                    same image.

                    These digests are usually only available if the image was either pulled
                    from a registry, or if the image was pushed to a registry, which is when
                    the manifest is generated and its digest calculated.
                type: "array"
                items:
                    type: "string"
                example:
                    - "example@sha256:afcc7f1ac1b49db317a7196c902e61c6c3c4607d63599ee1a82d702d249a0ccb"
                    - "internal.registry.example.com:5000/example@sha256:b69959407d21e8a062e0416bf13405bb2b71ed7a84dde4158ebafacfa06f5578"
            Parent:
                description: |
                    ID of the parent image.

                    Depending on how the image was created, this field may be empty and
                    is only set for images that were built/created locally. This field
                    is empty if the image was pulled from an image registry.
                type: "string"
                x-nullable: false
                example: ""
            Comment:
                description: |
                    Optional message that was set when committing or importing the image.
                type: "string"
                x-nullable: false
                example: ""
            Created:
                description: |
                    Date and time at which the image was created, formatted in
                    [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

                    This information is only available if present in the image,
                    and omitted otherwise.
                type: "string"
                format: "dateTime"
                x-nullable: true
                example: "2022-02-04T21:20:12.497794809Z"
            Container:
                description: |
                    The ID of the container that was used to create the image.

                    Depending on how the image was created, this field may be empty.

                    **Deprecated**: this field is kept for backward compatibility, but
                    will be removed in API v1.45.
                type: "string"
                example: "65974bc86f1770ae4bff79f651ebdbce166ae9aada632ee3fa9af3a264911735"
            ContainerConfig:
                description: |
                    **Deprecated**: this field is kept for backward compatibility, but
                    will be removed in API v1.45.
                $ref: "#/definitions/ContainerConfig"
            DockerVersion:
                description: |
                    The version of Docker that was used to build the image.

                    Depending on how the image was created, this field may be empty.
                type: "string"
                x-nullable: false
                example: "20.10.7"
            Author:
                description: |
                    Name of the author that was specified when committing the image, or as
                    specified through MAINTAINER (deprecated) in the Dockerfile.
                type: "string"
                x-nullable: false
                example: ""
            Config:
                $ref: "#/definitions/ContainerConfig"
            Architecture:
                description: |
                    Hardware CPU architecture that the image runs on.
                type: "string"
                x-nullable: false
                example: "arm"
            Variant:
                description: |
                    CPU architecture variant (presently ARM-only).
                type: "string"
                x-nullable: true
                example: "v7"
            Os:
                description: |
                    Operating System the image is built to run on.
                type: "string"
                x-nullable: false
                example: "linux"
            OsVersion:
                description: |
                    Operating System version the image is built to run on (especially
                    for Windows).
                type: "string"
                example: ""
                x-nullable: true
            Size:
                description: |
                    Total size of the image including all layers it is composed of.
                type: "integer"
                format: "int64"
                x-nullable: false
                example: 1239828
            VirtualSize:
                description: |
                    Total size of the image including all layers it is composed of.

                    Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
                type: "integer"
                format: "int64"
                example: 1239828
            GraphDriver:
                $ref: "#/definitions/GraphDriverData"
            RootFS:
                description: |
                    Information about the image's RootFS, including the layer IDs.
                type: "object"
                required: [Type]
                properties:
                    Type:
                        type: "string"
                        x-nullable: false
                        example: "layers"
                    Layers:
                        type: "array"
                        items:
                            type: "string"
                        example:
                            - "sha256:1834950e52ce4d5a88a1bbd131c537f4d0e56d10ff0dd69e66be3b7dfa9df7e6"
                            - "sha256:5f70bf18a086007016e948b04aed3b82103a36bea41755b6cddfaf10ace3c6ef"
            Metadata:
                description: |
                    Additional metadata of the image in the local cache. This information
                    is local to the daemon, and not part of the image itself.
                type: "object"
                properties:
                    LastTagTime:
                        description: |
                            Date and time at which the image was last tagged in
                            [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.

                            This information is only available if the image was tagged locally,
                            and omitted otherwise.
                        type: "string"
                        format: "dateTime"
                        example: "2022-02-28T14:40:02.623929178Z"
                        x-nullable: true

    VolumeCreateOptions:
        description: "Volume configuration"
        type: "object"
        title: "VolumeConfig"
        x-go-name: "CreateOptions"
        properties:
            Name:
                description: |
                    The new volume's name. If not specified, Docker generates a name.
                type: "string"
                x-nullable: false
                example: "tardis"
            Driver:
                description: "Name of the volume driver to use."
                type: "string"
                default: "local"
                x-nullable: false
                example: "custom"
            DriverOpts:
                description: |
                    A mapping of driver options and values. These options are
                    passed directly to the driver and are driver specific.
                type: "object"
                additionalProperties:
                    type: "string"
                example:
                    device: "tmpfs"
                    o: "size=100m,uid=1000"
                    type: "tmpfs"
            Labels:
                description: "User-defined key/value metadata."
                type: "object"
                additionalProperties:
                    type: "string"
                example:
                    com.example.some-label: "some-value"
                    com.example.some-other-label: "some-other-value"
            ClusterVolumeSpec:
                $ref: "#/definitions/ClusterVolumeSpec"

    VolumeListResponse:
        type: "object"
        title: "VolumeListResponse"
        x-go-name: "ListResponse"
        description: "Volume list response"
        properties:
            Volumes:
                type: "array"
                description: "List of volumes"
                items:
                    $ref: "#/definitions/Volume"
            Warnings:
                type: "array"
                description: |
                    Warnings that occurred when fetching the list of volumes.
                items:
                    type: "string"
                example: []

    Network:
        type: "object"
        properties:
            Name:
                type: "string"
            Id:
                type: "string"
            Created:
                type: "string"
                format: "dateTime"
            Scope:
                type: "string"
            Driver:
                type: "string"
            EnableIPv6:
                type: "boolean"
            IPAM:
                $ref: "#/definitions/IPAM"
            Internal:
                type: "boolean"
            Attachable:
                type: "boolean"
            Ingress:
                type: "boolean"
            Containers:
                type: "object"
                additionalProperties:
                    $ref: "#/definitions/NetworkContainer"
            Options:
                type: "object"
                additionalProperties:
                    type: "string"
            Labels:
                type: "object"
                additionalProperties:
                    type: "string"
        example:
            Name: "net01"
            Id: "7d86d31b1478e7cca9ebed7e73aa0fdeec46c5ca29497431d3007d2d9e15ed99"
            Created: "2016-10-19T04:33:30.360899459Z"
            Scope: "local"
            Driver: "bridge"
            EnableIPv6: false
            IPAM:
                Driver: "default"
                Config:
                    - Subnet: "172.19.0.0/16"
                      Gateway: "172.19.0.1"
                Options:
                    foo: "bar"
            Internal: false
            Attachable: false
            Ingress: false
            Containers:
                19a4d5d687db25203351ed79d478946f861258f018fe384f229f2efa4b23513c:
                    Name: "test"
                    EndpointID: "628cadb8bcb92de107b2a1e516cbffe463e321f548feb37697cce00ad694f21a"
                    MacAddress: "02:42:ac:13:00:02"
                    IPv4Address: "172.19.0.2/16"
                    IPv6Address: ""
            Options:
                com.docker.network.bridge.default_bridge: "true"
                com.docker.network.bridge.enable_icc: "true"
                com.docker.network.bridge.enable_ip_masquerade: "true"
                com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
                com.docker.network.bridge.name: "docker0"
                com.docker.network.driver.mtu: "1500"
            Labels:
                com.example.some-label: "some-value"
                com.example.some-other-label: "some-other-value"
    IPAM:
        type: "object"
        properties:
            Driver:
                description: "Name of the IPAM driver to use."
                type: "string"
                default: "default"
            Config:
                description: |
                    List of IPAM configuration options, specified as a map:

                    ```
                    {"Subnet": <CIDR>, "IPRange": <CIDR>, "Gateway": <IP address>, "AuxAddress": <device_name:IP address>}
                    ```
                type: "array"
                items:
                    $ref: "#/definitions/IPAMConfig"
            Options:
                description: "Driver-specific options, specified as a map."
                type: "object"
                additionalProperties:
                    type: "string"

    BuildInfo:
        type: "object"
        properties:
            id:
                type: "string"
            stream:
                type: "string"
            error:
                type: "string"
            errorDetail:
                $ref: "#/definitions/ErrorDetail"
            status:
                type: "string"
            progress:
                type: "string"
            progressDetail:
                $ref: "#/definitions/ProgressDetail"
            aux:
                $ref: "#/definitions/ImageID"

    CreateImageInfo:
        type: "object"
        properties:
            id:
                type: "string"
            error:
                type: "string"
            errorDetail:
                $ref: "#/definitions/ErrorDetail"
            status:
                type: "string"
            progress:
                type: "string"
            progressDetail:
                $ref: "#/definitions/ProgressDetail"

    PushImageInfo:
        type: "object"
        properties:
            error:
                type: "string"
            status:
                type: "string"
            progress:
                type: "string"
            progressDetail:
                $ref: "#/definitions/ProgressDetail"

    EndpointSettings:
        description: "Configuration for a network endpoint."
        type: "object"
        properties:
            # Configurations
            IPAMConfig:
                $ref: "#/definitions/EndpointIPAMConfig"
            Links:
                type: "array"
                items:
                    type: "string"
                example:
                    - "container_1"
                    - "container_2"
            MacAddress:
                description: |
                    MAC address for the endpoint on this network. The network driver might ignore this parameter.
                type: "string"
                example: "02:42:ac:11:00:04"
            Aliases:
                type: "array"
                items:
                    type: "string"
                example:
                    - "server_x"
                    - "server_y"

            # Operational data
            NetworkID:
                description: |
                    Unique ID of the network.
                type: "string"
                example: "08754567f1f40222263eab4102e1c733ae697e8e354aa9cd6e18d7402835292a"
            EndpointID:
                description: |
                    Unique ID for the service endpoint in a Sandbox.
                type: "string"
                example: "b88f5b905aabf2893f3cbc4ee42d1ea7980bbc0a92e2c8922b1e1795298afb0b"
            Gateway:
                description: |
                    Gateway address for this network.
                type: "string"
                example: "172.17.0.1"
            IPAddress:
                description: |
                    IPv4 address.
                type: "string"
                example: "172.17.0.4"
            IPPrefixLen:
                description: |
                    Mask length of the IPv4 address.
                type: "integer"
                example: 16
            IPv6Gateway:
                description: |
                    IPv6 gateway address.
                type: "string"
                example: "2001:db8:2::100"
            GlobalIPv6Address:
                description: |
                    Global IPv6 address.
                type: "string"
                example: "2001:db8::5689"
            GlobalIPv6PrefixLen:
                description: |
                    Mask length of the global IPv6 address.
                type: "integer"
                format: "int64"
                example: 64
            DriverOpts:
                description: |
                    DriverOpts is a mapping of driver options and values. These options
                    are passed directly to the driver and are driver specific.
                type: "object"
                x-nullable: true
                additionalProperties:
                    type: "string"
                example:
                    com.example.some-label: "some-value"
                    com.example.some-other-label: "some-other-value"
            DNSNames:
                description: |
                    List of all DNS names an endpoint has on a specific network. This
                    list is based on the container name, network aliases, container short
                    ID, and hostname.

                    These DNS names are non-fully qualified but can contain several dots.
                    You can get fully qualified DNS names by appending `.<network-name>`.
                    For instance, if container name is `my.ctr` and the network is named
                    `testnet`, `DNSNames` will contain `my.ctr` and the FQDN will be
                    `my.ctr.testnet`.
                type: array
                items:
                    type: string
                example: ["foobar", "server_x", "server_y", "my.ctr"]

    Plugin:
        description: "A plugin for the Engine API"
        type: "object"
        required: [Settings, Enabled, Config, Name]
        properties:
            Id:
                type: "string"
                example: "5724e2c8652da337ab2eedd19fc6fc0ec908e4bd907c7421bf6a8dfc70c4c078"
            Name:
                type: "string"
                x-nullable: false
                example: "tiborvass/sample-volume-plugin"
            Enabled:
                description: True if the plugin is running. False if the plugin is not running,
                    only installed.
                type: "boolean"
                x-nullable: false
                example: true
            Settings:
                description: "Settings that can be modified by users."
                type: "object"
                x-nullable: false
                required: [Args, Devices, Env, Mounts]
                properties:
                    Mounts:
                        type: "array"
                        items:
                            $ref: "#/definitions/PluginMount"
                    Env:
                        type: "array"
                        items:
                            type: "string"
                        example:
                            - "DEBUG=0"
                    Args:
                        type: "array"
                        items:
                            type: "string"
                    Devices:
                        type: "array"
                        items:
                            $ref: "#/definitions/PluginDevice"
            PluginReference:
                description: "plugin remote reference used to push/pull the plugin"
                type: "string"
                x-nullable: false
                example: "localhost:5000/tiborvass/sample-volume-plugin:latest"
            Config:
                description: "The config of a plugin."
                type: "object"
                x-nullable: false
                required:
                    - Description
                    - Documentation
                    - Interface
                    - Entrypoint
                    - WorkDir
                    - Network
                    - Linux
                    - PidHost
                    - PropagatedMount
                    - IpcHost
                    - Mounts
                    - Env
                    - Args
                properties:
                    DockerVersion:
                        description: "Docker Version used to create the plugin"
                        type: "string"
                        x-nullable: false
                        example: "17.06.0-ce"
                    Description:
                        type: "string"
                        x-nullable: false
                        example: "A sample volume plugin for Docker"
                    Documentation:
                        type: "string"
                        x-nullable: false
                        example: "https://docs.docker.com/engine/extend/plugins/"
                    Interface:
                        description: "The interface between Docker and the plugin"
                        x-nullable: false
                        type: "object"
                        required: [Types, Socket]
                        properties:
                            Types:
                                type: "array"
                                items:
                                    $ref: "#/definitions/PluginInterfaceType"
                                example:
                                    - "docker.volumedriver/1.0"
                            Socket:
                                type: "string"
                                x-nullable: false
                                example: "plugins.sock"
                            ProtocolScheme:
                                type: "string"
                                example: "some.protocol/v1.0"
                                description: "Protocol to use for clients connecting to the plugin."
                                enum:
                                    - ""
                                    - "moby.plugins.http/v1"
                    Entrypoint:
                        type: "array"
                        items:
                            type: "string"
                        example:
                            - "/usr/bin/sample-volume-plugin"
                            - "/data"
                    WorkDir:
                        type: "string"
                        x-nullable: false
                        example: "/bin/"
                    User:
                        type: "object"
                        x-nullable: false
                        properties:
                            UID:
                                type: "integer"
                                format: "uint32"
                                example: 1000
                            GID:
                                type: "integer"
                                format: "uint32"
                                example: 1000
                    Network:
                        type: "object"
                        x-nullable: false
                        required: [Type]
                        properties:
                            Type:
                                x-nullable: false
                                type: "string"
                                example: "host"
                    Linux:
                        type: "object"
                        x-nullable: false
                        required: [Capabilities, AllowAllDevices, Devices]
                        properties:
                            Capabilities:
                                type: "array"
                                items:
                                    type: "string"
                                example:
                                    - "CAP_SYS_ADMIN"
                                    - "CAP_SYSLOG"
                            AllowAllDevices:
                                type: "boolean"
                                x-nullable: false
                                example: false
                            Devices:
                                type: "array"
                                items:
                                    $ref: "#/definitions/PluginDevice"
                    PropagatedMount:
                        type: "string"
                        x-nullable: false
                        example: "/mnt/volumes"
                    IpcHost:
                        type: "boolean"
                        x-nullable: false
                        example: false
                    PidHost:
                        type: "boolean"
                        x-nullable: false
                        example: false
                    Mounts:
                        type: "array"
                        items:
                            $ref: "#/definitions/PluginMount"
                    Env:
                        type: "array"
                        items:
                            $ref: "#/definitions/PluginEnv"
                        example:
                            - Name: "DEBUG"
                              Description: "If set, prints debug messages"
                              Settable: null
                              Value: "0"
                    Args:
                        type: "object"
                        x-nullable: false
                        required: [Name, Description, Settable, Value]
                        properties:
                            Name:
                                x-nullable: false
                                type: "string"
                                example: "args"
                            Description:
                                x-nullable: false
                                type: "string"
                                example: "command line arguments"
                            Settable:
                                type: "array"
                                items:
                                    type: "string"
                            Value:
                                type: "array"
                                items:
                                    type: "string"
                    rootfs:
                        type: "object"
                        properties:
                            type:
                                type: "string"
                                example: "layers"
                            diff_ids:
                                type: "array"
                                items:
                                    type: "string"
                                example:
                                    - "sha256:675532206fbf3030b8458f88d6e26d4eb1577688a25efec97154c94e8b6b4887"
                                    - "sha256:e216a057b1cb1efc11f8a268f37ef62083e70b1b38323ba252e25ac88904a7e8"

    ObjectVersion:
        description: |
            The version number of the object such as node, service, etc. This is needed
            to avoid conflicting writes. The client must send the version number along
            with the modified specification when updating these objects.

            This approach ensures safe concurrency and determinism in that the change
            on the object may not be applied if the version number has changed from the
            last read. In other words, if two update requests specify the same base
            version, only one of the requests can succeed. As a result, two separate
            update requests that happen at the same time will not unintentionally
            overwrite each other.
        type: "object"
        properties:
            Index:
                type: "integer"
                format: "uint64"
                example: 373531

    Swarm:
        type: "object"
        allOf:
            - $ref: "#/definitions/ClusterInfo"
            - type: "object"
              properties:
                  JoinTokens:
                      $ref: "#/definitions/JoinTokens"

    EndpointSpec:
        description: "Properties that can be configured to access and load balance a service."
        type: "object"
        properties:
            Mode:
                description: |
                    The mode of resolution to use for internal load balancing between tasks.
                type: "string"
                enum:
                    - "vip"
                    - "dnsrr"
                default: "vip"
            Ports:
                description: |
                    List of exposed ports that this service is accessible on from the
                    outside. Ports can only be provided if `vip` resolution mode is used.
                type: "array"
                items:
                    $ref: "#/definitions/EndpointPortConfig"

    Service:
        type: "object"
        properties:
            ID:
                type: "string"
            Version:
                $ref: "#/definitions/ObjectVersion"
            CreatedAt:
                type: "string"
                format: "dateTime"
            UpdatedAt:
                type: "string"
                format: "dateTime"
            Spec:
                $ref: "#/definitions/ServiceSpec"
            Endpoint:
                type: "object"
                properties:
                    Spec:
                        $ref: "#/definitions/EndpointSpec"
                    Ports:
                        type: "array"
                        items:
                            $ref: "#/definitions/EndpointPortConfig"
                    VirtualIPs:
                        type: "array"
                        items:
                            type: "object"
                            properties:
                                NetworkID:
                                    type: "string"
                                Addr:
                                    type: "string"
            UpdateStatus:
                description: "The status of a service update."
                type: "object"
                properties:
                    State:
                        type: "string"
                        enum:
                            - "updating"
                            - "paused"
                            - "completed"
                    StartedAt:
                        type: "string"
                        format: "dateTime"
                    CompletedAt:
                        type: "string"
                        format: "dateTime"
                    Message:
                        type: "string"
            ServiceStatus:
                description: |
                    The status of the service's tasks. Provided only when requested as
                    part of a ServiceList operation.
                type: "object"
                properties:
                    RunningTasks:
                        description: |
                            The number of tasks for the service currently in the Running state.
                        type: "integer"
                        format: "uint64"
                        example: 7
                    DesiredTasks:
                        description: |
                            The number of tasks for the service desired to be running.
                            For replicated services, this is the replica count from the
                            service spec. For global services, this is computed by taking
                            count of all tasks for the service with a Desired State other
                            than Shutdown.
                        type: "integer"
                        format: "uint64"
                        example: 10
                    CompletedTasks:
                        description: |
                            The number of tasks for a job that are in the Completed state.
                            This field must be cross-referenced with the service type, as the
                            value of 0 may mean the service is not in a job mode, or it may
                            mean the job-mode service has no tasks yet Completed.
                        type: "integer"
                        format: "uint64"
            JobStatus:
                description: |
                    The status of the service when it is in one of ReplicatedJob or
                    GlobalJob modes. Absent on Replicated and Global mode services. The
                    JobIteration is an ObjectVersion, but unlike the Service's version,
                    does not need to be sent with an update request.
                type: "object"
                properties:
                    JobIteration:
                        description: |
                            JobIteration is a value increased each time a Job is executed,
                            successfully or otherwise. "Executed", in this case, means the
                            job as a whole has been started, not that an individual Task has
                            been launched. A job is "Executed" when its ServiceSpec is
                            updated. JobIteration can be used to disambiguate Tasks belonging
                            to different executions of a job.  Though JobIteration will
                            increase with each subsequent execution, it may not necessarily
                            increase by 1, and so JobIteration should not be used to
                        $ref: "#/definitions/ObjectVersion"
                    LastExecution:
                        description: |
                            The last time, as observed by the server, that this job was
                            started.
                        type: "string"
                        format: "dateTime"
        example:
            ID: "9mnpnzenvg8p8tdbtq4wvbkcz"
            Version:
                Index: 19
            CreatedAt: "2016-06-07T21:05:51.880065305Z"
            UpdatedAt: "2016-06-07T21:07:29.962229872Z"
            Spec:
                Name: "hopeful_cori"
                TaskTemplate:
                    ContainerSpec:
                        Image: "redis"
                    Resources:
                        Limits: {}
                        Reservations: {}
                    RestartPolicy:
                        Condition: "any"
                        MaxAttempts: 0
                    Placement: {}
                    ForceUpdate: 0
                Mode:
                    Replicated:
                        Replicas: 1
                UpdateConfig:
                    Parallelism: 1
                    Delay: 1000000000
                    FailureAction: "pause"
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                RollbackConfig:
                    Parallelism: 1
                    Delay: 1000000000
                    FailureAction: "pause"
                    Monitor: 15000000000
                    MaxFailureRatio: 0.15
                EndpointSpec:
                    Mode: "vip"
                    Ports:
                        - Protocol: "tcp"
                          TargetPort: 6379
                          PublishedPort: 30001
            Endpoint:
                Spec:
                    Mode: "vip"
                    Ports:
                        - Protocol: "tcp"
                          TargetPort: 6379
                          PublishedPort: 30001
                Ports:
                    - Protocol: "tcp"
                      TargetPort: 6379
                      PublishedPort: 30001
                VirtualIPs:
                    - NetworkID: "4qvuz4ko70xaltuqbt8956gd1"
                      Addr: "10.255.0.2/16"
                    - NetworkID: "4qvuz4ko70xaltuqbt8956gd1"
                      Addr: "10.255.0.3/16"

    ContainerSummary:
        type: "object"
        properties:
            Id:
                description: "The ID of this container"
                type: "string"
                x-go-name: "ID"
            Names:
                description: "The names that this container has been given"
                type: "array"
                items:
                    type: "string"
            Image:
                description: "The name of the image used when creating this container"
                type: "string"
            ImageID:
                description: "The ID of the image that this container was created from"
                type: "string"
            Command:
                description: "Command to run when starting the container"
                type: "string"
            Created:
                description: "When the container was created"
                type: "integer"
                format: "int64"
            Ports:
                description: "The ports exposed by this container"
                type: "array"
                items:
                    $ref: "#/definitions/Port"
            SizeRw:
                description: "The size of files that have been created or changed by this container"
                type: "integer"
                format: "int64"
            SizeRootFs:
                description: "The total size of all the files in this container"
                type: "integer"
                format: "int64"
            Labels:
                description: "User-defined key/value metadata."
                type: "object"
                additionalProperties:
                    type: "string"
            State:
                description: "The state of this container (e.g. `Exited`)"
                type: "string"
            Status:
                description: "Additional human-readable status of this container (e.g. `Exit 0`)"
                type: "string"
            HostConfig:
                type: "object"
                properties:
                    NetworkMode:
                        type: "string"
            NetworkSettings:
                description: "A summary of the container's network settings"
                type: "object"
                properties:
                    Networks:
                        type: "object"
                        additionalProperties:
                            $ref: "#/definitions/EndpointSettings"
            Mounts:
                type: "array"
                items:
                    $ref: "#/definitions/MountPoint"

    SecretSpec:
        type: "object"
        properties:
            Name:
                description: "User-defined name of the secret."
                type: "string"
            Labels:
                description: "User-defined key/value metadata."
                type: "object"
                additionalProperties:
                    type: "string"
                example:
                    com.example.some-label: "some-value"
                    com.example.some-other-label: "some-other-value"
            Data:
                description: |
                    Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
                    data to store as secret.

                    This field is only used to _create_ a secret, and is not returned by
                    other endpoints.
                type: "string"
                example: ""
            Driver:
                description: |
                    Name of the secrets driver used to fetch the secret's value from an
                    external secret store.
                $ref: "#/definitions/Driver"
            Templating:
                description: |
                    Templating driver, if applicable

                    Templating controls whether and how to evaluate the config payload as
                    a template. If no driver is set, no templating is used.
                $ref: "#/definitions/Driver"

    Secret:
        type: "object"
        properties:
            ID:
                type: "string"
                example: "blt1owaxmitz71s9v5zh81zun"
            Version:
                $ref: "#/definitions/ObjectVersion"
            CreatedAt:
                type: "string"
                format: "dateTime"
                example: "2017-07-20T13:55:28.678958722Z"
            UpdatedAt:
                type: "string"
                format: "dateTime"
                example: "2017-07-20T13:55:28.678958722Z"
            Spec:
                $ref: "#/definitions/SecretSpec"

    ConfigSpec:
        type: "object"
        properties:
            Name:
                description: "User-defined name of the config."
                type: "string"
            Labels:
                description: "User-defined key/value metadata."
                type: "object"
                additionalProperties:
                    type: "string"
            Data:
                description: |
                    Base64-url-safe-encoded ([RFC 4648](https://tools.ietf.org/html/rfc4648#section-5))
                    config data.
                type: "string"
            Templating:
                description: |
                    Templating driver, if applicable

                    Templating controls whether and how to evaluate the config payload as
                    a template. If no driver is set, no templating is used.
                $ref: "#/definitions/Driver"

    Config:
        type: "object"
        properties:
            ID:
                type: "string"
            Version:
                $ref: "#/definitions/ObjectVersion"
            CreatedAt:
                type: "string"
                format: "dateTime"
            UpdatedAt:
                type: "string"
                format: "dateTime"
            Spec:
                $ref: "#/definitions/ConfigSpec"

    ContainerState:
        description: |
            ContainerState stores container's running state. It's part of ContainerJSONBase
            and will be returned by the "inspect" command.
        type: "object"
        x-nullable: true
        properties:
            Status:
                description: |
                    String representation of the container state. Can be one of "created",
                    "running", "paused", "restarting", "removing", "exited", or "dead".
                type: "string"
                enum: ["created", "running", "paused", "restarting", "removing", "exited", "dead"]
                example: "running"
            Running:
                description: |
                    Whether this container is running.

                    Note that a running container can be _paused_. The `Running` and `Paused`
                    booleans are not mutually exclusive:

                    When pausing a container (on Linux), the freezer cgroup is used to suspend
                    all processes in the container. Freezing the process requires the process to
                    be running. As a result, paused containers are both `Running` _and_ `Paused`.

                    Use the `Status` field instead to determine if a container's state is "running".
                type: "boolean"
                example: true
            Paused:
                description: "Whether this container is paused."
                type: "boolean"
                example: false
            Restarting:
                description: "Whether this container is restarting."
                type: "boolean"
                example: false
            OOMKilled:
                description: |
                    Whether a process within this container has been killed because it ran
                    out of memory since the container was last started.
                type: "boolean"
                example: false
            Dead:
                type: "boolean"
                example: false
            Pid:
                description: "The process ID of this container"
                type: "integer"
                example: 1234
            ExitCode:
                description: "The last exit code of this container"
                type: "integer"
                example: 0
            Error:
                type: "string"
            StartedAt:
                description: "The time when this container was last started."
                type: "string"
                example: "2020-01-06T09:06:59.461876391Z"
            FinishedAt:
                description: "The time when this container last exited."
                type: "string"
                example: "2020-01-06T09:07:59.461876391Z"
            Health:
                $ref: "#/definitions/Health"

    ContainerWaitResponse:
        description: "OK response to ContainerWait operation"
        type: "object"
        x-go-name: "WaitResponse"
        title: "ContainerWaitResponse"
        required: [StatusCode]
        properties:
            StatusCode:
                description: "Exit code of the container"
                type: "integer"
                format: "int64"
                x-nullable: false
            Error:
                $ref: "#/definitions/ContainerWaitExitError"

    EventMessage:
        description: |
            EventMessage represents the information an event contains.
        type: "object"
        title: "SystemEventsResponse"
        properties:
            Type:
                description: "The type of object emitting the event"
                type: "string"
                enum:
                    [
                        "builder",
                        "config",
                        "container",
                        "daemon",
                        "image",
                        "network",
                        "node",
                        "plugin",
                        "secret",
                        "service",
                        "volume",
                    ]
                example: "container"
            Action:
                description: "The type of event"
                type: "string"
                example: "create"
            Actor:
                $ref: "#/definitions/EventActor"
            scope:
                description: |
                    Scope of the event. Engine events are `local` scope. Cluster (Swarm)
                    events are `swarm` scope.
                type: "string"
                enum: ["local", "swarm"]
            time:
                description: "Timestamp of event"
                type: "integer"
                format: "int64"
                example: 1629574695
            timeNano:
                description: "Timestamp of event, with nanosecond accuracy"
                type: "integer"
                format: "int64"
                example: 1629574695515050031

    DistributionInspect:
        type: "object"
        x-go-name: DistributionInspect
        title: "DistributionInspectResponse"
        required: [Descriptor, Platforms]
        description: |
            Describes the result obtained from contacting the registry to retrieve
            image metadata.
        properties:
            Descriptor:
                $ref: "#/definitions/OCIDescriptor"
            Platforms:
                type: "array"
                description: |
                    An array containing all platforms supported by the image.
                items:
                    $ref: "#/definitions/OCIPlatform"

paths:
    /containers/json:
        get:
            summary: "List containers"
            description: |
                Returns a list of containers. For details on the format, see the
                [inspect endpoint](#operation/ContainerInspect).

                Note that it uses a different, smaller representation of a container
                than inspecting a single container. For example, the list of linked
                containers is not propagated .
            operationId: "ContainerList"
            produces:
                - "application/json"
            parameters:
                - name: "all"
                  in: "query"
                  description: |
                      Return all containers. By default, only running containers are shown.
                  type: "boolean"
                  default: false
                - name: "limit"
                  in: "query"
                  description: |
                      Return this number of most recently created containers, including
                      non-running ones.
                  type: "integer"
                - name: "size"
                  in: "query"
                  description: |
                      Return the size of container as fields `SizeRw` and `SizeRootFs`.
                  type: "boolean"
                  default: false
                - name: "filters"
                  in: "query"
                  description: |
                      Filters to process on the container list, encoded as JSON (a
                      `map[string][]string`). For example, `{"status": ["paused"]}` will
                      only return paused containers.

                      Available filters:

                      - `ancestor`=(`<image-name>[:<tag>]`, `<image id>`, or `<image@digest>`)
                      - `before`=(`<container id>` or `<container name>`)
                      - `expose`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
                      - `exited=<int>` containers with exit code of `<int>`
                      - `health`=(`starting`|`healthy`|`unhealthy`|`none`)
                      - `id=<ID>` a container's ID
                      - `isolation=`(`default`|`process`|`hyperv`) (Windows daemon only)
                      - `is-task=`(`true`|`false`)
                      - `label=key` or `label="key=value"` of a container label
                      - `name=<name>` a container's name
                      - `network`=(`<network id>` or `<network name>`)
                      - `publish`=(`<port>[/<proto>]`|`<startport-endport>/[<proto>]`)
                      - `since`=(`<container id>` or `<container name>`)
                      - `status=`(`created`|`restarting`|`running`|`removing`|`paused`|`exited`|`dead`)
                      - `volume`=(`<volume name>` or `<mount point destination>`)
                  type: "string"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/ContainerSummary"
                    examples:
                        application/json:
                            - Id: "8dfafdbc3a40"
                              Names:
                                  - "/boring_feynman"
                              Image: "ubuntu:latest"
                              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                              Command: "echo 1"
                              Created: 1367854155
                              State: "Exited"
                              Status: "Exit 0"
                              Ports:
                                  - PrivatePort: 2222
                                    PublicPort: 3333
                                    Type: "tcp"
                              Labels:
                                  com.example.vendor: "Acme"
                                  com.example.license: "GPL"
                                  com.example.version: "1.0"
                              SizeRw: 12288
                              SizeRootFs: 0
                              HostConfig:
                                  NetworkMode: "default"
                              NetworkSettings:
                                  Networks:
                                      bridge:
                                          NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                                          EndpointID: "2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f"
                                          Gateway: "172.17.0.1"
                                          IPAddress: "172.17.0.2"
                                          IPPrefixLen: 16
                                          IPv6Gateway: ""
                                          GlobalIPv6Address: ""
                                          GlobalIPv6PrefixLen: 0
                                          MacAddress: "02:42:ac:11:00:02"
                              Mounts:
                                  - Name: "fac362...80535"
                                    Source: "/data"
                                    Destination: "/data"
                                    Driver: "local"
                                    Mode: "ro,Z"
                                    RW: false
                                    Propagation: ""
                            - Id: "9cd87474be90"
                              Names:
                                  - "/coolName"
                              Image: "ubuntu:latest"
                              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                              Command: "echo 222222"
                              Created: 1367854155
                              State: "Exited"
                              Status: "Exit 0"
                              Ports: []
                              Labels: {}
                              SizeRw: 12288
                              SizeRootFs: 0
                              HostConfig:
                                  NetworkMode: "default"
                              NetworkSettings:
                                  Networks:
                                      bridge:
                                          NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                                          EndpointID: "88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a"
                                          Gateway: "172.17.0.1"
                                          IPAddress: "172.17.0.8"
                                          IPPrefixLen: 16
                                          IPv6Gateway: ""
                                          GlobalIPv6Address: ""
                                          GlobalIPv6PrefixLen: 0
                                          MacAddress: "02:42:ac:11:00:08"
                              Mounts: []
                            - Id: "3176a2479c92"
                              Names:
                                  - "/sleepy_dog"
                              Image: "ubuntu:latest"
                              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                              Command: "echo 3333333333333333"
                              Created: 1367854154
                              State: "Exited"
                              Status: "Exit 0"
                              Ports: []
                              Labels: {}
                              SizeRw: 12288
                              SizeRootFs: 0
                              HostConfig:
                                  NetworkMode: "default"
                              NetworkSettings:
                                  Networks:
                                      bridge:
                                          NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                                          EndpointID: "8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d"
                                          Gateway: "172.17.0.1"
                                          IPAddress: "172.17.0.6"
                                          IPPrefixLen: 16
                                          IPv6Gateway: ""
                                          GlobalIPv6Address: ""
                                          GlobalIPv6PrefixLen: 0
                                          MacAddress: "02:42:ac:11:00:06"
                              Mounts: []
                            - Id: "4cb07b47f9fb"
                              Names:
                                  - "/running_cat"
                              Image: "ubuntu:latest"
                              ImageID: "d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"
                              Command: "echo 444444444444444444444444444444444"
                              Created: 1367854152
                              State: "Exited"
                              Status: "Exit 0"
                              Ports: []
                              Labels: {}
                              SizeRw: 12288
                              SizeRootFs: 0
                              HostConfig:
                                  NetworkMode: "default"
                              NetworkSettings:
                                  Networks:
                                      bridge:
                                          NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                                          EndpointID: "d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9"
                                          Gateway: "172.17.0.1"
                                          IPAddress: "172.17.0.5"
                                          IPPrefixLen: 16
                                          IPv6Gateway: ""
                                          GlobalIPv6Address: ""
                                          GlobalIPv6PrefixLen: 0
                                          MacAddress: "02:42:ac:11:00:05"
                              Mounts: []
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Container"]
    /containers/create:
        post:
            summary: "Create a container"
            operationId: "ContainerCreate"
            consumes:
                - "application/json"
                - "application/octet-stream"
            produces:
                - "application/json"
            parameters:
                - name: "name"
                  in: "query"
                  description: |
                      Assign the specified name to the container. Must match
                      `/?[a-zA-Z0-9][a-zA-Z0-9_.-]+`.
                  type: "string"
                  pattern: "^/?[a-zA-Z0-9][a-zA-Z0-9_.-]+$"
                - name: "platform"
                  in: "query"
                  description: |
                      Platform in the format `os[/arch[/variant]]` used for image lookup.

                      When specified, the daemon checks if the requested image is present
                      in the local image cache with the given OS and Architecture, and
                      otherwise returns a `404` status.

                      If the option is not set, the host's native OS and Architecture are
                      used to look up the image in the image cache. However, if no platform
                      is passed and the given image does exist in the local image cache,
                      but its OS or architecture does not match, the container is created
                      with the available image, and a warning is added to the `Warnings`
                      field in the response, for example;

                          WARNING: The requested image's platform (linux/arm64/v8) does not
                                   match the detected host platform (linux/amd64) and no
                                   specific platform was requested

                  type: "string"
                  default: ""
                - name: "body"
                  in: "body"
                  description: "Container to create"
                  schema:
                      allOf:
                          - $ref: "#/definitions/ContainerConfig"
                          - type: "object"
                            properties:
                                HostConfig:
                                    $ref: "#/definitions/HostConfig"
                                NetworkingConfig:
                                    $ref: "#/definitions/NetworkingConfig"
                      example:
                          Hostname: ""
                          Domainname: ""
                          User: ""
                          AttachStdin: false
                          AttachStdout: true
                          AttachStderr: true
                          Tty: false
                          OpenStdin: false
                          StdinOnce: false
                          Env:
                              - "FOO=bar"
                              - "BAZ=quux"
                          Cmd:
                              - "date"
                          Entrypoint: ""
                          Image: "ubuntu"
                          Labels:
                              com.example.vendor: "Acme"
                              com.example.license: "GPL"
                              com.example.version: "1.0"
                          Volumes:
                              /volumes/data: {}
                          WorkingDir: ""
                          NetworkDisabled: false
                          MacAddress: "12:34:56:78:9a:bc"
                          ExposedPorts:
                              22/tcp: {}
                          StopSignal: "SIGTERM"
                          StopTimeout: 10
                          HostConfig:
                              Binds:
                                  - "/tmp:/tmp"
                              Links:
                                  - "redis3:redis"
                              Memory: 0
                              MemorySwap: 0
                              MemoryReservation: 0
                              NanoCpus: 500000
                              CpuPercent: 80
                              CpuShares: 512
                              CpuPeriod: 100000
                              CpuRealtimePeriod: 1000000
                              CpuRealtimeRuntime: 10000
                              CpuQuota: 50000
                              CpusetCpus: "0,1"
                              CpusetMems: "0,1"
                              MaximumIOps: 0
                              MaximumIOBps: 0
                              BlkioWeight: 300
                              BlkioWeightDevice:
                                  - {}
                              BlkioDeviceReadBps:
                                  - {}
                              BlkioDeviceReadIOps:
                                  - {}
                              BlkioDeviceWriteBps:
                                  - {}
                              BlkioDeviceWriteIOps:
                                  - {}
                              DeviceRequests:
                                  - Driver: "nvidia"
                                    Count: -1
                                    DeviceIDs": ["0", "1", "GPU-fef8089b-4820-abfc-e83e-94318197576e"]
                                    Capabilities: [["gpu", "nvidia", "compute"]]
                                    Options:
                                        property1: "string"
                                        property2: "string"
                              MemorySwappiness: 60
                              OomKillDisable: false
                              OomScoreAdj: 500
                              PidMode: ""
                              PidsLimit: 0
                              PortBindings:
                                  22/tcp:
                                      - HostPort: "11022"
                              PublishAllPorts: false
                              Privileged: false
                              ReadonlyRootfs: false
                              Dns:
                                  - "8.8.8.8"
                              DnsOptions:
                                  - ""
                              DnsSearch:
                                  - ""
                              VolumesFrom:
                                  - "parent"
                                  - "other:ro"
                              CapAdd:
                                  - "NET_ADMIN"
                              CapDrop:
                                  - "MKNOD"
                              GroupAdd:
                                  - "newgroup"
                              RestartPolicy:
                                  Name: ""
                                  MaximumRetryCount: 0
                              AutoRemove: true
                              NetworkMode: "bridge"
                              Devices: []
                              Ulimits:
                                  - {}
                              LogConfig:
                                  Type: "json-file"
                                  Config: {}
                              SecurityOpt: []
                              StorageOpt: {}
                              CgroupParent: ""
                              VolumeDriver: ""
                              ShmSize: 67108864
                          NetworkingConfig:
                              EndpointsConfig:
                                  isolated_nw:
                                      IPAMConfig:
                                          IPv4Address: "172.20.30.33"
                                          IPv6Address: "2001:db8:abcd::3033"
                                          LinkLocalIPs:
                                              - "169.254.34.68"
                                              - "fe80::3468"
                                      Links:
                                          - "container_1"
                                          - "container_2"
                                      Aliases:
                                          - "server_x"
                                          - "server_y"
                                  database_nw: {}

                  required: true
            responses:
                201:
                    description: "Container created successfully"
                    schema:
                        $ref: "#/definitions/ContainerCreateResponse"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such image"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such image: c2ada9df5af8"
                409:
                    description: "conflict"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Container"]
    /containers/{id}/json:
        get:
            summary: "Inspect a container"
            description: "Return low-level information about a container."
            operationId: "ContainerInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "object"
                        title: "ContainerInspectResponse"
                        properties:
                            Id:
                                description: "The ID of the container"
                                type: "string"
                            Created:
                                description: "The time the container was created"
                                type: "string"
                            Path:
                                description: "The path to the command being run"
                                type: "string"
                            Args:
                                description: "The arguments to the command being run"
                                type: "array"
                                items:
                                    type: "string"
                            State:
                                $ref: "#/definitions/ContainerState"
                            Image:
                                description: "The container's image ID"
                                type: "string"
                            ResolvConfPath:
                                type: "string"
                            HostnamePath:
                                type: "string"
                            HostsPath:
                                type: "string"
                            LogPath:
                                type: "string"
                            Name:
                                type: "string"
                            RestartCount:
                                type: "integer"
                            Driver:
                                type: "string"
                            Platform:
                                type: "string"
                            MountLabel:
                                type: "string"
                            ProcessLabel:
                                type: "string"
                            AppArmorProfile:
                                type: "string"
                            ExecIDs:
                                description: "IDs of exec instances that are running in the container."
                                type: "array"
                                items:
                                    type: "string"
                                x-nullable: true
                            HostConfig:
                                $ref: "#/definitions/HostConfig"
                            GraphDriver:
                                $ref: "#/definitions/GraphDriverData"
                            SizeRw:
                                description: |
                                    The size of files that have been created or changed by this
                                    container.
                                type: "integer"
                                format: "int64"
                            SizeRootFs:
                                description: "The total size of all the files in this container."
                                type: "integer"
                                format: "int64"
                            Mounts:
                                type: "array"
                                items:
                                    $ref: "#/definitions/MountPoint"
                            Config:
                                $ref: "#/definitions/ContainerConfig"
                            NetworkSettings:
                                $ref: "#/definitions/NetworkSettings"
                    examples:
                        application/json:
                            AppArmorProfile: ""
                            Args:
                                - "-c"
                                - "exit 9"
                            Config:
                                AttachStderr: true
                                AttachStdin: false
                                AttachStdout: true
                                Cmd:
                                    - "/bin/sh"
                                    - "-c"
                                    - "exit 9"
                                Domainname: ""
                                Env:
                                    - "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
                                Healthcheck:
                                    Test: ["CMD-SHELL", "exit 0"]
                                Hostname: "ba033ac44011"
                                Image: "ubuntu"
                                Labels:
                                    com.example.vendor: "Acme"
                                    com.example.license: "GPL"
                                    com.example.version: "1.0"
                                MacAddress: ""
                                NetworkDisabled: false
                                OpenStdin: false
                                StdinOnce: false
                                Tty: false
                                User: ""
                                Volumes:
                                    /volumes/data: {}
                                WorkingDir: ""
                                StopSignal: "SIGTERM"
                                StopTimeout: 10
                            Created: "2015-01-06T15:47:31.485331387Z"
                            Driver: "overlay2"
                            ExecIDs:
                                - "b35395de42bc8abd327f9dd65d913b9ba28c74d2f0734eeeae84fa1c616a0fca"
                                - "3fc1232e5cd20c8de182ed81178503dc6437f4e7ef12b52cc5e8de020652f1c4"
                            HostConfig:
                                MaximumIOps: 0
                                MaximumIOBps: 0
                                BlkioWeight: 0
                                BlkioWeightDevice:
                                    - {}
                                BlkioDeviceReadBps:
                                    - {}
                                BlkioDeviceWriteBps:
                                    - {}
                                BlkioDeviceReadIOps:
                                    - {}
                                BlkioDeviceWriteIOps:
                                    - {}
                                ContainerIDFile: ""
                                CpusetCpus: ""
                                CpusetMems: ""
                                CpuPercent: 80
                                CpuShares: 0
                                CpuPeriod: 100000
                                CpuRealtimePeriod: 1000000
                                CpuRealtimeRuntime: 10000
                                Devices: []
                                DeviceRequests:
                                    - Driver: "nvidia"
                                      Count: -1
                                      DeviceIDs": ["0", "1", "GPU-fef8089b-4820-abfc-e83e-94318197576e"]
                                      Capabilities: [["gpu", "nvidia", "compute"]]
                                      Options:
                                          property1: "string"
                                          property2: "string"
                                IpcMode: ""
                                Memory: 0
                                MemorySwap: 0
                                MemoryReservation: 0
                                OomKillDisable: false
                                OomScoreAdj: 500
                                NetworkMode: "bridge"
                                PidMode: ""
                                PortBindings: {}
                                Privileged: false
                                ReadonlyRootfs: false
                                PublishAllPorts: false
                                RestartPolicy:
                                    MaximumRetryCount: 2
                                    Name: "on-failure"
                                LogConfig:
                                    Type: "json-file"
                                Sysctls:
                                    net.ipv4.ip_forward: "1"
                                Ulimits:
                                    - {}
                                VolumeDriver: ""
                                ShmSize: 67108864
                            HostnamePath: "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hostname"
                            HostsPath: "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/hosts"
                            LogPath: "/var/lib/docker/containers/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b/1eb5fabf5a03807136561b3c00adcd2992b535d624d5e18b6cdc6a6844d9767b-json.log"
                            Id: "ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39"
                            Image: "04c5d3b7b0656168630d3ba35d8889bd0e9caafcaeb3004d2bfbc47e7c5d35d2"
                            MountLabel: ""
                            Name: "/boring_euclid"
                            NetworkSettings:
                                Bridge: ""
                                SandboxID: ""
                                HairpinMode: false
                                LinkLocalIPv6Address: ""
                                LinkLocalIPv6PrefixLen: 0
                                SandboxKey: ""
                                EndpointID: ""
                                Gateway: ""
                                GlobalIPv6Address: ""
                                GlobalIPv6PrefixLen: 0
                                IPAddress: ""
                                IPPrefixLen: 0
                                IPv6Gateway: ""
                                MacAddress: ""
                                Networks:
                                    bridge:
                                        NetworkID: "7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"
                                        EndpointID: "7587b82f0dada3656fda26588aee72630c6fab1536d36e394b2bfbcf898c971d"
                                        Gateway: "172.17.0.1"
                                        IPAddress: "172.17.0.2"
                                        IPPrefixLen: 16
                                        IPv6Gateway: ""
                                        GlobalIPv6Address: ""
                                        GlobalIPv6PrefixLen: 0
                                        MacAddress: "02:42:ac:12:00:02"
                            Path: "/bin/sh"
                            ProcessLabel: ""
                            ResolvConfPath: "/var/lib/docker/containers/ba033ac4401106a3b513bc9d639eee123ad78ca3616b921167cd74b20e25ed39/resolv.conf"
                            RestartCount: 1
                            State:
                                Error: ""
                                ExitCode: 9
                                FinishedAt: "2015-01-06T15:47:32.080254511Z"
                                Health:
                                    Status: "healthy"
                                    FailingStreak: 0
                                    Log:
                                        - Start: "2019-12-22T10:59:05.6385933Z"
                                          End: "2019-12-22T10:59:05.8078452Z"
                                          ExitCode: 0
                                          Output: ""
                                OOMKilled: false
                                Dead: false
                                Paused: false
                                Pid: 0
                                Restarting: false
                                Running: true
                                StartedAt: "2015-01-06T15:47:32.072697474Z"
                                Status: "running"
                            Mounts:
                                - Name: "fac362...80535"
                                  Source: "/data"
                                  Destination: "/data"
                                  Driver: "local"
                                  Mode: "ro,Z"
                                  RW: false
                                  Propagation: ""
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "size"
                  in: "query"
                  type: "boolean"
                  default: false
                  description: "Return the size of container as fields `SizeRw` and `SizeRootFs`"
            tags: ["Container"]
    /containers/{id}/top:
        get:
            summary: "List processes running inside a container"
            description: |
                On Unix systems, this is done by running the `ps` command. This endpoint
                is not supported on Windows.
            operationId: "ContainerTop"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "object"
                        title: "ContainerTopResponse"
                        description: "OK response to ContainerTop operation"
                        properties:
                            Titles:
                                description: "The ps column titles"
                                type: "array"
                                items:
                                    type: "string"
                            Processes:
                                description: |
                                    Each process running in the container, where each is process
                                    is an array of values corresponding to the titles.
                                type: "array"
                                items:
                                    type: "array"
                                    items:
                                        type: "string"
                    examples:
                        application/json:
                            Titles:
                                - "UID"
                                - "PID"
                                - "PPID"
                                - "C"
                                - "STIME"
                                - "TTY"
                                - "TIME"
                                - "CMD"
                            Processes:
                                - - "root"
                                  - "13642"
                                  - "882"
                                  - "0"
                                  - "17:03"
                                  - "pts/0"
                                  - "00:00:00"
                                  - "/bin/bash"
                                - - "root"
                                  - "13735"
                                  - "13642"
                                  - "0"
                                  - "17:06"
                                  - "pts/0"
                                  - "00:00:00"
                                  - "sleep 10"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "ps_args"
                  in: "query"
                  description: "The arguments to pass to `ps`. For example, `aux`"
                  type: "string"
                  default: "-ef"
            tags: ["Container"]
    /containers/{id}/logs:
        get:
            summary: "Get container logs"
            description: |
                Get `stdout` and `stderr` logs from a container.

                Note: This endpoint works only for containers with the `json-file` or
                `journald` logging driver.
            produces:
                - "application/vnd.docker.raw-stream"
                - "application/vnd.docker.multiplexed-stream"
            operationId: "ContainerLogs"
            responses:
                200:
                    description: |
                        logs returned as a stream in response body.
                        For the stream format, [see the documentation for the attach endpoint](#operation/ContainerAttach).
                        Note that unlike the attach endpoint, the logs endpoint does not
                        upgrade the connection and does not set Content-Type.
                    schema:
                        type: "string"
                        format: "binary"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "follow"
                  in: "query"
                  description: "Keep connection after returning logs."
                  type: "boolean"
                  default: false
                - name: "stdout"
                  in: "query"
                  description: "Return logs from `stdout`"
                  type: "boolean"
                  default: false
                - name: "stderr"
                  in: "query"
                  description: "Return logs from `stderr`"
                  type: "boolean"
                  default: false
                - name: "since"
                  in: "query"
                  description: "Only return logs since this time, as a UNIX timestamp"
                  type: "integer"
                  default: 0
                - name: "until"
                  in: "query"
                  description: "Only return logs before this time, as a UNIX timestamp"
                  type: "integer"
                  default: 0
                - name: "timestamps"
                  in: "query"
                  description: "Add timestamps to every log line"
                  type: "boolean"
                  default: false
                - name: "tail"
                  in: "query"
                  description: |
                      Only return this number of log lines from the end of the logs.
                      Specify as an integer or `all` to output all log lines.
                  type: "string"
                  default: "all"
            tags: ["Container"]
    /containers/{id}/changes:
        get:
            summary: "Get changes on a container’s filesystem"
            description: |
                Returns which files in a container's filesystem have been added, deleted,
                or modified. The `Kind` of modification can be one of:

                - `0`: Modified ("C")
                - `1`: Added ("A")
                - `2`: Deleted ("D")
            operationId: "ContainerChanges"
            produces: ["application/json"]
            responses:
                200:
                    description: "The list of changes"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/FilesystemChange"
                    examples:
                        application/json:
                            - Path: "/dev"
                              Kind: 0
                            - Path: "/dev/kmsg"
                              Kind: 1
                            - Path: "/test"
                              Kind: 1
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
            tags: ["Container"]
    /containers/{id}/export:
        get:
            summary: "Export a container"
            description: "Export the contents of a container as a tarball."
            operationId: "ContainerExport"
            produces:
                - "application/octet-stream"
            responses:
                200:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
            tags: ["Container"]
    /containers/{id}/stats:
        get:
            summary: "Get container stats based on resource usage"
            description: |
                This endpoint returns a live stream of a container’s resource usage
                statistics.

                The `precpu_stats` is the CPU statistic of the *previous* read, and is
                used to calculate the CPU usage percentage. It is not an exact copy
                of the `cpu_stats` field.

                If either `precpu_stats.online_cpus` or `cpu_stats.online_cpus` is
                nil then for compatibility with older daemons the length of the
                corresponding `cpu_usage.percpu_usage` array should be used.

                On a cgroup v2 host, the following fields are not set
                * `blkio_stats`: all fields other than `io_service_bytes_recursive`
                * `cpu_stats`: `cpu_usage.percpu_usage`
                * `memory_stats`: `max_usage` and `failcnt`
                Also, `memory_stats.stats` fields are incompatible with cgroup v1.

                To calculate the values shown by the `stats` command of the docker cli tool
                the following formulas can be used:
                * used_memory = `memory_stats.usage - memory_stats.stats.cache`
                * available_memory = `memory_stats.limit`
                * Memory usage % = `(used_memory / available_memory) * 100.0`
                * cpu_delta = `cpu_stats.cpu_usage.total_usage - precpu_stats.cpu_usage.total_usage`
                * system_cpu_delta = `cpu_stats.system_cpu_usage - precpu_stats.system_cpu_usage`
                * number_cpus = `lenght(cpu_stats.cpu_usage.percpu_usage)` or `cpu_stats.online_cpus`
                * CPU usage % = `(cpu_delta / system_cpu_delta) * number_cpus * 100.0`
            operationId: "ContainerStats"
            produces: ["application/json"]
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "object"
                    examples:
                        application/json:
                            read: "2015-01-08T22:57:31.547920715Z"
                            pids_stats:
                                current: 3
                            networks:
                                eth0:
                                    rx_bytes: 5338
                                    rx_dropped: 0
                                    rx_errors: 0
                                    rx_packets: 36
                                    tx_bytes: 648
                                    tx_dropped: 0
                                    tx_errors: 0
                                    tx_packets: 8
                                eth5:
                                    rx_bytes: 4641
                                    rx_dropped: 0
                                    rx_errors: 0
                                    rx_packets: 26
                                    tx_bytes: 690
                                    tx_dropped: 0
                                    tx_errors: 0
                                    tx_packets: 9
                            memory_stats:
                                stats:
                                    total_pgmajfault: 0
                                    cache: 0
                                    mapped_file: 0
                                    total_inactive_file: 0
                                    pgpgout: 414
                                    rss: 6537216
                                    total_mapped_file: 0
                                    writeback: 0
                                    unevictable: 0
                                    pgpgin: 477
                                    total_unevictable: 0
                                    pgmajfault: 0
                                    total_rss: 6537216
                                    total_rss_huge: 6291456
                                    total_writeback: 0
                                    total_inactive_anon: 0
                                    rss_huge: 6291456
                                    hierarchical_memory_limit: 67108864
                                    total_pgfault: 964
                                    total_active_file: 0
                                    active_anon: 6537216
                                    total_active_anon: 6537216
                                    total_pgpgout: 414
                                    total_cache: 0
                                    inactive_anon: 0
                                    active_file: 0
                                    pgfault: 964
                                    inactive_file: 0
                                    total_pgpgin: 477
                                max_usage: 6651904
                                usage: 6537216
                                failcnt: 0
                                limit: 67108864
                            blkio_stats: {}
                            cpu_stats:
                                cpu_usage:
                                    percpu_usage:
                                        - 8646879
                                        - 24472255
                                        - 36438778
                                        - 30657443
                                    usage_in_usermode: 50000000
                                    total_usage: 100215355
                                    usage_in_kernelmode: 30000000
                                system_cpu_usage: 739306590000000
                                online_cpus: 4
                                throttling_data:
                                    periods: 0
                                    throttled_periods: 0
                                    throttled_time: 0
                            precpu_stats:
                                cpu_usage:
                                    percpu_usage:
                                        - 8646879
                                        - 24350896
                                        - 36438778
                                        - 30657443
                                    usage_in_usermode: 50000000
                                    total_usage: 100093996
                                    usage_in_kernelmode: 30000000
                                system_cpu_usage: 9492140000000
                                online_cpus: 4
                                throttling_data:
                                    periods: 0
                                    throttled_periods: 0
                                    throttled_time: 0
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "stream"
                  in: "query"
                  description: |
                      Stream the output. If false, the stats will be output once and then
                      it will disconnect.
                  type: "boolean"
                  default: true
                - name: "one-shot"
                  in: "query"
                  description: |
                      Only get a single stat instead of waiting for 2 cycles. Must be used
                      with `stream=false`.
                  type: "boolean"
                  default: false
            tags: ["Container"]
    /containers/{id}/resize:
        post:
            summary: "Resize a container TTY"
            description: "Resize the TTY for a container."
            operationId: "ContainerResize"
            consumes:
                - "application/octet-stream"
            produces:
                - "text/plain"
            responses:
                200:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "cannot resize container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "h"
                  in: "query"
                  description: "Height of the TTY session in characters"
                  type: "integer"
                - name: "w"
                  in: "query"
                  description: "Width of the TTY session in characters"
                  type: "integer"
            tags: ["Container"]
    /containers/{id}/start:
        post:
            summary: "Start a container"
            operationId: "ContainerStart"
            responses:
                204:
                    description: "no error"
                304:
                    description: "container already started"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "detachKeys"
                  in: "query"
                  description: |
                      Override the key sequence for detaching a container. Format is a
                      single character `[a-Z]` or `ctrl-<value>` where `<value>` is one
                      of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                  type: "string"
            tags: ["Container"]
    /containers/{id}/stop:
        post:
            summary: "Stop a container"
            operationId: "ContainerStop"
            responses:
                204:
                    description: "no error"
                304:
                    description: "container already stopped"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "signal"
                  in: "query"
                  description: |
                      Signal to send to the container as an integer or string (e.g. `SIGINT`).
                  type: "string"
                - name: "t"
                  in: "query"
                  description: "Number of seconds to wait before killing the container"
                  type: "integer"
            tags: ["Container"]
    /containers/{id}/restart:
        post:
            summary: "Restart a container"
            operationId: "ContainerRestart"
            responses:
                204:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "signal"
                  in: "query"
                  description: |
                      Signal to send to the container as an integer or string (e.g. `SIGINT`).
                  type: "string"
                - name: "t"
                  in: "query"
                  description: "Number of seconds to wait before killing the container"
                  type: "integer"
            tags: ["Container"]
    /containers/{id}/kill:
        post:
            summary: "Kill a container"
            description: |
                Send a POSIX signal to a container, defaulting to killing to the
                container.
            operationId: "ContainerKill"
            responses:
                204:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                409:
                    description: "container is not running"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "Container d37cde0fe4ad63c3a7252023b2f9800282894247d145cb5933ddf6e52cc03a28 is not running"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "signal"
                  in: "query"
                  description: |
                      Signal to send to the container as an integer or string (e.g. `SIGINT`).
                  type: "string"
                  default: "SIGKILL"
            tags: ["Container"]
    /containers/{id}/update:
        post:
            summary: "Update a container"
            description: |
                Change various configuration options of a container without having to
                recreate it.
            operationId: "ContainerUpdate"
            consumes: ["application/json"]
            produces: ["application/json"]
            responses:
                200:
                    description: "The container has been updated."
                    schema:
                        type: "object"
                        title: "ContainerUpdateResponse"
                        description: "OK response to ContainerUpdate operation"
                        properties:
                            Warnings:
                                type: "array"
                                items:
                                    type: "string"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "update"
                  in: "body"
                  required: true
                  schema:
                      allOf:
                          - $ref: "#/definitions/Resources"
                          - type: "object"
                            properties:
                                RestartPolicy:
                                    $ref: "#/definitions/RestartPolicy"
                      example:
                          BlkioWeight: 300
                          CpuShares: 512
                          CpuPeriod: 100000
                          CpuQuota: 50000
                          CpuRealtimePeriod: 1000000
                          CpuRealtimeRuntime: 10000
                          CpusetCpus: "0,1"
                          CpusetMems: "0"
                          Memory: 314572800
                          MemorySwap: 514288000
                          MemoryReservation: 209715200
                          RestartPolicy:
                              MaximumRetryCount: 4
                              Name: "on-failure"
            tags: ["Container"]
    /containers/{id}/rename:
        post:
            summary: "Rename a container"
            operationId: "ContainerRename"
            responses:
                204:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                409:
                    description: "name already in use"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "name"
                  in: "query"
                  required: true
                  description: "New name for the container"
                  type: "string"
            tags: ["Container"]
    /containers/{id}/pause:
        post:
            summary: "Pause a container"
            description: |
                Use the freezer cgroup to suspend all processes in a container.

                Traditionally, when suspending a process the `SIGSTOP` signal is used,
                which is observable by the process being suspended. With the freezer
                cgroup the process is unaware, and unable to capture, that it is being
                suspended, and subsequently resumed.
            operationId: "ContainerPause"
            responses:
                204:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
            tags: ["Container"]
    /containers/{id}/unpause:
        post:
            summary: "Unpause a container"
            description: "Resume a container which has been paused."
            operationId: "ContainerUnpause"
            responses:
                204:
                    description: "no error"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
            tags: ["Container"]
    /containers/{id}/attach:
        post:
            summary: "Attach to a container"
            description: |
                Attach to a container to read its output or send it input. You can attach
                to the same container multiple times and you can reattach to containers
                that have been detached.

                Either the `stream` or `logs` parameter must be `true` for this endpoint
                to do anything.

                See the [documentation for the `docker attach` command](https://docs.docker.com/engine/reference/commandline/attach/)
                for more details.

                ### Hijacking

                This endpoint hijacks the HTTP connection to transport `stdin`, `stdout`,
                and `stderr` on the same socket.

                This is the response from the daemon for an attach request:

                ```
                HTTP/1.1 200 OK
                Content-Type: application/vnd.docker.raw-stream

                [STREAM]
                ```

                After the headers and two new lines, the TCP connection can now be used
                for raw, bidirectional communication between the client and server.

                To hint potential proxies about connection hijacking, the Docker client
                can also optionally send connection upgrade headers.

                For example, the client sends this request to upgrade the connection:

                ```
                POST /containers/16253994b7c4/attach?stream=1&stdout=1 HTTP/1.1
                Upgrade: tcp
                Connection: Upgrade
                ```

                The Docker daemon will respond with a `101 UPGRADED` response, and will
                similarly follow with the raw stream:

                ```
                HTTP/1.1 101 UPGRADED
                Content-Type: application/vnd.docker.raw-stream
                Connection: Upgrade
                Upgrade: tcp

                [STREAM]
                ```

                ### Stream format

                When the TTY setting is disabled in [`POST /containers/create`](#operation/ContainerCreate),
                the HTTP Content-Type header is set to application/vnd.docker.multiplexed-stream
                and the stream over the hijacked connected is multiplexed to separate out
                `stdout` and `stderr`. The stream consists of a series of frames, each
                containing a header and a payload.

                The header contains the information which the stream writes (`stdout` or
                `stderr`). It also contains the size of the associated frame encoded in
                the last four bytes (`uint32`).

                It is encoded on the first eight bytes like this:

                ```go
                header := [8]byte{STREAM_TYPE, 0, 0, 0, SIZE1, SIZE2, SIZE3, SIZE4}
                ```

                `STREAM_TYPE` can be:

                - 0: `stdin` (is written on `stdout`)
                - 1: `stdout`
                - 2: `stderr`

                `SIZE1, SIZE2, SIZE3, SIZE4` are the four bytes of the `uint32` size
                encoded as big endian.

                Following the header is the payload, which is the specified number of
                bytes of `STREAM_TYPE`.

                The simplest way to implement this protocol is the following:

                1. Read 8 bytes.
                2. Choose `stdout` or `stderr` depending on the first byte.
                3. Extract the frame size from the last four bytes.
                4. Read the extracted size and output it on the correct output.
                5. Goto 1.

                ### Stream format when using a TTY

                When the TTY setting is enabled in [`POST /containers/create`](#operation/ContainerCreate),
                the stream is not multiplexed. The data exchanged over the hijacked
                connection is simply the raw data from the process PTY and client's
                `stdin`.

            operationId: "ContainerAttach"
            produces:
                - "application/vnd.docker.raw-stream"
                - "application/vnd.docker.multiplexed-stream"
            responses:
                101:
                    description: "no error, hints proxy about hijacking"
                200:
                    description: "no error, no upgrade header found"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "detachKeys"
                  in: "query"
                  description: |
                      Override the key sequence for detaching a container.Format is a single
                      character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
                      `@`, `^`, `[`, `,` or `_`.
                  type: "string"
                - name: "logs"
                  in: "query"
                  description: |
                      Replay previous logs from the container.

                      This is useful for attaching to a container that has started and you
                      want to output everything since the container started.

                      If `stream` is also enabled, once all the previous output has been
                      returned, it will seamlessly transition into streaming current
                      output.
                  type: "boolean"
                  default: false
                - name: "stream"
                  in: "query"
                  description: |
                      Stream attached streams from the time the request was made onwards.
                  type: "boolean"
                  default: false
                - name: "stdin"
                  in: "query"
                  description: "Attach to `stdin`"
                  type: "boolean"
                  default: false
                - name: "stdout"
                  in: "query"
                  description: "Attach to `stdout`"
                  type: "boolean"
                  default: false
                - name: "stderr"
                  in: "query"
                  description: "Attach to `stderr`"
                  type: "boolean"
                  default: false
            tags: ["Container"]
    /containers/{id}/attach/ws:
        get:
            summary: "Attach to a container via a websocket"
            operationId: "ContainerAttachWebsocket"
            responses:
                101:
                    description: "no error, hints proxy about hijacking"
                200:
                    description: "no error, no upgrade header found"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "detachKeys"
                  in: "query"
                  description: |
                      Override the key sequence for detaching a container.Format is a single
                      character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`,
                      `@`, `^`, `[`, `,`, or `_`.
                  type: "string"
                - name: "logs"
                  in: "query"
                  description: "Return logs"
                  type: "boolean"
                  default: false
                - name: "stream"
                  in: "query"
                  description: "Return stream"
                  type: "boolean"
                  default: false
                - name: "stdin"
                  in: "query"
                  description: "Attach to `stdin`"
                  type: "boolean"
                  default: false
                - name: "stdout"
                  in: "query"
                  description: "Attach to `stdout`"
                  type: "boolean"
                  default: false
                - name: "stderr"
                  in: "query"
                  description: "Attach to `stderr`"
                  type: "boolean"
                  default: false
            tags: ["Container"]
    /containers/{id}/wait:
        post:
            summary: "Wait for a container"
            description: "Block until a container stops, then returns the exit code."
            operationId: "ContainerWait"
            produces: ["application/json"]
            responses:
                200:
                    description: "The container has exit."
                    schema:
                        $ref: "#/definitions/ContainerWaitResponse"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "condition"
                  in: "query"
                  description: |
                      Wait until a container state reaches the given condition.

                      Defaults to `not-running` if omitted or empty.
                  type: "string"
                  enum:
                      - "not-running"
                      - "next-exit"
                      - "removed"
                  default: "not-running"
            tags: ["Container"]
    /containers/{id}:
        delete:
            summary: "Remove a container"
            operationId: "ContainerDelete"
            responses:
                204:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                409:
                    description: "conflict"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: |
                                You cannot remove a running container: c2ada9df5af8. Stop the
                                container before attempting removal or force remove
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "v"
                  in: "query"
                  description: "Remove anonymous volumes associated with the container."
                  type: "boolean"
                  default: false
                - name: "force"
                  in: "query"
                  description: "If the container is running, kill it before removing it."
                  type: "boolean"
                  default: false
                - name: "link"
                  in: "query"
                  description: "Remove the specified link associated with the container."
                  type: "boolean"
                  default: false
            tags: ["Container"]
    /containers/{id}/archive:
        head:
            summary: "Get information about files in a container"
            description: |
                A response header `X-Docker-Container-Path-Stat` is returned, containing
                a base64 - encoded JSON object with some filesystem header information
                about the path.
            operationId: "ContainerArchiveInfo"
            responses:
                200:
                    description: "no error"
                    headers:
                        X-Docker-Container-Path-Stat:
                            type: "string"
                            description: |
                                A base64 - encoded JSON object with some filesystem header
                                information about the path
                400:
                    description: "Bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "Container or path does not exist"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "path"
                  in: "query"
                  required: true
                  description: "Resource in the container’s filesystem to archive."
                  type: "string"
            tags: ["Container"]
        get:
            summary: "Get an archive of a filesystem resource in a container"
            description: "Get a tar archive of a resource in the filesystem of container id."
            operationId: "ContainerArchive"
            produces: ["application/x-tar"]
            responses:
                200:
                    description: "no error"
                400:
                    description: "Bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "Container or path does not exist"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "path"
                  in: "query"
                  required: true
                  description: "Resource in the container’s filesystem to archive."
                  type: "string"
            tags: ["Container"]
        put:
            summary: "Extract an archive of files or folders to a directory in a container"
            description: |
                Upload a tar archive to be extracted to a path in the filesystem of container id.
                `path` parameter is asserted to be a directory. If it exists as a file, 400 error
                will be returned with message "not a directory".
            operationId: "PutContainerArchive"
            consumes: ["application/x-tar", "application/octet-stream"]
            responses:
                200:
                    description: "The content was extracted successfully"
                400:
                    description: "Bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "not a directory"
                403:
                    description: "Permission denied, the volume or container rootfs is marked as read-only."
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "No such container or path does not exist inside the container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the container"
                  type: "string"
                - name: "path"
                  in: "query"
                  required: true
                  description: "Path to a directory in the container to extract the archive’s contents into. "
                  type: "string"
                - name: "noOverwriteDirNonDir"
                  in: "query"
                  description: |
                      If `1`, `true`, or `True` then it will be an error if unpacking the
                      given content would cause an existing directory to be replaced with
                      a non-directory and vice versa.
                  type: "string"
                - name: "copyUIDGID"
                  in: "query"
                  description: |
                      If `1`, `true`, then it will copy UID/GID maps to the dest file or
                      dir
                  type: "string"
                - name: "inputStream"
                  in: "body"
                  required: true
                  description: |
                      The input stream must be a tar archive compressed with one of the
                      following algorithms: `identity` (no compression), `gzip`, `bzip2`,
                      or `xz`.
                  schema:
                      type: "string"
                      format: "binary"
            tags: ["Container"]
    /containers/prune:
        post:
            summary: "Delete stopped containers"
            produces:
                - "application/json"
            operationId: "ContainerPrune"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

                      Available filters:
                      - `until=<timestamp>` Prune containers created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                      - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune containers with (or without, in case `label!=...` is used) the specified labels.
                  type: "string"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "ContainerPruneResponse"
                        properties:
                            ContainersDeleted:
                                description: "Container IDs that were deleted"
                                type: "array"
                                items:
                                    type: "string"
                            SpaceReclaimed:
                                description: "Disk space reclaimed in bytes"
                                type: "integer"
                                format: "int64"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Container"]
    /images/json:
        get:
            summary: "List Images"
            description: "Returns a list of images on the server. Note that it uses a different, smaller representation of an image than inspecting a single image."
            operationId: "ImageList"
            produces:
                - "application/json"
            responses:
                200:
                    description: "Summary image data for the images matching the query"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/ImageSummary"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "all"
                  in: "query"
                  description: "Show all images. Only images from a final layer (no children) are shown by default."
                  type: "boolean"
                  default: false
                - name: "filters"
                  in: "query"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the images list.

                      Available filters:

                      - `before`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                      - `dangling=true`
                      - `label=key` or `label="key=value"` of an image label
                      - `reference`=(`<image-name>[:<tag>]`)
                      - `since`=(`<image-name>[:<tag>]`,  `<image id>` or `<image@digest>`)
                      - `until=<timestamp>`
                  type: "string"
                - name: "shared-size"
                  in: "query"
                  description: "Compute and show shared size as a `SharedSize` field on each image."
                  type: "boolean"
                  default: false
                - name: "digests"
                  in: "query"
                  description: "Show digest information as a `RepoDigests` field on each image."
                  type: "boolean"
                  default: false
            tags: ["Image"]
    /build:
        post:
            summary: "Build an image"
            description: |
                Build an image from a tar archive with a `Dockerfile` in it.

                The `Dockerfile` specifies how the image is built from the tar archive. It is typically in the archive's root, but can be at a different path or have a different name by specifying the `dockerfile` parameter. [See the `Dockerfile` reference for more information](https://docs.docker.com/engine/reference/builder/).

                The Docker daemon performs a preliminary validation of the `Dockerfile` before starting the build, and returns an error if the syntax is incorrect. After that, each instruction is run one-by-one until the ID of the new image is output.

                The build is canceled if the client drops the connection by quitting or being killed.
            operationId: "ImageBuild"
            consumes:
                - "application/octet-stream"
            produces:
                - "application/json"
            parameters:
                - name: "inputStream"
                  in: "body"
                  description: "A tar archive compressed with one of the following algorithms: identity (no compression), gzip, bzip2, xz."
                  schema:
                      type: "string"
                      format: "binary"
                - name: "dockerfile"
                  in: "query"
                  description: "Path within the build context to the `Dockerfile`. This is ignored if `remote` is specified and points to an external `Dockerfile`."
                  type: "string"
                  default: "Dockerfile"
                - name: "t"
                  in: "query"
                  description: "A name and optional tag to apply to the image in the `name:tag` format. If you omit the tag the default `latest` value is assumed. You can provide several `t` parameters."
                  type: "string"
                - name: "extrahosts"
                  in: "query"
                  description: "Extra hosts to add to /etc/hosts"
                  type: "string"
                - name: "remote"
                  in: "query"
                  description: "A Git repository URI or HTTP/HTTPS context URI. If the URI points to a single text file, the file’s contents are placed into a file called `Dockerfile` and the image is built from that file. If the URI points to a tarball, the file is downloaded by the daemon and the contents therein used as the context for the build. If the URI points to a tarball and the `dockerfile` parameter is also specified, there must be a file with the corresponding path inside the tarball."
                  type: "string"
                - name: "q"
                  in: "query"
                  description: "Suppress verbose build output."
                  type: "boolean"
                  default: false
                - name: "nocache"
                  in: "query"
                  description: "Do not use the cache when building the image."
                  type: "boolean"
                  default: false
                - name: "cachefrom"
                  in: "query"
                  description: "JSON array of images used for build cache resolution."
                  type: "string"
                - name: "pull"
                  in: "query"
                  description: "Attempt to pull the image even if an older image exists locally."
                  type: "string"
                - name: "rm"
                  in: "query"
                  description: "Remove intermediate containers after a successful build."
                  type: "boolean"
                  default: true
                - name: "forcerm"
                  in: "query"
                  description: "Always remove intermediate containers, even upon failure."
                  type: "boolean"
                  default: false
                - name: "memory"
                  in: "query"
                  description: "Set memory limit for build."
                  type: "integer"
                - name: "memswap"
                  in: "query"
                  description: "Total memory (memory + swap). Set as `-1` to disable swap."
                  type: "integer"
                - name: "cpushares"
                  in: "query"
                  description: "CPU shares (relative weight)."
                  type: "integer"
                - name: "cpusetcpus"
                  in: "query"
                  description: "CPUs in which to allow execution (e.g., `0-3`, `0,1`)."
                  type: "string"
                - name: "cpuperiod"
                  in: "query"
                  description: "The length of a CPU period in microseconds."
                  type: "integer"
                - name: "cpuquota"
                  in: "query"
                  description: "Microseconds of CPU time that the container can get in a CPU period."
                  type: "integer"
                - name: "buildargs"
                  in: "query"
                  description: >
                      JSON map of string pairs for build-time variables. Users pass these values at build-time. Docker
                      uses the buildargs as the environment context for commands run via the `Dockerfile` RUN
                      instruction, or for variable expansion in other `Dockerfile` instructions. This is not meant for
                      passing secret values.


                      For example, the build arg `FOO=bar` would become `{"FOO":"bar"}` in JSON. This would result in the
                      query parameter `buildargs={"FOO":"bar"}`. Note that `{"FOO":"bar"}` should be URI component encoded.


                      [Read more about the buildargs instruction.](https://docs.docker.com/engine/reference/builder/#arg)
                  type: "string"
                - name: "shmsize"
                  in: "query"
                  description: "Size of `/dev/shm` in bytes. The size must be greater than 0. If omitted the system uses 64MB."
                  type: "integer"
                - name: "squash"
                  in: "query"
                  description: "Squash the resulting images layers into a single layer. *(Experimental release only.)*"
                  type: "boolean"
                - name: "labels"
                  in: "query"
                  description: "Arbitrary key/value labels to set on the image, as a JSON map of string pairs."
                  type: "string"
                - name: "networkmode"
                  in: "query"
                  description: |
                      Sets the networking mode for the run commands during build. Supported
                      standard values are: `bridge`, `host`, `none`, and `container:<name|id>`.
                      Any other value is taken as a custom network's name or ID to which this
                      container should connect to.
                  type: "string"
                - name: "Content-type"
                  in: "header"
                  type: "string"
                  enum:
                      - "application/x-tar"
                  default: "application/x-tar"
                - name: "X-Registry-Config"
                  in: "header"
                  description: |
                      This is a base64-encoded JSON object with auth configurations for multiple registries that a build may refer to.

                      The key is a registry URL, and the value is an auth configuration object, [as described in the authentication section](#section/Authentication). For example:

                      ```
                      {
                        "docker.example.com": {
                          "username": "janedoe",
                          "password": "hunter2"
                        },
                        "https://index.docker.io/v1/": {
                          "username": "mobydock",
                          "password": "conta1n3rize14"
                        }
                      }
                      ```

                      Only the registry domain name (and port if not the default 443) are required. However, for legacy reasons, the Docker Hub registry must be specified with both a `https://` prefix and a `/v1/` suffix even though Docker will prefer to use the v2 registry API.
                  type: "string"
                - name: "platform"
                  in: "query"
                  description: "Platform in the format os[/arch[/variant]]"
                  type: "string"
                  default: ""
                - name: "target"
                  in: "query"
                  description: "Target build stage"
                  type: "string"
                  default: ""
                - name: "outputs"
                  in: "query"
                  description: "BuildKit output configuration"
                  type: "string"
                  default: ""
                - name: "version"
                  in: "query"
                  type: "string"
                  default: "1"
                  enum: ["1", "2"]
                  description: |
                      Version of the builder backend to use.

                      - `1` is the first generation classic (deprecated) builder in the Docker daemon (default)
                      - `2` is [BuildKit](https://github.com/moby/buildkit)
            responses:
                200:
                    description: "no error"
                400:
                    description: "Bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Image"]
    /build/prune:
        post:
            summary: "Delete builder cache"
            produces:
                - "application/json"
            operationId: "BuildPrune"
            parameters:
                - name: "keep-storage"
                  in: "query"
                  description: "Amount of disk space in bytes to keep for cache"
                  type: "integer"
                  format: "int64"
                - name: "all"
                  in: "query"
                  type: "boolean"
                  description: "Remove all types of build cache"
                - name: "filters"
                  in: "query"
                  type: "string"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the list of build cache objects.

                      Available filters:

                      - `until=<timestamp>` remove cache older than `<timestamp>`. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon's local time.
                      - `id=<id>`
                      - `parent=<id>`
                      - `type=<string>`
                      - `description=<string>`
                      - `inuse`
                      - `shared`
                      - `private`
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "BuildPruneResponse"
                        properties:
                            CachesDeleted:
                                type: "array"
                                items:
                                    description: "ID of build cache object"
                                    type: "string"
                            SpaceReclaimed:
                                description: "Disk space reclaimed in bytes"
                                type: "integer"
                                format: "int64"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Image"]
    /images/create:
        post:
            summary: "Create an image"
            description: "Pull or import an image."
            operationId: "ImageCreate"
            consumes:
                - "text/plain"
                - "application/octet-stream"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                404:
                    description: "repository does not exist or no read access"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "fromImage"
                  in: "query"
                  description: "Name of the image to pull. The name may include a tag or digest. This parameter may only be used when pulling an image. The pull is cancelled if the HTTP connection is closed."
                  type: "string"
                - name: "fromSrc"
                  in: "query"
                  description: "Source to import. The value may be a URL from which the image can be retrieved or `-` to read the image from the request body. This parameter may only be used when importing an image."
                  type: "string"
                - name: "repo"
                  in: "query"
                  description: "Repository name given to an image when it is imported. The repo may include a tag. This parameter may only be used when importing an image."
                  type: "string"
                - name: "tag"
                  in: "query"
                  description: "Tag or digest. If empty when pulling an image, this causes all tags for the given image to be pulled."
                  type: "string"
                - name: "message"
                  in: "query"
                  description: "Set commit message for imported image."
                  type: "string"
                - name: "inputImage"
                  in: "body"
                  description: "Image content if the value `-` has been specified in fromSrc query parameter"
                  schema:
                      type: "string"
                  required: false
                - name: "X-Registry-Auth"
                  in: "header"
                  description: |
                      A base64url-encoded auth configuration.

                      Refer to the [authentication section](#section/Authentication) for
                      details.
                  type: "string"
                - name: "changes"
                  in: "query"
                  description: |
                      Apply `Dockerfile` instructions to the image that is created,
                      for example: `changes=ENV DEBUG=true`.
                      Note that `ENV DEBUG=true` should be URI component encoded.

                      Supported `Dockerfile` instructions:
                      `CMD`|`ENTRYPOINT`|`ENV`|`EXPOSE`|`ONBUILD`|`USER`|`VOLUME`|`WORKDIR`
                  type: "array"
                  items:
                      type: "string"
                - name: "platform"
                  in: "query"
                  description: |
                      Platform in the format os[/arch[/variant]].

                      When used in combination with the `fromImage` option, the daemon checks
                      if the given image is present in the local image cache with the given
                      OS and Architecture, and otherwise attempts to pull the image. If the
                      option is not set, the host's native OS and Architecture are used.
                      If the given image does not exist in the local image cache, the daemon
                      attempts to pull the image with the host's native OS and Architecture.
                      If the given image does exists in the local image cache, but its OS or
                      architecture does not match, a warning is produced.

                      When used with the `fromSrc` option to import an image from an archive,
                      this option sets the platform information for the imported image. If
                      the option is not set, the host's native OS and Architecture are used
                      for the imported image.
                  type: "string"
                  default: ""
            tags: ["Image"]
    /images/{name}/json:
        get:
            summary: "Inspect an image"
            description: "Return low-level information about an image."
            operationId: "ImageInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "No error"
                    schema:
                        $ref: "#/definitions/ImageInspect"
                404:
                    description: "No such image"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such image: someimage (tag: latest)"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or id"
                  type: "string"
                  required: true
            tags: ["Image"]
    /images/{name}/history:
        get:
            summary: "Get the history of an image"
            description: "Return parent layers of an image."
            operationId: "ImageHistory"
            produces: ["application/json"]
            responses:
                200:
                    description: "List of image layers"
                    schema:
                        type: "array"
                        items:
                            type: "object"
                            x-go-name: HistoryResponseItem
                            title: "HistoryResponseItem"
                            description: "individual image layer information in response to ImageHistory operation"
                            required: [Id, Created, CreatedBy, Tags, Size, Comment]
                            properties:
                                Id:
                                    type: "string"
                                    x-nullable: false
                                Created:
                                    type: "integer"
                                    format: "int64"
                                    x-nullable: false
                                CreatedBy:
                                    type: "string"
                                    x-nullable: false
                                Tags:
                                    type: "array"
                                    items:
                                        type: "string"
                                Size:
                                    type: "integer"
                                    format: "int64"
                                    x-nullable: false
                                Comment:
                                    type: "string"
                                    x-nullable: false
                    examples:
                        application/json:
                            - Id: "3db9c44f45209632d6050b35958829c3a2aa256d81b9a7be45b362ff85c54710"
                              Created: 1398108230
                              CreatedBy: "/bin/sh -c #(nop) ADD file:eb15dbd63394e063b805a3c32ca7bf0266ef64676d5a6fab4801f2e81e2a5148 in /"
                              Tags:
                                  - "ubuntu:lucid"
                                  - "ubuntu:10.04"
                              Size: 182964289
                              Comment: ""
                            - Id: "6cfa4d1f33fb861d4d114f43b25abd0ac737509268065cdfd69d544a59c85ab8"
                              Created: 1398108222
                              CreatedBy: "/bin/sh -c #(nop) MAINTAINER Tianon Gravi <admwiggin@gmail.com> - mkimage-debootstrap.sh -i iproute,iputils-ping,ubuntu-minimal -t lucid.tar.xz lucid http://archive.ubuntu.com/ubuntu/"
                              Tags: []
                              Size: 0
                              Comment: ""
                            - Id: "511136ea3c5a64f264b78b5433614aec563103b4d4702f3ba7d4d2698e22c158"
                              Created: 1371157430
                              CreatedBy: ""
                              Tags:
                                  - "scratch12:latest"
                                  - "scratch:latest"
                              Size: 0
                              Comment: "Imported from -"
                404:
                    description: "No such image"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or ID"
                  type: "string"
                  required: true
            tags: ["Image"]
    /images/{name}/push:
        post:
            summary: "Push an image"
            description: |
                Push an image to a registry.

                If you wish to push an image on to a private registry, that image must
                already have a tag which references the registry. For example,
                `registry.example.com/myimage:latest`.

                The push is cancelled if the HTTP connection is closed.
            operationId: "ImagePush"
            consumes:
                - "application/octet-stream"
            responses:
                200:
                    description: "No error"
                404:
                    description: "No such image"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or ID."
                  type: "string"
                  required: true
                - name: "tag"
                  in: "query"
                  description: "The tag to associate with the image on the registry."
                  type: "string"
                - name: "X-Registry-Auth"
                  in: "header"
                  description: |
                      A base64url-encoded auth configuration.

                      Refer to the [authentication section](#section/Authentication) for
                      details.
                  type: "string"
                  required: true
            tags: ["Image"]
    /images/{name}/tag:
        post:
            summary: "Tag an image"
            description: "Tag an image so that it becomes part of a repository."
            operationId: "ImageTag"
            responses:
                201:
                    description: "No error"
                400:
                    description: "Bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "No such image"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                409:
                    description: "Conflict"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or ID to tag."
                  type: "string"
                  required: true
                - name: "repo"
                  in: "query"
                  description: "The repository to tag in. For example, `someuser/someimage`."
                  type: "string"
                - name: "tag"
                  in: "query"
                  description: "The name of the new tag."
                  type: "string"
            tags: ["Image"]
    /images/{name}:
        delete:
            summary: "Remove an image"
            description: |
                Remove an image, along with any untagged parent images that were
                referenced by that image.

                Images can't be removed if they have descendant images, are being
                used by a running container or are being used by a build.
            operationId: "ImageDelete"
            produces: ["application/json"]
            responses:
                200:
                    description: "The image was deleted successfully"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/ImageDeleteResponseItem"
                    examples:
                        application/json:
                            - Untagged: "3e2f21a89f"
                            - Deleted: "3e2f21a89f"
                            - Deleted: "53b4f83ac9"
                404:
                    description: "No such image"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                409:
                    description: "Conflict"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or ID"
                  type: "string"
                  required: true
                - name: "force"
                  in: "query"
                  description: "Remove the image even if it is being used by stopped containers or has other tags"
                  type: "boolean"
                  default: false
                - name: "noprune"
                  in: "query"
                  description: "Do not delete untagged parent images"
                  type: "boolean"
                  default: false
            tags: ["Image"]
    /images/search:
        get:
            summary: "Search images"
            description: "Search for an image on Docker Hub."
            operationId: "ImageSearch"
            produces:
                - "application/json"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "array"
                        items:
                            type: "object"
                            title: "ImageSearchResponseItem"
                            properties:
                                description:
                                    type: "string"
                                is_official:
                                    type: "boolean"
                                is_automated:
                                    description: |
                                        Whether this repository has automated builds enabled.

                                        <p><br /></p>

                                        > **Deprecated**: This field is deprecated and will always be "false".
                                    type: "boolean"
                                    example: false
                                name:
                                    type: "string"
                                star_count:
                                    type: "integer"
                    examples:
                        application/json:
                            - description: "A minimal Docker image based on Alpine Linux with a complete package index and only 5 MB in size!"
                              is_official: true
                              is_automated: false
                              name: "alpine"
                              star_count: 10093
                            - description: "Busybox base image."
                              is_official: true
                              is_automated: false
                              name: "Busybox base image."
                              star_count: 3037
                            - description: "The PostgreSQL object-relational database system provides reliability and data integrity."
                              is_official: true
                              is_automated: false
                              name: "postgres"
                              star_count: 12408
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "term"
                  in: "query"
                  description: "Term to search"
                  type: "string"
                  required: true
                - name: "limit"
                  in: "query"
                  description: "Maximum number of results to return"
                  type: "integer"
                - name: "filters"
                  in: "query"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:

                      - `is-official=(true|false)`
                      - `stars=<number>` Matches images that has at least 'number' stars.
                  type: "string"
            tags: ["Image"]
    /images/prune:
        post:
            summary: "Delete unused images"
            produces:
                - "application/json"
            operationId: "ImagePrune"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      Filters to process on the prune list, encoded as JSON (a `map[string][]string`). Available filters:

                      - `dangling=<boolean>` When set to `true` (or `1`), prune only
                         unused *and* untagged images. When set to `false`
                         (or `0`), all unused images are pruned.
                      - `until=<string>` Prune images created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                      - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune images with (or without, in case `label!=...` is used) the specified labels.
                  type: "string"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "ImagePruneResponse"
                        properties:
                            ImagesDeleted:
                                description: "Images that were deleted"
                                type: "array"
                                items:
                                    $ref: "#/definitions/ImageDeleteResponseItem"
                            SpaceReclaimed:
                                description: "Disk space reclaimed in bytes"
                                type: "integer"
                                format: "int64"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Image"]
    /auth:
        post:
            summary: "Check auth configuration"
            description: |
                Validate credentials for a registry and, if available, get an identity
                token for accessing the registry without password.
            operationId: "SystemAuth"
            consumes: ["application/json"]
            produces: ["application/json"]
            responses:
                200:
                    description: "An identity token was generated successfully."
                    schema:
                        type: "object"
                        title: "SystemAuthResponse"
                        required: [Status]
                        properties:
                            Status:
                                description: "The status of the authentication"
                                type: "string"
                                x-nullable: false
                            IdentityToken:
                                description: "An opaque token used to authenticate a user after a successful login"
                                type: "string"
                                x-nullable: false
                    examples:
                        application/json:
                            Status: "Login Succeeded"
                            IdentityToken: "9cbaf023786cd7..."
                204:
                    description: "No error"
                401:
                    description: "Auth error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "authConfig"
                  in: "body"
                  description: "Authentication to check"
                  schema:
                      $ref: "#/definitions/AuthConfig"
            tags: ["System"]
    /info:
        get:
            summary: "Get system information"
            operationId: "SystemInfo"
            produces:
                - "application/json"
            responses:
                200:
                    description: "No error"
                    schema:
                        $ref: "#/definitions/SystemInfo"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["System"]
    /version:
        get:
            summary: "Get version"
            description: "Returns the version of Docker that is running and various information about the system that Docker is running on."
            operationId: "SystemVersion"
            produces: ["application/json"]
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/SystemVersion"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["System"]
    /_ping:
        get:
            summary: "Ping"
            description: "This is a dummy endpoint you can use to test if the server is accessible."
            operationId: "SystemPing"
            produces: ["text/plain"]
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "string"
                        example: "OK"
                    headers:
                        API-Version:
                            type: "string"
                            description: "Max API Version the server supports"
                        Builder-Version:
                            type: "string"
                            description: |
                                Default version of docker image builder

                                The default on Linux is version "2" (BuildKit), but the daemon
                                can be configured to recommend version "1" (classic Builder).
                                Windows does not yet support BuildKit for native Windows images,
                                and uses "1" (classic builder) as a default.

                                This value is a recommendation as advertised by the daemon, and
                                it is up to the client to choose which builder to use.
                            default: "2"
                        Docker-Experimental:
                            type: "boolean"
                            description: "If the server is running with experimental mode enabled"
                        Swarm:
                            type: "string"
                            enum: ["inactive", "pending", "error", "locked", "active/worker", "active/manager"]
                            description: |
                                Contains information about Swarm status of the daemon,
                                and if the daemon is acting as a manager or worker node.
                            default: "inactive"
                        Cache-Control:
                            type: "string"
                            default: "no-cache, no-store, must-revalidate"
                        Pragma:
                            type: "string"
                            default: "no-cache"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    headers:
                        Cache-Control:
                            type: "string"
                            default: "no-cache, no-store, must-revalidate"
                        Pragma:
                            type: "string"
                            default: "no-cache"
            tags: ["System"]
        head:
            summary: "Ping"
            description: "This is a dummy endpoint you can use to test if the server is accessible."
            operationId: "SystemPingHead"
            produces: ["text/plain"]
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "string"
                        example: "(empty)"
                    headers:
                        API-Version:
                            type: "string"
                            description: "Max API Version the server supports"
                        Builder-Version:
                            type: "string"
                            description: "Default version of docker image builder"
                        Docker-Experimental:
                            type: "boolean"
                            description: "If the server is running with experimental mode enabled"
                        Swarm:
                            type: "string"
                            enum: ["inactive", "pending", "error", "locked", "active/worker", "active/manager"]
                            description: |
                                Contains information about Swarm status of the daemon,
                                and if the daemon is acting as a manager or worker node.
                            default: "inactive"
                        Cache-Control:
                            type: "string"
                            default: "no-cache, no-store, must-revalidate"
                        Pragma:
                            type: "string"
                            default: "no-cache"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["System"]
    /commit:
        post:
            summary: "Create a new image from a container"
            operationId: "ImageCommit"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                201:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/IdResponse"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "containerConfig"
                  in: "body"
                  description: "The container configuration"
                  schema:
                      $ref: "#/definitions/ContainerConfig"
                - name: "container"
                  in: "query"
                  description: "The ID or name of the container to commit"
                  type: "string"
                - name: "repo"
                  in: "query"
                  description: "Repository name for the created image"
                  type: "string"
                - name: "tag"
                  in: "query"
                  description: "Tag name for the create image"
                  type: "string"
                - name: "comment"
                  in: "query"
                  description: "Commit message"
                  type: "string"
                - name: "author"
                  in: "query"
                  description: "Author of the image (e.g., `John Hannibal Smith <hannibal@a-team.com>`)"
                  type: "string"
                - name: "pause"
                  in: "query"
                  description: "Whether to pause the container before committing"
                  type: "boolean"
                  default: true
                - name: "changes"
                  in: "query"
                  description: "`Dockerfile` instructions to apply while committing"
                  type: "string"
            tags: ["Image"]
    /events:
        get:
            summary: "Monitor events"
            description: |
                Stream real-time events from the server.

                Various objects within Docker report events when something happens to them.

                Containers report these events: `attach`, `commit`, `copy`, `create`, `destroy`, `detach`, `die`, `exec_create`, `exec_detach`, `exec_start`, `exec_die`, `export`, `health_status`, `kill`, `oom`, `pause`, `rename`, `resize`, `restart`, `start`, `stop`, `top`, `unpause`, `update`, and `prune`

                Images report these events: `delete`, `import`, `load`, `pull`, `push`, `save`, `tag`, `untag`, and `prune`

                Volumes report these events: `create`, `mount`, `unmount`, `destroy`, and `prune`

                Networks report these events: `create`, `connect`, `disconnect`, `destroy`, `update`, `remove`, and `prune`

                The Docker daemon reports these events: `reload`

                Services report these events: `create`, `update`, and `remove`

                Nodes report these events: `create`, `update`, and `remove`

                Secrets report these events: `create`, `update`, and `remove`

                Configs report these events: `create`, `update`, and `remove`

                The Builder reports `prune` events

            operationId: "SystemEvents"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/EventMessage"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "since"
                  in: "query"
                  description: "Show events created since this timestamp then stream new events."
                  type: "string"
                - name: "until"
                  in: "query"
                  description: "Show events created until this timestamp then stop streaming."
                  type: "string"
                - name: "filters"
                  in: "query"
                  description: |
                      A JSON encoded value of filters (a `map[string][]string`) to process on the event list. Available filters:

                      - `config=<string>` config name or ID
                      - `container=<string>` container name or ID
                      - `daemon=<string>` daemon name or ID
                      - `event=<string>` event type
                      - `image=<string>` image name or ID
                      - `label=<string>` image or container label
                      - `network=<string>` network name or ID
                      - `node=<string>` node ID
                      - `plugin`=<string> plugin name or ID
                      - `scope`=<string> local or swarm
                      - `secret=<string>` secret name or ID
                      - `service=<string>` service name or ID
                      - `type=<string>` object to filter by, one of `container`, `image`, `volume`, `network`, `daemon`, `plugin`, `node`, `service`, `secret` or `config`
                      - `volume=<string>` volume name
                  type: "string"
            tags: ["System"]
    /system/df:
        get:
            summary: "Get data usage information"
            operationId: "SystemDataUsage"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "object"
                        title: "SystemDataUsageResponse"
                        properties:
                            LayersSize:
                                type: "integer"
                                format: "int64"
                            Images:
                                type: "array"
                                items:
                                    $ref: "#/definitions/ImageSummary"
                            Containers:
                                type: "array"
                                items:
                                    $ref: "#/definitions/ContainerSummary"
                            Volumes:
                                type: "array"
                                items:
                                    $ref: "#/definitions/Volume"
                            BuildCache:
                                type: "array"
                                items:
                                    $ref: "#/definitions/BuildCache"
                        example:
                            LayersSize: 1092588
                            Images:
                                - Id: "sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749"
                                  ParentId: ""
                                  RepoTags:
                                      - "busybox:latest"
                                  RepoDigests:
                                      - "busybox@sha256:a59906e33509d14c036c8678d687bd4eec81ed7c4b8ce907b888c607f6a1e0e6"
                                  Created: 1466724217
                                  Size: 1092588
                                  SharedSize: 0
                                  Labels: {}
                                  Containers: 1
                            Containers:
                                - Id: "e575172ed11dc01bfce087fb27bee502db149e1a0fad7c296ad300bbff178148"
                                  Names:
                                      - "/top"
                                  Image: "busybox"
                                  ImageID: "sha256:2b8fd9751c4c0f5dd266fcae00707e67a2545ef34f9a29354585f93dac906749"
                                  Command: "top"
                                  Created: 1472592424
                                  Ports: []
                                  SizeRootFs: 1092588
                                  Labels: {}
                                  State: "exited"
                                  Status: "Exited (0) 56 minutes ago"
                                  HostConfig:
                                      NetworkMode: "default"
                                  NetworkSettings:
                                      Networks:
                                          bridge:
                                              IPAMConfig: null
                                              Links: null
                                              Aliases: null
                                              NetworkID: "d687bc59335f0e5c9ee8193e5612e8aee000c8c62ea170cfb99c098f95899d92"
                                              EndpointID: "8ed5115aeaad9abb174f68dcf135b49f11daf597678315231a32ca28441dec6a"
                                              Gateway: "172.18.0.1"
                                              IPAddress: "172.18.0.2"
                                              IPPrefixLen: 16
                                              IPv6Gateway: ""
                                              GlobalIPv6Address: ""
                                              GlobalIPv6PrefixLen: 0
                                              MacAddress: "02:42:ac:12:00:02"
                                  Mounts: []
                            Volumes:
                                - Name: "my-volume"
                                  Driver: "local"
                                  Mountpoint: "/var/lib/docker/volumes/my-volume/_data"
                                  Labels: null
                                  Scope: "local"
                                  Options: null
                                  UsageData:
                                      Size: 10920104
                                      RefCount: 2
                            BuildCache:
                                - ID: "hw53o5aio51xtltp5xjp8v7fx"
                                  Parents: []
                                  Type: "regular"
                                  Description: "pulled from docker.io/library/debian@sha256:234cb88d3020898631af0ccbbcca9a66ae7306ecd30c9720690858c1b007d2a0"
                                  InUse: false
                                  Shared: true
                                  Size: 0
                                  CreatedAt: "2021-06-28T13:31:01.474619385Z"
                                  LastUsedAt: "2021-07-07T22:02:32.738075951Z"
                                  UsageCount: 26
                                - ID: "ndlpt0hhvkqcdfkputsk4cq9c"
                                  Parents: ["ndlpt0hhvkqcdfkputsk4cq9c"]
                                  Type: "regular"
                                  Description: 'mount / from exec /bin/sh -c echo ''Binary::apt::APT::Keep-Downloaded-Packages "true";'' > /etc/apt/apt.conf.d/keep-cache'
                                  InUse: false
                                  Shared: true
                                  Size: 51
                                  CreatedAt: "2021-06-28T13:31:03.002625487Z"
                                  LastUsedAt: "2021-07-07T22:02:32.773909517Z"
                                  UsageCount: 26
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "type"
                  in: "query"
                  description: |
                      Object types, for which to compute and return data.
                  type: "array"
                  collectionFormat: multi
                  items:
                      type: "string"
                      enum: ["container", "image", "volume", "build-cache"]
            tags: ["System"]
    /images/{name}/get:
        get:
            summary: "Export an image"
            description: |
                Get a tarball containing all images and metadata for a repository.

                If `name` is a specific name and tag (e.g. `ubuntu:latest`), then only that image (and its parents) are returned. If `name` is an image ID, similarly only that image (and its parents) are returned, but with the exclusion of the `repositories` file in the tarball, as there were no image names referenced.

                ### Image tarball format

                An image tarball contains one directory per image layer (named using its long ID), each containing these files:

                - `VERSION`: currently `1.0` - the file format version
                - `json`: detailed layer information, similar to `docker inspect layer_id`
                - `layer.tar`: A tarfile containing the filesystem changes in this layer

                The `layer.tar` file contains `aufs` style `.wh..wh.aufs` files and directories for storing attribute changes and deletions.

                If the tarball defines a repository, the tarball should also include a `repositories` file at the root that contains a list of repository and tag names mapped to layer IDs.

                ```json
                {
                  "hello-world": {
                    "latest": "565a9d68a73f6706862bfe8409a7f659776d4d60a8d096eb4a3cbce6999cc2a1"
                  }
                }
                ```
            operationId: "ImageGet"
            produces:
                - "application/x-tar"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "string"
                        format: "binary"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or ID"
                  type: "string"
                  required: true
            tags: ["Image"]
    /images/get:
        get:
            summary: "Export several images"
            description: |
                Get a tarball containing all images and metadata for several image
                repositories.

                For each value of the `names` parameter: if it is a specific name and
                tag (e.g. `ubuntu:latest`), then only that image (and its parents) are
                returned; if it is an image ID, similarly only that image (and its parents)
                are returned and there would be no names referenced in the 'repositories'
                file for this image ID.

                For details on the format, see the [export image endpoint](#operation/ImageGet).
            operationId: "ImageGetAll"
            produces:
                - "application/x-tar"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "string"
                        format: "binary"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "names"
                  in: "query"
                  description: "Image names to filter by"
                  type: "array"
                  items:
                      type: "string"
            tags: ["Image"]
    /images/load:
        post:
            summary: "Import images"
            description: |
                Load a set of images and tags into a repository.

                For details on the format, see the [export image endpoint](#operation/ImageGet).
            operationId: "ImageLoad"
            consumes:
                - "application/x-tar"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "imagesTarball"
                  in: "body"
                  description: "Tar archive containing images"
                  schema:
                      type: "string"
                      format: "binary"
                - name: "quiet"
                  in: "query"
                  description: "Suppress progress details during load."
                  type: "boolean"
                  default: false
            tags: ["Image"]
    /containers/{id}/exec:
        post:
            summary: "Create an exec instance"
            description: "Run a command inside a running container."
            operationId: "ContainerExec"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                201:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/IdResponse"
                404:
                    description: "no such container"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such container: c2ada9df5af8"
                409:
                    description: "container is paused"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "execConfig"
                  in: "body"
                  description: "Exec configuration"
                  schema:
                      type: "object"
                      title: "ExecConfig"
                      properties:
                          AttachStdin:
                              type: "boolean"
                              description: "Attach to `stdin` of the exec command."
                          AttachStdout:
                              type: "boolean"
                              description: "Attach to `stdout` of the exec command."
                          AttachStderr:
                              type: "boolean"
                              description: "Attach to `stderr` of the exec command."
                          ConsoleSize:
                              type: "array"
                              description: "Initial console size, as an `[height, width]` array."
                              x-nullable: true
                              minItems: 2
                              maxItems: 2
                              items:
                                  type: "integer"
                                  minimum: 0
                          DetachKeys:
                              type: "string"
                              description: |
                                  Override the key sequence for detaching a container. Format is
                                  a single character `[a-Z]` or `ctrl-<value>` where `<value>`
                                  is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.
                          Tty:
                              type: "boolean"
                              description: "Allocate a pseudo-TTY."
                          Env:
                              description: |
                                  A list of environment variables in the form `["VAR=value", ...]`.
                              type: "array"
                              items:
                                  type: "string"
                          Cmd:
                              type: "array"
                              description: "Command to run, as a string or array of strings."
                              items:
                                  type: "string"
                          Privileged:
                              type: "boolean"
                              description: "Runs the exec process with extended privileges."
                              default: false
                          User:
                              type: "string"
                              description: |
                                  The user, and optionally, group to run the exec process inside
                                  the container. Format is one of: `user`, `user:group`, `uid`,
                                  or `uid:gid`.
                          WorkingDir:
                              type: "string"
                              description: |
                                  The working directory for the exec process inside the container.
                      example:
                          AttachStdin: false
                          AttachStdout: true
                          AttachStderr: true
                          DetachKeys: "ctrl-p,ctrl-q"
                          Tty: false
                          Cmd:
                              - "date"
                          Env:
                              - "FOO=bar"
                              - "BAZ=quux"
                  required: true
                - name: "id"
                  in: "path"
                  description: "ID or name of container"
                  type: "string"
                  required: true
            tags: ["Exec"]
    /exec/{id}/start:
        post:
            summary: "Start an exec instance"
            description: |
                Starts a previously set up exec instance. If detach is true, this endpoint
                returns immediately after starting the command. Otherwise, it sets up an
                interactive session with the command.
            operationId: "ExecStart"
            consumes:
                - "application/json"
            produces:
                - "application/vnd.docker.raw-stream"
                - "application/vnd.docker.multiplexed-stream"
            responses:
                200:
                    description: "No error"
                404:
                    description: "No such exec instance"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                409:
                    description: "Container is stopped or paused"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "execStartConfig"
                  in: "body"
                  schema:
                      type: "object"
                      title: "ExecStartConfig"
                      properties:
                          Detach:
                              type: "boolean"
                              description: "Detach from the command."
                          Tty:
                              type: "boolean"
                              description: "Allocate a pseudo-TTY."
                          ConsoleSize:
                              type: "array"
                              description: "Initial console size, as an `[height, width]` array."
                              x-nullable: true
                              minItems: 2
                              maxItems: 2
                              items:
                                  type: "integer"
                                  minimum: 0
                      example:
                          Detach: false
                          Tty: true
                          ConsoleSize: [80, 64]
                - name: "id"
                  in: "path"
                  description: "Exec instance ID"
                  required: true
                  type: "string"
            tags: ["Exec"]
    /exec/{id}/resize:
        post:
            summary: "Resize an exec instance"
            description: |
                Resize the TTY session used by an exec instance. This endpoint only works
                if `tty` was specified as part of creating and starting the exec instance.
            operationId: "ExecResize"
            responses:
                200:
                    description: "No error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "No such exec instance"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "Exec instance ID"
                  required: true
                  type: "string"
                - name: "h"
                  in: "query"
                  description: "Height of the TTY session in characters"
                  type: "integer"
                - name: "w"
                  in: "query"
                  description: "Width of the TTY session in characters"
                  type: "integer"
            tags: ["Exec"]
    /exec/{id}/json:
        get:
            summary: "Inspect an exec instance"
            description: "Return low-level information about an exec instance."
            operationId: "ExecInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "ExecInspectResponse"
                        properties:
                            CanRemove:
                                type: "boolean"
                            DetachKeys:
                                type: "string"
                            ID:
                                type: "string"
                            Running:
                                type: "boolean"
                            ExitCode:
                                type: "integer"
                            ProcessConfig:
                                $ref: "#/definitions/ProcessConfig"
                            OpenStdin:
                                type: "boolean"
                            OpenStderr:
                                type: "boolean"
                            OpenStdout:
                                type: "boolean"
                            ContainerID:
                                type: "string"
                            Pid:
                                type: "integer"
                                description: "The system process ID for the exec process."
                    examples:
                        application/json:
                            CanRemove: false
                            ContainerID: "b53ee82b53a40c7dca428523e34f741f3abc51d9f297a14ff874bf761b995126"
                            DetachKeys: ""
                            ExitCode: 2
                            ID: "f33bbfb39f5b142420f4759b2348913bd4a8d1a6d7fd56499cb41a1bb91d7b3b"
                            OpenStderr: true
                            OpenStdin: true
                            OpenStdout: true
                            ProcessConfig:
                                arguments:
                                    - "-c"
                                    - "exit 2"
                                entrypoint: "sh"
                                privileged: false
                                tty: true
                                user: "1000"
                            Running: false
                            Pid: 42000
                404:
                    description: "No such exec instance"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "Exec instance ID"
                  required: true
                  type: "string"
            tags: ["Exec"]

    /volumes:
        get:
            summary: "List volumes"
            operationId: "VolumeList"
            produces: ["application/json"]
            responses:
                200:
                    description: "Summary volume data that matches the query"
                    schema:
                        $ref: "#/definitions/VolumeListResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      JSON encoded value of the filters (a `map[string][]string`) to
                      process on the volumes list. Available filters:

                      - `dangling=<boolean>` When set to `true` (or `1`), returns all
                         volumes that are not in use by a container. When set to `false`
                         (or `0`), only volumes that are in use by one or more
                         containers are returned.
                      - `driver=<volume-driver-name>` Matches volumes based on their driver.
                      - `label=<key>` or `label=<key>:<value>` Matches volumes based on
                         the presence of a `label` alone or a `label` and a value.
                      - `name=<volume-name>` Matches all or part of a volume name.
                  type: "string"
                  format: "json"
            tags: ["Volume"]

    /volumes/create:
        post:
            summary: "Create a volume"
            operationId: "VolumeCreate"
            consumes: ["application/json"]
            produces: ["application/json"]
            responses:
                201:
                    description: "The volume was created successfully"
                    schema:
                        $ref: "#/definitions/Volume"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "volumeConfig"
                  in: "body"
                  required: true
                  description: "Volume configuration"
                  schema:
                      $ref: "#/definitions/VolumeCreateOptions"
            tags: ["Volume"]

    /volumes/{name}:
        get:
            summary: "Inspect a volume"
            operationId: "VolumeInspect"
            produces: ["application/json"]
            responses:
                200:
                    description: "No error"
                    schema:
                        $ref: "#/definitions/Volume"
                404:
                    description: "No such volume"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  required: true
                  description: "Volume name or ID"
                  type: "string"
            tags: ["Volume"]

        put:
            summary: |
                "Update a volume. Valid only for Swarm cluster volumes"
            operationId: "VolumeUpdate"
            consumes: ["application/json"]
            produces: ["application/json"]
            responses:
                200:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such volume"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "The name or ID of the volume"
                  type: "string"
                  required: true
                - name: "body"
                  in: "body"
                  schema:
                      # though the schema for is an object that contains only a
                      # ClusterVolumeSpec, wrapping the ClusterVolumeSpec in this object
                      # means that if, later on, we support things like changing the
                      # labels, we can do so without duplicating that information to the
                      # ClusterVolumeSpec.
                      type: "object"
                      description: "Volume configuration"
                      properties:
                          Spec:
                              $ref: "#/definitions/ClusterVolumeSpec"
                  description: |
                      The spec of the volume to update. Currently, only Availability may
                      change. All other fields must remain unchanged.
                - name: "version"
                  in: "query"
                  description: |
                      The version number of the volume being updated. This is required to
                      avoid conflicting writes. Found in the volume's `ClusterVolume`
                      field.
                  type: "integer"
                  format: "int64"
                  required: true
            tags: ["Volume"]

        delete:
            summary: "Remove a volume"
            description: "Instruct the driver to remove the volume."
            operationId: "VolumeDelete"
            responses:
                204:
                    description: "The volume was removed"
                404:
                    description: "No such volume or volume driver"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                409:
                    description: "Volume is in use and cannot be removed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  required: true
                  description: "Volume name or ID"
                  type: "string"
                - name: "force"
                  in: "query"
                  description: "Force the removal of the volume"
                  type: "boolean"
                  default: false
            tags: ["Volume"]

    /volumes/prune:
        post:
            summary: "Delete unused volumes"
            produces:
                - "application/json"
            operationId: "VolumePrune"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

                      Available filters:
                      - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune volumes with (or without, in case `label!=...` is used) the specified labels.
                      - `all` (`all=true`) - Consider all (local) volumes for pruning and not just anonymous volumes.
                  type: "string"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "VolumePruneResponse"
                        properties:
                            VolumesDeleted:
                                description: "Volumes that were deleted"
                                type: "array"
                                items:
                                    type: "string"
                            SpaceReclaimed:
                                description: "Disk space reclaimed in bytes"
                                type: "integer"
                                format: "int64"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Volume"]
    /networks:
        get:
            summary: "List networks"
            description: |
                Returns a list of networks. For details on the format, see the
                [network inspect endpoint](#operation/NetworkInspect).

                Note that it uses a different, smaller representation of a network than
                inspecting a single network. For example, the list of containers attached
                to the network is not propagated in API versions 1.28 and up.
            operationId: "NetworkList"
            produces:
                - "application/json"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Network"
                    examples:
                        application/json:
                            - Name: "bridge"
                              Id: "f2de39df4171b0dc801e8002d1d999b77256983dfc63041c0f34030aa3977566"
                              Created: "2016-10-19T06:21:00.416543526Z"
                              Scope: "local"
                              Driver: "bridge"
                              EnableIPv6: false
                              Internal: false
                              Attachable: false
                              Ingress: false
                              IPAM:
                                  Driver: "default"
                                  Config:
                                      - Subnet: "172.17.0.0/16"
                              Options:
                                  com.docker.network.bridge.default_bridge: "true"
                                  com.docker.network.bridge.enable_icc: "true"
                                  com.docker.network.bridge.enable_ip_masquerade: "true"
                                  com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
                                  com.docker.network.bridge.name: "docker0"
                                  com.docker.network.driver.mtu: "1500"
                            - Name: "none"
                              Id: "e086a3893b05ab69242d3c44e49483a3bbbd3a26b46baa8f61ab797c1088d794"
                              Created: "0001-01-01T00:00:00Z"
                              Scope: "local"
                              Driver: "null"
                              EnableIPv6: false
                              Internal: false
                              Attachable: false
                              Ingress: false
                              IPAM:
                                  Driver: "default"
                                  Config: []
                              Containers: {}
                              Options: {}
                            - Name: "host"
                              Id: "13e871235c677f196c4e1ecebb9dc733b9b2d2ab589e30c539efeda84a24215e"
                              Created: "0001-01-01T00:00:00Z"
                              Scope: "local"
                              Driver: "host"
                              EnableIPv6: false
                              Internal: false
                              Attachable: false
                              Ingress: false
                              IPAM:
                                  Driver: "default"
                                  Config: []
                              Containers: {}
                              Options: {}
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      JSON encoded value of the filters (a `map[string][]string`) to process
                      on the networks list.

                      Available filters:

                      - `dangling=<boolean>` When set to `true` (or `1`), returns all
                         networks that are not in use by a container. When set to `false`
                         (or `0`), only networks that are in use by one or more
                         containers are returned.
                      - `driver=<driver-name>` Matches a network's driver.
                      - `id=<network-id>` Matches all or part of a network ID.
                      - `label=<key>` or `label=<key>=<value>` of a network label.
                      - `name=<network-name>` Matches all or part of a network name.
                      - `scope=["swarm"|"global"|"local"]` Filters networks by scope (`swarm`, `global`, or `local`).
                      - `type=["custom"|"builtin"]` Filters networks by type. The `custom` keyword returns all user-defined networks.
                  type: "string"
            tags: ["Network"]

    /networks/{id}:
        get:
            summary: "Inspect a network"
            operationId: "NetworkInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "No error"
                    schema:
                        $ref: "#/definitions/Network"
                404:
                    description: "Network not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "Network ID or name"
                  required: true
                  type: "string"
                - name: "verbose"
                  in: "query"
                  description: "Detailed inspect output for troubleshooting"
                  type: "boolean"
                  default: false
                - name: "scope"
                  in: "query"
                  description: "Filter the network by scope (swarm, global, or local)"
                  type: "string"
            tags: ["Network"]

        delete:
            summary: "Remove a network"
            operationId: "NetworkDelete"
            responses:
                204:
                    description: "No error"
                403:
                    description: "operation not supported for pre-defined networks"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such network"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "Network ID or name"
                  required: true
                  type: "string"
            tags: ["Network"]

    /networks/create:
        post:
            summary: "Create a network"
            operationId: "NetworkCreate"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                201:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "NetworkCreateResponse"
                        properties:
                            Id:
                                description: "The ID of the created network."
                                type: "string"
                            Warning:
                                type: "string"
                        example:
                            Id: "22be93d5babb089c5aab8dbc369042fad48ff791584ca2da2100db837a1c7c30"
                            Warning: ""
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                403:
                    description: |
                        Forbidden operation. This happens when trying to create a network named after a pre-defined network,
                        or when trying to create an overlay network on a daemon which is not part of a Swarm cluster.
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "plugin not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "networkConfig"
                  in: "body"
                  description: "Network configuration"
                  required: true
                  schema:
                      type: "object"
                      title: "NetworkCreateRequest"
                      required: ["Name"]
                      properties:
                          Name:
                              description: "The network's name."
                              type: "string"
                          CheckDuplicate:
                              description: |
                                  Deprecated: CheckDuplicate is now always enabled.
                              type: "boolean"
                          Driver:
                              description: "Name of the network driver plugin to use."
                              type: "string"
                              default: "bridge"
                          Internal:
                              description: "Restrict external access to the network."
                              type: "boolean"
                          Attachable:
                              description: |
                                  Globally scoped network is manually attachable by regular
                                  containers from workers in swarm mode.
                              type: "boolean"
                          Ingress:
                              description: |
                                  Ingress network is the network which provides the routing-mesh
                                  in swarm mode.
                              type: "boolean"
                          IPAM:
                              description: "Optional custom IP scheme for the network."
                              $ref: "#/definitions/IPAM"
                          EnableIPv6:
                              description: "Enable IPv6 on the network."
                              type: "boolean"
                          Options:
                              description: "Network specific options to be used by the drivers."
                              type: "object"
                              additionalProperties:
                                  type: "string"
                          Labels:
                              description: "User-defined key/value metadata."
                              type: "object"
                              additionalProperties:
                                  type: "string"
                      example:
                          Name: "isolated_nw"
                          CheckDuplicate: false
                          Driver: "bridge"
                          EnableIPv6: true
                          IPAM:
                              Driver: "default"
                              Config:
                                  - Subnet: "172.20.0.0/16"
                                    IPRange: "172.20.10.0/24"
                                    Gateway: "172.20.10.11"
                                  - Subnet: "2001:db8:abcd::/64"
                                    Gateway: "2001:db8:abcd::1011"
                              Options:
                                  foo: "bar"
                          Internal: true
                          Attachable: false
                          Ingress: false
                          Options:
                              com.docker.network.bridge.default_bridge: "true"
                              com.docker.network.bridge.enable_icc: "true"
                              com.docker.network.bridge.enable_ip_masquerade: "true"
                              com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
                              com.docker.network.bridge.name: "docker0"
                              com.docker.network.driver.mtu: "1500"
                          Labels:
                              com.example.some-label: "some-value"
                              com.example.some-other-label: "some-other-value"
            tags: ["Network"]

    /networks/{id}/connect:
        post:
            summary: "Connect a container to a network"
            description: "The network must be either a local-scoped network or a swarm-scoped network with the `attachable` option set. A network cannot be re-attached to a running container"
            operationId: "NetworkConnect"
            consumes:
                - "application/json"
            responses:
                200:
                    description: "No error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                403:
                    description: "Operation forbidden"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "Network or container not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "Network ID or name"
                  required: true
                  type: "string"
                - name: "container"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      title: "NetworkConnectRequest"
                      properties:
                          Container:
                              type: "string"
                              description: "The ID or name of the container to connect to the network."
                          EndpointConfig:
                              $ref: "#/definitions/EndpointSettings"
                      example:
                          Container: "3613f73ba0e4"
                          EndpointConfig:
                              IPAMConfig:
                                  IPv4Address: "172.24.56.89"
                                  IPv6Address: "2001:db8::5689"
                              MacAddress: "02:42:ac:12:05:02"
            tags: ["Network"]

    /networks/{id}/disconnect:
        post:
            summary: "Disconnect a container from a network"
            operationId: "NetworkDisconnect"
            consumes:
                - "application/json"
            responses:
                200:
                    description: "No error"
                403:
                    description: "Operation not supported for swarm scoped networks"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "Network or container not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "Network ID or name"
                  required: true
                  type: "string"
                - name: "container"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      title: "NetworkDisconnectRequest"
                      properties:
                          Container:
                              type: "string"
                              description: |
                                  The ID or name of the container to disconnect from the network.
                          Force:
                              type: "boolean"
                              description: |
                                  Force the container to disconnect from the network.
            tags: ["Network"]
    /networks/prune:
        post:
            summary: "Delete unused networks"
            produces:
                - "application/json"
            operationId: "NetworkPrune"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      Filters to process on the prune list, encoded as JSON (a `map[string][]string`).

                      Available filters:
                      - `until=<timestamp>` Prune networks created before this timestamp. The `<timestamp>` can be Unix timestamps, date formatted timestamps, or Go duration strings (e.g. `10m`, `1h30m`) computed relative to the daemon machine’s time.
                      - `label` (`label=<key>`, `label=<key>=<value>`, `label!=<key>`, or `label!=<key>=<value>`) Prune networks with (or without, in case `label!=...` is used) the specified labels.
                  type: "string"
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "object"
                        title: "NetworkPruneResponse"
                        properties:
                            NetworksDeleted:
                                description: "Networks that were deleted"
                                type: "array"
                                items:
                                    type: "string"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Network"]
    /plugins:
        get:
            summary: "List plugins"
            operationId: "PluginList"
            description: "Returns information about installed plugins."
            produces: ["application/json"]
            responses:
                200:
                    description: "No error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Plugin"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  type: "string"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the plugin list.

                      Available filters:

                      - `capability=<capability name>`
                      - `enable=<true>|<false>`
            tags: ["Plugin"]

    /plugins/privileges:
        get:
            summary: "Get plugin privileges"
            operationId: "GetPluginPrivileges"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/PluginPrivilege"
                        example:
                            - Name: "network"
                              Description: ""
                              Value:
                                  - "host"
                            - Name: "mount"
                              Description: ""
                              Value:
                                  - "/data"
                            - Name: "device"
                              Description: ""
                              Value:
                                  - "/dev/cpu_dma_latency"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "remote"
                  in: "query"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
            tags:
                - "Plugin"

    /plugins/pull:
        post:
            summary: "Install a plugin"
            operationId: "PluginPull"
            description: |
                Pulls and installs a plugin. After the plugin is installed, it can be
                enabled using the [`POST /plugins/{name}/enable` endpoint](#operation/PostPluginsEnable).
            produces:
                - "application/json"
            responses:
                204:
                    description: "no error"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "remote"
                  in: "query"
                  description: |
                      Remote reference for plugin to install.

                      The `:latest` tag is optional, and is used as the default if omitted.
                  required: true
                  type: "string"
                - name: "name"
                  in: "query"
                  description: |
                      Local name for the pulled plugin.

                      The `:latest` tag is optional, and is used as the default if omitted.
                  required: false
                  type: "string"
                - name: "X-Registry-Auth"
                  in: "header"
                  description: |
                      A base64url-encoded auth configuration to use when pulling a plugin
                      from a registry.

                      Refer to the [authentication section](#section/Authentication) for
                      details.
                  type: "string"
                - name: "body"
                  in: "body"
                  schema:
                      type: "array"
                      items:
                          $ref: "#/definitions/PluginPrivilege"
                      example:
                          - Name: "network"
                            Description: ""
                            Value:
                                - "host"
                          - Name: "mount"
                            Description: ""
                            Value:
                                - "/data"
                          - Name: "device"
                            Description: ""
                            Value:
                                - "/dev/cpu_dma_latency"
            tags: ["Plugin"]
    /plugins/{name}/json:
        get:
            summary: "Inspect a plugin"
            operationId: "PluginInspect"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Plugin"
                404:
                    description: "plugin is not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
            tags: ["Plugin"]
    /plugins/{name}:
        delete:
            summary: "Remove a plugin"
            operationId: "PluginDelete"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Plugin"
                404:
                    description: "plugin is not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
                - name: "force"
                  in: "query"
                  description: |
                      Disable the plugin before removing. This may result in issues if the
                      plugin is in use by a container.
                  type: "boolean"
                  default: false
            tags: ["Plugin"]
    /plugins/{name}/enable:
        post:
            summary: "Enable a plugin"
            operationId: "PluginEnable"
            responses:
                200:
                    description: "no error"
                404:
                    description: "plugin is not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
                - name: "timeout"
                  in: "query"
                  description: "Set the HTTP client timeout (in seconds)"
                  type: "integer"
                  default: 0
            tags: ["Plugin"]
    /plugins/{name}/disable:
        post:
            summary: "Disable a plugin"
            operationId: "PluginDisable"
            responses:
                200:
                    description: "no error"
                404:
                    description: "plugin is not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
                - name: "force"
                  in: "query"
                  description: |
                      Force disable a plugin even if still in use.
                  required: false
                  type: "boolean"
            tags: ["Plugin"]
    /plugins/{name}/upgrade:
        post:
            summary: "Upgrade a plugin"
            operationId: "PluginUpgrade"
            responses:
                204:
                    description: "no error"
                404:
                    description: "plugin not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
                - name: "remote"
                  in: "query"
                  description: |
                      Remote reference to upgrade to.

                      The `:latest` tag is optional, and is used as the default if omitted.
                  required: true
                  type: "string"
                - name: "X-Registry-Auth"
                  in: "header"
                  description: |
                      A base64url-encoded auth configuration to use when pulling a plugin
                      from a registry.

                      Refer to the [authentication section](#section/Authentication) for
                      details.
                  type: "string"
                - name: "body"
                  in: "body"
                  schema:
                      type: "array"
                      items:
                          $ref: "#/definitions/PluginPrivilege"
                      example:
                          - Name: "network"
                            Description: ""
                            Value:
                                - "host"
                          - Name: "mount"
                            Description: ""
                            Value:
                                - "/data"
                          - Name: "device"
                            Description: ""
                            Value:
                                - "/dev/cpu_dma_latency"
            tags: ["Plugin"]
    /plugins/create:
        post:
            summary: "Create a plugin"
            operationId: "PluginCreate"
            consumes:
                - "application/x-tar"
            responses:
                204:
                    description: "no error"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "query"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
                - name: "tarContext"
                  in: "body"
                  description: "Path to tar containing plugin rootfs and manifest"
                  schema:
                      type: "string"
                      format: "binary"
            tags: ["Plugin"]
    /plugins/{name}/push:
        post:
            summary: "Push a plugin"
            operationId: "PluginPush"
            description: |
                Push a plugin to the registry.
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
            responses:
                200:
                    description: "no error"
                404:
                    description: "plugin not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Plugin"]
    /plugins/{name}/set:
        post:
            summary: "Configure a plugin"
            operationId: "PluginSet"
            consumes:
                - "application/json"
            parameters:
                - name: "name"
                  in: "path"
                  description: |
                      The name of the plugin. The `:latest` tag is optional, and is the
                      default if omitted.
                  required: true
                  type: "string"
                - name: "body"
                  in: "body"
                  schema:
                      type: "array"
                      items:
                          type: "string"
                      example: ["DEBUG=1"]
            responses:
                204:
                    description: "No error"
                404:
                    description: "Plugin not installed"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Plugin"]
    /nodes:
        get:
            summary: "List nodes"
            operationId: "NodeList"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Node"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  description: |
                      Filters to process on the nodes list, encoded as JSON (a `map[string][]string`).

                      Available filters:
                      - `id=<node id>`
                      - `label=<engine label>`
                      - `membership=`(`accepted`|`pending`)`
                      - `name=<node name>`
                      - `node.label=<node label>`
                      - `role=`(`manager`|`worker`)`
                  type: "string"
            tags: ["Node"]
    /nodes/{id}:
        get:
            summary: "Inspect a node"
            operationId: "NodeInspect"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Node"
                404:
                    description: "no such node"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The ID or name of the node"
                  type: "string"
                  required: true
            tags: ["Node"]
        delete:
            summary: "Delete a node"
            operationId: "NodeDelete"
            responses:
                200:
                    description: "no error"
                404:
                    description: "no such node"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The ID or name of the node"
                  type: "string"
                  required: true
                - name: "force"
                  in: "query"
                  description: "Force remove a node from the swarm"
                  default: false
                  type: "boolean"
            tags: ["Node"]
    /nodes/{id}/update:
        post:
            summary: "Update a node"
            operationId: "NodeUpdate"
            responses:
                200:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such node"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The ID of the node"
                  type: "string"
                  required: true
                - name: "body"
                  in: "body"
                  schema:
                      $ref: "#/definitions/NodeSpec"
                - name: "version"
                  in: "query"
                  description: |
                      The version number of the node object being updated. This is required
                      to avoid conflicting writes.
                  type: "integer"
                  format: "int64"
                  required: true
            tags: ["Node"]
    /swarm:
        get:
            summary: "Inspect swarm"
            operationId: "SwarmInspect"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Swarm"
                404:
                    description: "no such swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Swarm"]
    /swarm/init:
        post:
            summary: "Initialize a new swarm"
            operationId: "SwarmInit"
            produces:
                - "application/json"
                - "text/plain"
            responses:
                200:
                    description: "no error"
                    schema:
                        description: "The node ID"
                        type: "string"
                        example: "7v2t30z9blmxuhnyo6s4cpenp"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is already part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      title: "SwarmInitRequest"
                      properties:
                          ListenAddr:
                              description: |
                                  Listen address used for inter-manager communication, as well
                                  as determining the networking interface used for the VXLAN
                                  Tunnel Endpoint (VTEP). This can either be an address/port
                                  combination in the form `192.168.1.1:4567`, or an interface
                                  followed by a port number, like `eth0:4567`. If the port number
                                  is omitted, the default swarm listening port is used.
                              type: "string"
                          AdvertiseAddr:
                              description: |
                                  Externally reachable address advertised to other nodes. This
                                  can either be an address/port combination in the form
                                  `192.168.1.1:4567`, or an interface followed by a port number,
                                  like `eth0:4567`. If the port number is omitted, the port
                                  number from the listen address is used. If `AdvertiseAddr` is
                                  not specified, it will be automatically detected when possible.
                              type: "string"
                          DataPathAddr:
                              description: |
                                  Address or interface to use for data path traffic (format:
                                  `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                                  like `eth0`. If `DataPathAddr` is unspecified, the same address
                                  as `AdvertiseAddr` is used.

                                  The `DataPathAddr` specifies the address that global scope
                                  network drivers will publish towards other  nodes in order to
                                  reach the containers running on this node. Using this parameter
                                  it is possible to separate the container data traffic from the
                                  management traffic of the cluster.
                              type: "string"
                          DataPathPort:
                              description: |
                                  DataPathPort specifies the data path port number for data traffic.
                                  Acceptable port range is 1024 to 49151.
                                  if no port is set or is set to 0, default port 4789 will be used.
                              type: "integer"
                              format: "uint32"
                          DefaultAddrPool:
                              description: |
                                  Default Address Pool specifies default subnet pools for global
                                  scope networks.
                              type: "array"
                              items:
                                  type: "string"
                                  example: ["10.10.0.0/16", "20.20.0.0/16"]
                          ForceNewCluster:
                              description: "Force creation of a new swarm."
                              type: "boolean"
                          SubnetSize:
                              description: |
                                  SubnetSize specifies the subnet size of the networks created
                                  from the default subnet pool.
                              type: "integer"
                              format: "uint32"
                          Spec:
                              $ref: "#/definitions/SwarmSpec"
                      example:
                          ListenAddr: "0.0.0.0:2377"
                          AdvertiseAddr: "192.168.1.1:2377"
                          DataPathPort: 4789
                          DefaultAddrPool: ["10.10.0.0/8", "20.20.0.0/8"]
                          SubnetSize: 24
                          ForceNewCluster: false
                          Spec:
                              Orchestration: {}
                              Raft: {}
                              Dispatcher: {}
                              CAConfig: {}
                              EncryptionConfig:
                                  AutoLockManagers: false
            tags: ["Swarm"]
    /swarm/join:
        post:
            summary: "Join an existing swarm"
            operationId: "SwarmJoin"
            responses:
                200:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is already part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      title: "SwarmJoinRequest"
                      properties:
                          ListenAddr:
                              description: |
                                  Listen address used for inter-manager communication if the node
                                  gets promoted to manager, as well as determining the networking
                                  interface used for the VXLAN Tunnel Endpoint (VTEP).
                              type: "string"
                          AdvertiseAddr:
                              description: |
                                  Externally reachable address advertised to other nodes. This
                                  can either be an address/port combination in the form
                                  `192.168.1.1:4567`, or an interface followed by a port number,
                                  like `eth0:4567`. If the port number is omitted, the port
                                  number from the listen address is used. If `AdvertiseAddr` is
                                  not specified, it will be automatically detected when possible.
                              type: "string"
                          DataPathAddr:
                              description: |
                                  Address or interface to use for data path traffic (format:
                                  `<ip|interface>`), for example,  `192.168.1.1`, or an interface,
                                  like `eth0`. If `DataPathAddr` is unspecified, the same address
                                  as `AdvertiseAddr` is used.

                                  The `DataPathAddr` specifies the address that global scope
                                  network drivers will publish towards other nodes in order to
                                  reach the containers running on this node. Using this parameter
                                  it is possible to separate the container data traffic from the
                                  management traffic of the cluster.

                              type: "string"
                          RemoteAddrs:
                              description: |
                                  Addresses of manager nodes already participating in the swarm.
                              type: "array"
                              items:
                                  type: "string"
                          JoinToken:
                              description: "Secret token for joining this swarm."
                              type: "string"
                      example:
                          ListenAddr: "0.0.0.0:2377"
                          AdvertiseAddr: "192.168.1.1:2377"
                          RemoteAddrs:
                              - "node1:2377"
                          JoinToken: "SWMTKN-1-3pu6hszjas19xyp7ghgosyx9k8atbfcr8p2is99znpy26u2lkl-7p73s1dx5in4tatdymyhg9hu2"
            tags: ["Swarm"]
    /swarm/leave:
        post:
            summary: "Leave a swarm"
            operationId: "SwarmLeave"
            responses:
                200:
                    description: "no error"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "force"
                  description: |
                      Force leave swarm, even if this is the last manager or that it will
                      break the cluster.
                  in: "query"
                  type: "boolean"
                  default: false
            tags: ["Swarm"]
    /swarm/update:
        post:
            summary: "Update a swarm"
            operationId: "SwarmUpdate"
            responses:
                200:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      $ref: "#/definitions/SwarmSpec"
                - name: "version"
                  in: "query"
                  description: |
                      The version number of the swarm object being updated. This is
                      required to avoid conflicting writes.
                  type: "integer"
                  format: "int64"
                  required: true
                - name: "rotateWorkerToken"
                  in: "query"
                  description: "Rotate the worker join token."
                  type: "boolean"
                  default: false
                - name: "rotateManagerToken"
                  in: "query"
                  description: "Rotate the manager join token."
                  type: "boolean"
                  default: false
                - name: "rotateManagerUnlockKey"
                  in: "query"
                  description: "Rotate the manager unlock key."
                  type: "boolean"
                  default: false
            tags: ["Swarm"]
    /swarm/unlockkey:
        get:
            summary: "Get the unlock key"
            operationId: "SwarmUnlockkey"
            consumes:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "object"
                        title: "UnlockKeyResponse"
                        properties:
                            UnlockKey:
                                description: "The swarm's unlock key."
                                type: "string"
                        example:
                            UnlockKey: "SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Swarm"]
    /swarm/unlock:
        post:
            summary: "Unlock a locked manager"
            operationId: "SwarmUnlock"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      type: "object"
                      title: "SwarmUnlockRequest"
                      properties:
                          UnlockKey:
                              description: "The swarm's unlock key."
                              type: "string"
                      example:
                          UnlockKey: "SWMKEY-1-7c37Cc8654o6p38HnroywCi19pllOnGtbdZEgtKxZu8"
            responses:
                200:
                    description: "no error"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Swarm"]
    /services:
        get:
            summary: "List services"
            operationId: "ServiceList"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Service"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  type: "string"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the services list.

                      Available filters:

                      - `id=<service id>`
                      - `label=<service label>`
                      - `mode=["replicated"|"global"]`
                      - `name=<service name>`
                - name: "status"
                  in: "query"
                  type: "boolean"
                  description: |
                      Include service status, with count of running and desired tasks.
            tags: ["Service"]
    /services/create:
        post:
            summary: "Create a service"
            operationId: "ServiceCreate"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                201:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/ServiceCreateResponse"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                403:
                    description: "network is not eligible for services"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                409:
                    description: "name conflicts with an existing service"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      allOf:
                          - $ref: "#/definitions/ServiceSpec"
                          - type: "object"
                            example:
                                Name: "web"
                                TaskTemplate:
                                    ContainerSpec:
                                        Image: "nginx:alpine"
                                        Mounts:
                                            - ReadOnly: true
                                              Source: "web-data"
                                              Target: "/usr/share/nginx/html"
                                              Type: "volume"
                                              VolumeOptions:
                                                  DriverConfig: {}
                                                  Labels:
                                                      com.example.something: "something-value"
                                        Hosts: ["10.10.10.10 host1", "ABCD:EF01:2345:6789:ABCD:EF01:2345:6789 host2"]
                                        User: "33"
                                        DNSConfig:
                                            Nameservers: ["8.8.8.8"]
                                            Search: ["example.org"]
                                            Options: ["timeout:3"]
                                        Secrets:
                                            - File:
                                                  Name: "www.example.org.key"
                                                  UID: "33"
                                                  GID: "33"
                                                  Mode: 384
                                              SecretID: "fpjqlhnwb19zds35k8wn80lq9"
                                              SecretName: "example_org_domain_key"
                                    LogDriver:
                                        Name: "json-file"
                                        Options:
                                            max-file: "3"
                                            max-size: "10M"
                                    Placement: {}
                                    Resources:
                                        Limits:
                                            MemoryBytes: 104857600
                                        Reservations: {}
                                    RestartPolicy:
                                        Condition: "on-failure"
                                        Delay: 10000000000
                                        MaxAttempts: 10
                                Mode:
                                    Replicated:
                                        Replicas: 4
                                UpdateConfig:
                                    Parallelism: 2
                                    Delay: 1000000000
                                    FailureAction: "pause"
                                    Monitor: 15000000000
                                    MaxFailureRatio: 0.15
                                RollbackConfig:
                                    Parallelism: 1
                                    Delay: 1000000000
                                    FailureAction: "pause"
                                    Monitor: 15000000000
                                    MaxFailureRatio: 0.15
                                EndpointSpec:
                                    Ports:
                                        - Protocol: "tcp"
                                          PublishedPort: 8080
                                          TargetPort: 80
                                Labels:
                                    foo: "bar"
                - name: "X-Registry-Auth"
                  in: "header"
                  description: |
                      A base64url-encoded auth configuration for pulling from private
                      registries.

                      Refer to the [authentication section](#section/Authentication) for
                      details.
                  type: "string"
            tags: ["Service"]
    /services/{id}:
        get:
            summary: "Inspect a service"
            operationId: "ServiceInspect"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Service"
                404:
                    description: "no such service"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "ID or name of service."
                  required: true
                  type: "string"
                - name: "insertDefaults"
                  in: "query"
                  description: "Fill empty fields with default values."
                  type: "boolean"
                  default: false
            tags: ["Service"]
        delete:
            summary: "Delete a service"
            operationId: "ServiceDelete"
            responses:
                200:
                    description: "no error"
                404:
                    description: "no such service"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "ID or name of service."
                  required: true
                  type: "string"
            tags: ["Service"]
    /services/{id}/update:
        post:
            summary: "Update a service"
            operationId: "ServiceUpdate"
            consumes: ["application/json"]
            produces: ["application/json"]
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/ServiceUpdateResponse"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such service"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "ID or name of service."
                  required: true
                  type: "string"
                - name: "body"
                  in: "body"
                  required: true
                  schema:
                      allOf:
                          - $ref: "#/definitions/ServiceSpec"
                          - type: "object"
                            example:
                                Name: "top"
                                TaskTemplate:
                                    ContainerSpec:
                                        Image: "busybox"
                                        Args:
                                            - "top"
                                    Resources:
                                        Limits: {}
                                        Reservations: {}
                                    RestartPolicy:
                                        Condition: "any"
                                        MaxAttempts: 0
                                    Placement: {}
                                    ForceUpdate: 0
                                Mode:
                                    Replicated:
                                        Replicas: 1
                                UpdateConfig:
                                    Parallelism: 2
                                    Delay: 1000000000
                                    FailureAction: "pause"
                                    Monitor: 15000000000
                                    MaxFailureRatio: 0.15
                                RollbackConfig:
                                    Parallelism: 1
                                    Delay: 1000000000
                                    FailureAction: "pause"
                                    Monitor: 15000000000
                                    MaxFailureRatio: 0.15
                                EndpointSpec:
                                    Mode: "vip"

                - name: "version"
                  in: "query"
                  description: |
                      The version number of the service object being updated. This is
                      required to avoid conflicting writes.
                      This version number should be the value as currently set on the
                      service *before* the update. You can find the current version by
                      calling `GET /services/{id}`
                  required: true
                  type: "integer"
                - name: "registryAuthFrom"
                  in: "query"
                  description: |
                      If the `X-Registry-Auth` header is not specified, this parameter
                      indicates where to find registry authorization credentials.
                  type: "string"
                  enum: ["spec", "previous-spec"]
                  default: "spec"
                - name: "rollback"
                  in: "query"
                  description: |
                      Set to this parameter to `previous` to cause a server-side rollback
                      to the previous service spec. The supplied spec will be ignored in
                      this case.
                  type: "string"
                - name: "X-Registry-Auth"
                  in: "header"
                  description: |
                      A base64url-encoded auth configuration for pulling from private
                      registries.

                      Refer to the [authentication section](#section/Authentication) for
                      details.
                  type: "string"

            tags: ["Service"]
    /services/{id}/logs:
        get:
            summary: "Get service logs"
            description: |
                Get `stdout` and `stderr` logs from a service. See also
                [`/containers/{id}/logs`](#operation/ContainerLogs).

                **Note**: This endpoint works only for services with the `local`,
                `json-file` or `journald` logging drivers.
            produces:
                - "application/vnd.docker.raw-stream"
                - "application/vnd.docker.multiplexed-stream"
            operationId: "ServiceLogs"
            responses:
                200:
                    description: "logs returned as a stream in response body"
                    schema:
                        type: "string"
                        format: "binary"
                404:
                    description: "no such service"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such service: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID or name of the service"
                  type: "string"
                - name: "details"
                  in: "query"
                  description: "Show service context and extra details provided to logs."
                  type: "boolean"
                  default: false
                - name: "follow"
                  in: "query"
                  description: "Keep connection after returning logs."
                  type: "boolean"
                  default: false
                - name: "stdout"
                  in: "query"
                  description: "Return logs from `stdout`"
                  type: "boolean"
                  default: false
                - name: "stderr"
                  in: "query"
                  description: "Return logs from `stderr`"
                  type: "boolean"
                  default: false
                - name: "since"
                  in: "query"
                  description: "Only return logs since this time, as a UNIX timestamp"
                  type: "integer"
                  default: 0
                - name: "timestamps"
                  in: "query"
                  description: "Add timestamps to every log line"
                  type: "boolean"
                  default: false
                - name: "tail"
                  in: "query"
                  description: |
                      Only return this number of log lines from the end of the logs.
                      Specify as an integer or `all` to output all log lines.
                  type: "string"
                  default: "all"
            tags: ["Service"]
    /tasks:
        get:
            summary: "List tasks"
            operationId: "TaskList"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Task"
                        example:
                            - ID: "0kzzo1i0y4jz6027t0k7aezc7"
                              Version:
                                  Index: 71
                              CreatedAt: "2016-06-07T21:07:31.171892745Z"
                              UpdatedAt: "2016-06-07T21:07:31.376370513Z"
                              Spec:
                                  ContainerSpec:
                                      Image: "redis"
                                  Resources:
                                      Limits: {}
                                      Reservations: {}
                                  RestartPolicy:
                                      Condition: "any"
                                      MaxAttempts: 0
                                  Placement: {}
                              ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
                              Slot: 1
                              NodeID: "60gvrl6tm78dmak4yl7srz94v"
                              Status:
                                  Timestamp: "2016-06-07T21:07:31.290032978Z"
                                  State: "running"
                                  Message: "started"
                                  ContainerStatus:
                                      ContainerID: "e5d62702a1b48d01c3e02ca1e0212a250801fa8d67caca0b6f35919ebc12f035"
                                      PID: 677
                              DesiredState: "running"
                              NetworksAttachments:
                                  - Network:
                                        ID: "4qvuz4ko70xaltuqbt8956gd1"
                                        Version:
                                            Index: 18
                                        CreatedAt: "2016-06-07T20:31:11.912919752Z"
                                        UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                                        Spec:
                                            Name: "ingress"
                                            Labels:
                                                com.docker.swarm.internal: "true"
                                            DriverConfiguration: {}
                                            IPAMOptions:
                                                Driver: {}
                                                Configs:
                                                    - Subnet: "10.255.0.0/16"
                                                      Gateway: "10.255.0.1"
                                        DriverState:
                                            Name: "overlay"
                                            Options:
                                                com.docker.network.driver.overlay.vxlanid_list: "256"
                                        IPAMOptions:
                                            Driver:
                                                Name: "default"
                                            Configs:
                                                - Subnet: "10.255.0.0/16"
                                                  Gateway: "10.255.0.1"
                                    Addresses:
                                        - "10.255.0.10/16"
                            - ID: "1yljwbmlr8er2waf8orvqpwms"
                              Version:
                                  Index: 30
                              CreatedAt: "2016-06-07T21:07:30.019104782Z"
                              UpdatedAt: "2016-06-07T21:07:30.231958098Z"
                              Name: "hopeful_cori"
                              Spec:
                                  ContainerSpec:
                                      Image: "redis"
                                  Resources:
                                      Limits: {}
                                      Reservations: {}
                                  RestartPolicy:
                                      Condition: "any"
                                      MaxAttempts: 0
                                  Placement: {}
                              ServiceID: "9mnpnzenvg8p8tdbtq4wvbkcz"
                              Slot: 1
                              NodeID: "60gvrl6tm78dmak4yl7srz94v"
                              Status:
                                  Timestamp: "2016-06-07T21:07:30.202183143Z"
                                  State: "shutdown"
                                  Message: "shutdown"
                                  ContainerStatus:
                                      ContainerID: "1cf8d63d18e79668b0004a4be4c6ee58cddfad2dae29506d8781581d0688a213"
                              DesiredState: "shutdown"
                              NetworksAttachments:
                                  - Network:
                                        ID: "4qvuz4ko70xaltuqbt8956gd1"
                                        Version:
                                            Index: 18
                                        CreatedAt: "2016-06-07T20:31:11.912919752Z"
                                        UpdatedAt: "2016-06-07T21:07:29.955277358Z"
                                        Spec:
                                            Name: "ingress"
                                            Labels:
                                                com.docker.swarm.internal: "true"
                                            DriverConfiguration: {}
                                            IPAMOptions:
                                                Driver: {}
                                                Configs:
                                                    - Subnet: "10.255.0.0/16"
                                                      Gateway: "10.255.0.1"
                                        DriverState:
                                            Name: "overlay"
                                            Options:
                                                com.docker.network.driver.overlay.vxlanid_list: "256"
                                        IPAMOptions:
                                            Driver:
                                                Name: "default"
                                            Configs:
                                                - Subnet: "10.255.0.0/16"
                                                  Gateway: "10.255.0.1"
                                    Addresses:
                                        - "10.255.0.5/16"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  type: "string"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the tasks list.

                      Available filters:

                      - `desired-state=(running | shutdown | accepted)`
                      - `id=<task id>`
                      - `label=key` or `label="key=value"`
                      - `name=<task name>`
                      - `node=<node id or name>`
                      - `service=<service name>`
            tags: ["Task"]
    /tasks/{id}:
        get:
            summary: "Inspect a task"
            operationId: "TaskInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Task"
                404:
                    description: "no such task"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "ID of the task"
                  required: true
                  type: "string"
            tags: ["Task"]
    /tasks/{id}/logs:
        get:
            summary: "Get task logs"
            description: |
                Get `stdout` and `stderr` logs from a task.
                See also [`/containers/{id}/logs`](#operation/ContainerLogs).

                **Note**: This endpoint works only for services with the `local`,
                `json-file` or `journald` logging drivers.
            operationId: "TaskLogs"
            produces:
                - "application/vnd.docker.raw-stream"
                - "application/vnd.docker.multiplexed-stream"
            responses:
                200:
                    description: "logs returned as a stream in response body"
                    schema:
                        type: "string"
                        format: "binary"
                404:
                    description: "no such task"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such task: c2ada9df5af8"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  description: "ID of the task"
                  type: "string"
                - name: "details"
                  in: "query"
                  description: "Show task context and extra details provided to logs."
                  type: "boolean"
                  default: false
                - name: "follow"
                  in: "query"
                  description: "Keep connection after returning logs."
                  type: "boolean"
                  default: false
                - name: "stdout"
                  in: "query"
                  description: "Return logs from `stdout`"
                  type: "boolean"
                  default: false
                - name: "stderr"
                  in: "query"
                  description: "Return logs from `stderr`"
                  type: "boolean"
                  default: false
                - name: "since"
                  in: "query"
                  description: "Only return logs since this time, as a UNIX timestamp"
                  type: "integer"
                  default: 0
                - name: "timestamps"
                  in: "query"
                  description: "Add timestamps to every log line"
                  type: "boolean"
                  default: false
                - name: "tail"
                  in: "query"
                  description: |
                      Only return this number of log lines from the end of the logs.
                      Specify as an integer or `all` to output all log lines.
                  type: "string"
                  default: "all"
            tags: ["Task"]
    /secrets:
        get:
            summary: "List secrets"
            operationId: "SecretList"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Secret"
                        example:
                            - ID: "blt1owaxmitz71s9v5zh81zun"
                              Version:
                                  Index: 85
                              CreatedAt: "2017-07-20T13:55:28.678958722Z"
                              UpdatedAt: "2017-07-20T13:55:28.678958722Z"
                              Spec:
                                  Name: "mysql-passwd"
                                  Labels:
                                      some.label: "some.value"
                                  Driver:
                                      Name: "secret-bucket"
                                      Options:
                                          OptionA: "value for driver option A"
                                          OptionB: "value for driver option B"
                            - ID: "ktnbjxoalbkvbvedmg1urrz8h"
                              Version:
                                  Index: 11
                              CreatedAt: "2016-11-05T01:20:17.327670065Z"
                              UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                              Spec:
                                  Name: "app-dev.crt"
                                  Labels:
                                      foo: "bar"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  type: "string"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the secrets list.

                      Available filters:

                      - `id=<secret id>`
                      - `label=<key> or label=<key>=value`
                      - `name=<secret name>`
                      - `names=<secret name>`
            tags: ["Secret"]
    /secrets/create:
        post:
            summary: "Create a secret"
            operationId: "SecretCreate"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                201:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/IdResponse"
                409:
                    description: "name conflicts with an existing object"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "body"
                  in: "body"
                  schema:
                      allOf:
                          - $ref: "#/definitions/SecretSpec"
                          - type: "object"
                            example:
                                Name: "app-key.crt"
                                Labels:
                                    foo: "bar"
                                Data: "VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg=="
                                Driver:
                                    Name: "secret-bucket"
                                    Options:
                                        OptionA: "value for driver option A"
                                        OptionB: "value for driver option B"
            tags: ["Secret"]
    /secrets/{id}:
        get:
            summary: "Inspect a secret"
            operationId: "SecretInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Secret"
                    examples:
                        application/json:
                            ID: "ktnbjxoalbkvbvedmg1urrz8h"
                            Version:
                                Index: 11
                            CreatedAt: "2016-11-05T01:20:17.327670065Z"
                            UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                            Spec:
                                Name: "app-dev.crt"
                                Labels:
                                    foo: "bar"
                                Driver:
                                    Name: "secret-bucket"
                                    Options:
                                        OptionA: "value for driver option A"
                                        OptionB: "value for driver option B"

                404:
                    description: "secret not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
                  description: "ID of the secret"
            tags: ["Secret"]
        delete:
            summary: "Delete a secret"
            operationId: "SecretDelete"
            produces:
                - "application/json"
            responses:
                204:
                    description: "no error"
                404:
                    description: "secret not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
                  description: "ID of the secret"
            tags: ["Secret"]
    /secrets/{id}/update:
        post:
            summary: "Update a Secret"
            operationId: "SecretUpdate"
            responses:
                200:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such secret"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The ID or name of the secret"
                  type: "string"
                  required: true
                - name: "body"
                  in: "body"
                  schema:
                      $ref: "#/definitions/SecretSpec"
                  description: |
                      The spec of the secret to update. Currently, only the Labels field
                      can be updated. All other fields must remain unchanged from the
                      [SecretInspect endpoint](#operation/SecretInspect) response values.
                - name: "version"
                  in: "query"
                  description: |
                      The version number of the secret object being updated. This is
                      required to avoid conflicting writes.
                  type: "integer"
                  format: "int64"
                  required: true
            tags: ["Secret"]
    /configs:
        get:
            summary: "List configs"
            operationId: "ConfigList"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        type: "array"
                        items:
                            $ref: "#/definitions/Config"
                        example:
                            - ID: "ktnbjxoalbkvbvedmg1urrz8h"
                              Version:
                                  Index: 11
                              CreatedAt: "2016-11-05T01:20:17.327670065Z"
                              UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                              Spec:
                                  Name: "server.conf"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "filters"
                  in: "query"
                  type: "string"
                  description: |
                      A JSON encoded value of the filters (a `map[string][]string`) to
                      process on the configs list.

                      Available filters:

                      - `id=<config id>`
                      - `label=<key> or label=<key>=value`
                      - `name=<config name>`
                      - `names=<config name>`
            tags: ["Config"]
    /configs/create:
        post:
            summary: "Create a config"
            operationId: "ConfigCreate"
            consumes:
                - "application/json"
            produces:
                - "application/json"
            responses:
                201:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/IdResponse"
                409:
                    description: "name conflicts with an existing object"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "body"
                  in: "body"
                  schema:
                      allOf:
                          - $ref: "#/definitions/ConfigSpec"
                          - type: "object"
                            example:
                                Name: "server.conf"
                                Labels:
                                    foo: "bar"
                                Data: "VEhJUyBJUyBOT1QgQSBSRUFMIENFUlRJRklDQVRFCg=="
            tags: ["Config"]
    /configs/{id}:
        get:
            summary: "Inspect a config"
            operationId: "ConfigInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "no error"
                    schema:
                        $ref: "#/definitions/Config"
                    examples:
                        application/json:
                            ID: "ktnbjxoalbkvbvedmg1urrz8h"
                            Version:
                                Index: 11
                            CreatedAt: "2016-11-05T01:20:17.327670065Z"
                            UpdatedAt: "2016-11-05T01:20:17.327670065Z"
                            Spec:
                                Name: "app-dev.crt"
                404:
                    description: "config not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
                  description: "ID of the config"
            tags: ["Config"]
        delete:
            summary: "Delete a config"
            operationId: "ConfigDelete"
            produces:
                - "application/json"
            responses:
                204:
                    description: "no error"
                404:
                    description: "config not found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  required: true
                  type: "string"
                  description: "ID of the config"
            tags: ["Config"]
    /configs/{id}/update:
        post:
            summary: "Update a Config"
            operationId: "ConfigUpdate"
            responses:
                200:
                    description: "no error"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                404:
                    description: "no such config"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                503:
                    description: "node is not part of a swarm"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "id"
                  in: "path"
                  description: "The ID or name of the config"
                  type: "string"
                  required: true
                - name: "body"
                  in: "body"
                  schema:
                      $ref: "#/definitions/ConfigSpec"
                  description: |
                      The spec of the config to update. Currently, only the Labels field
                      can be updated. All other fields must remain unchanged from the
                      [ConfigInspect endpoint](#operation/ConfigInspect) response values.
                - name: "version"
                  in: "query"
                  description: |
                      The version number of the config object being updated. This is
                      required to avoid conflicting writes.
                  type: "integer"
                  format: "int64"
                  required: true
            tags: ["Config"]
    /distribution/{name}/json:
        get:
            summary: "Get image information from the registry"
            description: |
                Return image digest and platform information by contacting the registry.
            operationId: "DistributionInspect"
            produces:
                - "application/json"
            responses:
                200:
                    description: "descriptor and platform information"
                    schema:
                        $ref: "#/definitions/DistributionInspect"
                401:
                    description: "Failed authentication or no image found"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                    examples:
                        application/json:
                            message: "No such image: someimage (tag: latest)"
                500:
                    description: "Server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            parameters:
                - name: "name"
                  in: "path"
                  description: "Image name or id"
                  type: "string"
                  required: true
            tags: ["Distribution"]
    /session:
        post:
            summary: "Initialize interactive session"
            description: |
                Start a new interactive session with a server. Session allows server to
                call back to the client for advanced capabilities.

                ### Hijacking

                This endpoint hijacks the HTTP connection to HTTP2 transport that allows
                the client to expose gPRC services on that connection.

                For example, the client sends this request to upgrade the connection:

                ```
                POST /session HTTP/1.1
                Upgrade: h2c
                Connection: Upgrade
                ```

                The Docker daemon responds with a `101 UPGRADED` response follow with
                the raw stream:

                ```
                HTTP/1.1 101 UPGRADED
                Connection: Upgrade
                Upgrade: h2c
                ```
            operationId: "Session"
            produces:
                - "application/vnd.docker.raw-stream"
            responses:
                101:
                    description: "no error, hijacking successful"
                400:
                    description: "bad parameter"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
                500:
                    description: "server error"
                    schema:
                        $ref: "#/definitions/ErrorResponse"
            tags: ["Session"]
