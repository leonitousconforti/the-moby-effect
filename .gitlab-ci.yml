stages:
  - prepare
  - build
  - test
  - deploy
  - release

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

variables:
  CI: true
  GIT_DEPTH: 2
  GIT_STRATEGY: fetch
  GIT_SUBMODULE_DEPTH: 1
  GIT_SUBMODULE_STRATEGY: recursive

default:
  image: node:lts-alpine@sha256:ad1aedbcc1b0575074a91ac146d6956476c1f9985994810e4ee02efd932a68fd
  tags: [docker]
  timeout: 10 minutes
  before_script:
    - npm install --global corepack@latest
    - corepack install
    - corepack enable
    - pnpm config set store-dir .pnpm-store
    - pnpm install
  cache:
    paths:
      - .pnpm-store
    key:
      files:
        - pnpm-lock.yaml

comment:
  stage: prepare
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  variables:
    GITLAB_TOKEN: $CI_COMMENT_TOKEN
  script:
    - pnpm changesets-gitlab comment
    - pnpm changesets-gitlab comment

devcontainer_job:
  stage: build
  image: docker:28.1.1@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  services:
    - docker:28.1.1-dind@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  variables:
    DOCKER_BUILDKIT: "1"
    DOCKER_DRIVER: "overlay2"
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_BUILDKIT_INLINE_CACHE: "1"
    DOCKER_CONTAINERD_IMAGE_STORE: "1"
    FQ_IMAGE_NAME: "$CI_REGISTRY_IMAGE/dev-container:$CI_COMMIT_REF_SLUG"
  before_script:
    - apk add --update nodejs npm python3 make g++
    - npm install --global @devcontainers/cli
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
  script:
    - docker pull $FQ_IMAGE_NAME || docker pull $CI_REGISTRY_IMAGE/dev-container:$CI_DEFAULT_BRANCH || true
    - docker tag $CI_REGISTRY_IMAGE/dev-container:$CI_DEFAULT_BRANCH $FQ_IMAGE_NAME || true
    - devcontainer build --cache-from $FQ_IMAGE_NAME --cache-to type=inline,mode=max --image-name $FQ_IMAGE_NAME --workspace-folder .
    - docker push $FQ_IMAGE_NAME

build_job:
  stage: build
  image: docker:28.1.1@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  services:
    - docker:28.1.1-dind@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  needs:
    - job: devcontainer_job
  variables:
    CI: true
    FQ_IMAGE_NAME: "$CI_REGISTRY_IMAGE/dev-container:$CI_COMMIT_REF_SLUG"
  before_script:
    - docker pull $FQ_IMAGE_NAME
  script: |
    #!/bin/sh
    set -e
    build_date="$(date +%s)"
    apk add --update nodejs npm python3 make g++
    npm install --global @devcontainers/cli

    # Create a label for use during cleanup since the devcontainer CLI does
    # not have a "remove" or "down" command yet (though this is planned).
    id_label="ci-container=${build_date}"

    # Run build
    devcontainer up --cache-from $FQ_IMAGE_NAME --id-label ${id_label} --remote-env CI=true --workspace-folder .
    set +e
    devcontainer exec --id-label ${id_label} --workspace-folder . pnpm check
    build_exit_code=$?
    set -e

    # Clean up.
    docker rm -f $(docker ps -aq --filter label=${id_label})
    exit ${build_exit_code}
  coverage: /All files(?:[^|]*\|){4}\s*(\S+)/
  cache: []
  artifacts:
    paths:
      - dist/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit:
        - coverage/junit.xml

secret_detection:
  before_script: []
  cache: []

release:
  stage: release
  rules:
    - if: $CI_PROJECT_PATH == "leoconforti/the-moby-effect" && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  needs:
    - job: build_job
      artifacts: true
  script:
    - apk add --update git
    - touch ${GITHUB_ENV}
    - |
      cat << EOF > "$HOME/.npmrc"
        //registry.npmjs.org/:_authToken=$NPM_TOKEN
        //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}
        @${CI_PROJECT_ROOT_NAMESPACE}:registry=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/
      EOF
    - pnpm changesets-gitlab
    - PUBLISHED=$(sed -n '/^PUBLISHED<<.*$/,/^.*ghadelimiter_.*$/p' ${GITHUB_ENV} | sed '1d;$d')
    - |
      if [ "$PUBLISHED" = "true" ]; then
        pnpm publish --access public --registry ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/npm/ --no-git-checks
      else
        echo "Skipping publish to GitLab NPM registry"
      fi
  variables:
    GITLAB_TOKEN: $CI_API_TOKEN
    INPUT_REMOVE_SOURCE_BRANCH: true
    INPUT_CREATE_GITLAB_RELEASES: true
    INPUT_PUBLISH: pnpm changeset publish
    GITHUB_ENV: "${CI_PROJECT_DIR}/.github-env-file"

pages_job:
  image: ruby:latest@sha256:6adb999a22072227ba4ddfce8746959deb3a14bc9e32ad55e9723f5b3995aa94
  stage: deploy
  pages: true
  rules:
    - if: $CI_PROJECT_PATH == "leoconforti/the-moby-effect" && $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
  needs:
    - job: build_job
      artifacts: true
  before_script: []
  script:
    - gem install github-pages
    - github-pages build --source docs --destination public
  cache: []
  artifacts:
    paths:
      - public
