variables:
  DOCKER_ENGINE_CONNECTION_VARIANTS: '["ssh", "http", "https", "socket"]'
  PLATFORM_VARIANTS: '["node-18.x", "node-20.x", "node-22.x", "bun", "deno", "node-18.x-undici", "node-20.x-undici", "node-22.x-undici", "bun-undici", "deno-undici"]'
  DOCKER_ENGINE_VERSIONS: '["docker.io/library/docker:23-dind-rootless", "docker.io/library/docker:24-dind-rootless", "docker.io/library/docker:25-dind-rootless", "docker.io/library/docker:26-dind-rootless", "docker.io/library/docker:27-dind-rootless"]'

stages:
  - build

# Workflow settings
# workflow:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Configure pipeline-level concurrency
# Note: GitLab handles concurrency differently from GitHub
# cancel_outdated_pipelines:
#   stage: .pre
#   script:
#     - echo "Canceling outdated pipelines..."
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: always
#   tags:
#     - linux

typescript-build:
  stage: build
  timeout: 10 minutes
  tags:
    - ubuntu-24.04
  script:
    - npm install -g corepack@latest
    - corepack install
    - corepack enable
    - pnpm install
    - pnpm check
    - pnpm lint
    - pnpm circular
    - sudo usermod -aG docker $USER # FIXME: add this to the runner images
    - newgrp docker # FIXME: add this to the runner images
    - pnpm build
# docker-build:
#   image: docker:latest
#   stage: build
#   services:
#     - docker:dind
#   parallel:
#     matrix:
#       - DOCKERFILE: $DOCKER_ENGINE_CONNECTION_VARIANTS
#   variables:
#     DOCKER_HOST: tcp://docker:2375
#     DOCKER_TLS_CERTDIR: ""
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - |
#       DOCKERFILE_PATH="docker/dind-${DOCKERFILE}.dockerfile"
#       docker buildx create --use
#       docker buildx build \
#         --platform linux/amd64,linux/arm64,linux/arm/v7,linux/arm/v6 \
#         --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
#         --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
#         --tag $CI_REGISTRY_IMAGE/${DOCKERFILE}-dind:$CI_COMMIT_SHA \
#         --file $DOCKERFILE_PATH \
#         --build-arg DIND_BASE_IMAGE=docker.io/library/docker:dind \
#         --push .
#   timeout: 10 minutes
#   tags:
#     - linux

# docker-engine-tests:
#   parallel:
#     matrix:
#       - PLATFORM_VARIANT: $PLATFORM_VARIANTS
#         DOCKER_ENGINE_VERSION: $DOCKER_ENGINE_VERSIONS
#         CONNECTION_VARIANT: $DOCKER_ENGINE_CONNECTION_VARIANTS
#   stage: test
#   variables:
#     __PLATFORM_VARIANT: $PLATFORM_VARIANT
#     __DOCKER_ENGINE_VERSION: $DOCKER_ENGINE_VERSION
#     __CONNECTION_VARIANT: $CONNECTION_VARIANT
#   before_script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker pull $DOCKER_ENGINE_VERSION
#   script:
#     - |
#       if [[ $PLATFORM_VARIANT == node* ]]; then
#         # Setup Node.js environment
#         curl -fsSL https://fnm.vercel.app/install | bash
#         export PATH="/root/.local/share/fnm:$PATH"
#         eval "$(fnm env)"
#         fnm install ${PLATFORM_VARIANT#node-}
#         npm install -g pnpm

#         if [[ $CONNECTION_VARIANT == socket ]]; then
#           sudo -E pnpm test
#         else
#           pnpm test
#         fi
#       elif [[ $PLATFORM_VARIANT == bun* ]]; then
#         # Setup Bun environment
#         curl -fsSL https://bun.sh/install | bash
#         export BUN_INSTALL="/root/.bun"
#         export PATH="$BUN_INSTALL/bin:$PATH"

#         if [[ $CONNECTION_VARIANT == socket ]]; then
#           sudo -E bunx vitest
#         else
#           bunx vitest
#         fi
#       elif [[ $PLATFORM_VARIANT == deno* ]]; then
#         # Setup Deno environment
#         curl -fsSL https://deno.land/install.sh | sh
#         export DENO_INSTALL="/root/.deno"
#         export PATH="$DENO_INSTALL/bin:$PATH"

#         if [[ $CONNECTION_VARIANT == socket ]]; then
#           sudo -E deno task test --watch=false
#         else
#           deno task test --watch=false
#         fi
#       fi
#   timeout: 10 minutes
#   needs:
#     - typescript-build
#     - docker-build
#   tags:
#     - linux

# merge-check:
#   stage: .post
#   script:
#     - |
#       if [[ "$CI_PIPELINE_STATUS" != "success" ]]; then
#         echo "Pipeline failed or was canceled"
#         exit 1
#       fi
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
#       when: always
#   tags:
#     - linux
